/////////////////////////////////////////////////////////////
// Created by: Synopsys DC Expert(TM) in wire load mode
// Version   : R-2020.09-SP1
// Date      : Sat Dec  7 21:18:02 2024
/////////////////////////////////////////////////////////////


module token_bucket_SIGMA3_RATE20_0 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, n10, n11, n12, n14, n15, n16, n17, n18, n19,
         \add_31/carry[4] , \add_31/carry[3] , \add_31/carry[2] , n1, n2, n3,
         n4, n5, n6;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n16), .Z(n15) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n17), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n17), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n17), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n17), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n17), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  DFQD1 \number_tokens_reg[1]  ( .D(n19), .CP(clk), .Q(number_tokens[1]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n12), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n17) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n16), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n14), .B2(n15), .ZN(n12) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n17), .C(
        consume), .ZN(n14) );
  OAI22D1 U11 ( .A1(n10), .A2(n6), .B1(n3), .B2(n11), .ZN(n19) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n11) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n10) );
  INVD1 U14 ( .I(n12), .ZN(n3) );
  INVD1 U15 ( .I(number_tokens[1]), .ZN(n6) );
  ND4D1 U16 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n18), .A4(
        rate_counter[0]), .ZN(n16) );
  NR2D1 U17 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n18) );
  INVD1 U18 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U19 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X0_Y0_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_0 regulator ( .clk(clk), .rst(rst), .consume(n15), 
        .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X0_Y0 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U7 ( .A1(i_y[1]), .A2(i_y[0]), .A3(n4), .Z(n11) );
  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  OR2D0 U3 ( .A1(n_y[0]), .A2(n_y[1]), .Z(n13) );
  AN2XD1 U4 ( .A1(n12), .A2(n8), .Z(n14) );
  OAI32D1 U5 ( .A1(n3), .A2(w2e), .A3(n10), .B1(n4), .B2(n5), .ZN(i_ack) );
  IND2D1 U6 ( .A1(n16), .B1(n17), .ZN(n8) );
  INVD1 U8 ( .I(n15), .ZN(w2e) );
  ND2D1 U9 ( .A1(n16), .A2(n17), .ZN(n12) );
  NR2D1 U11 ( .A1(n7), .A2(n14), .ZN(w2s) );
  INVD1 U12 ( .I(n10), .ZN(n4) );
  OAI21D1 U13 ( .A1(n10), .A2(n3), .B(n15), .ZN(e_v) );
  NR2D1 U14 ( .A1(w_y[0]), .A2(w_y[1]), .ZN(n16) );
  OAI21D1 U15 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  NR2D1 U16 ( .A1(w_x[0]), .A2(w_x[1]), .ZN(n17) );
  NR2D1 U17 ( .A1(i_x[0]), .A2(i_x[1]), .ZN(n10) );
  ND2D1 U18 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U19 ( .I(n_v), .ZN(n1) );
  OAI222D0 U20 ( .A1(n7), .A2(n12), .B1(n1), .B2(n13), .C1(n5), .C2(n11), .ZN(
        o_v) );
  INVD1 U21 ( .I(i_v), .ZN(n3) );
  OAI222D0 U22 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  NR2D0 U23 ( .A1(n_y[0]), .A2(n_y[1]), .ZN(n9) );
  ND2D1 U24 ( .A1(n10), .A2(n11), .ZN(n6) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X0_Y0 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n19), .A2(n18), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X0_Y0 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n12), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n12), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n12), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n12), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n14), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n13), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n12), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n16), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n15), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n16), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n14), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n13), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n12), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n16), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n15), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n14), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n14), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n14), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n14), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n14), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n14), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n14), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n13), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n16), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n14), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n13), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n16), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n14), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n13), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n16), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n14), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n13), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n16), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n14), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n13), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n13), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n13), .D(n9), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n12), .D(n7), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n16), .D(n11), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n14), .D(n2), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n15), .D(s_msg[31]), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n12), .D(s_msg[30]), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n16), .D(s_msg[29]), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n14), .D(s_msg[28]), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n15), .D(s_msg[27]), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n12), .D(s_msg[26]), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n16), .D(s_msg[25]), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n14), .D(s_msg[24]), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n15), .D(s_msg[23]), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n12), .D(s_msg[22]), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n16), .D(s_msg[21]), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n14), .D(s_msg[20]), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n15), .D(s_msg[19]), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n12), .D(s_msg[18]), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n16), .D(s_msg[17]), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n14), .D(s_msg[16]), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n15), .D(s_msg[15]), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n12), .D(s_msg[14]), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n16), .D(s_msg[13]), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n14), .D(s_msg[12]), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n15), .D(s_msg[11]), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n12), .D(s_msg[10]), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n16), .D(s_msg[9]), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n14), .D(s_msg[8]), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n15), .D(s_msg[7]), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n12), .D(s_msg[6]), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n16), .D(s_msg[5]), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n14), .D(s_msg[4]), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n15), .D(s_msg[3]), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n12), .D(s_msg[2]), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n16), .D(s_msg[1]), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n15), .D(s_msg[0]), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n12), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n12), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n12), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n12), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n16), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n15), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n12), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n13), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n16), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n15), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n12), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n13), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n16), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n15), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n12), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n13), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n16), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n15), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n12), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n13), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n16), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n15), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n12), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n13), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n16), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n14), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n15), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n13), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n15), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n15), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n15), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n15), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n15), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n15), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n15), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n15), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n15), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n13), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n15), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n14), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n14), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n12), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n16), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n12), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n14), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n13), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n16), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n14), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n13), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n16), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n14), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n13), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n16), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n14), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n13), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n13), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n12), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n16), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n15), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n14), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n13), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n12), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n16), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n15), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n14), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n13), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n12), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n16), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n15), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n14), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n13), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n12), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n16), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n15), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n12), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n12), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n12), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[34]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[32]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[33]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[35]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  INVD1 U12 ( .I(dor_e_v), .ZN(n19) );
  low_swing_rx U13 ( .i(n15), .o(n14) );
  low_swing_rx U14 ( .i(n14), .o(n13) );
  low_swing_rx U15 ( .i(n16), .o(n12) );
  INVD1 U16 ( .I(n17), .ZN(n16) );
  low_swing_rx U17 ( .i(n16), .o(n15) );
  INVD1 U18 ( .I(dor_o_v), .ZN(n18) );
  INR4D0 U19 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U20 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U21 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U22 ( .i(rst), .o(n17) );
  TIEL U23 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_15 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X1_Y0_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_15 regulator ( .clk(clk), .rst(rst), .consume(n15), .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X1_Y0 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U7 ( .A1(i_y[1]), .A2(i_y[0]), .A3(n13), .Z(n10) );
  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  OR2D0 U3 ( .A1(n_y[0]), .A2(n_y[1]), .Z(n12) );
  AN2XD1 U4 ( .A1(n11), .A2(n8), .Z(n14) );
  IND2D1 U5 ( .A1(n16), .B1(n17), .ZN(n8) );
  OAI32D1 U6 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  INVD1 U8 ( .I(n15), .ZN(w2e) );
  ND2D1 U9 ( .A1(n16), .A2(n17), .ZN(n11) );
  NR2D1 U11 ( .A1(n7), .A2(n14), .ZN(w2s) );
  INVD1 U12 ( .I(n13), .ZN(n4) );
  OAI21D1 U13 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  NR2D1 U14 ( .A1(w_y[0]), .A2(w_y[1]), .ZN(n16) );
  OAI21D1 U15 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  INR2D1 U16 ( .A1(w_x[0]), .B1(w_x[1]), .ZN(n17) );
  IND2D1 U17 ( .A1(i_x[1]), .B1(i_x[0]), .ZN(n13) );
  ND2D1 U18 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U19 ( .I(n_v), .ZN(n1) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  OAI222D0 U22 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U23 ( .A1(n4), .A2(n10), .ZN(n6) );
  NR2D0 U24 ( .A1(n_y[0]), .A2(n_y[1]), .ZN(n9) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X1_Y0 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n19), .A2(n18), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X1_Y0 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n12), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n12), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n12), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n12), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n14), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n13), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n12), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n16), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n15), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n16), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n14), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n13), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n12), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n16), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n15), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n14), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n14), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n14), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n14), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n14), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n14), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n14), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n13), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n16), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n14), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n13), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n16), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n14), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n13), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n16), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n14), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n13), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n16), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n14), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n13), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n13), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n13), .D(n11), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n12), .D(n7), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n16), .D(n2), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n14), .D(n9), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n15), .D(s_msg[31]), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n12), .D(s_msg[30]), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n16), .D(s_msg[29]), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n14), .D(s_msg[28]), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n15), .D(s_msg[27]), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n12), .D(s_msg[26]), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n16), .D(s_msg[25]), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n14), .D(s_msg[24]), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n15), .D(s_msg[23]), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n12), .D(s_msg[22]), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n16), .D(s_msg[21]), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n14), .D(s_msg[20]), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n15), .D(s_msg[19]), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n12), .D(s_msg[18]), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n16), .D(s_msg[17]), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n14), .D(s_msg[16]), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n15), .D(s_msg[15]), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n12), .D(s_msg[14]), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n16), .D(s_msg[13]), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n14), .D(s_msg[12]), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n15), .D(s_msg[11]), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n12), .D(s_msg[10]), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n16), .D(s_msg[9]), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n14), .D(s_msg[8]), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n15), .D(s_msg[7]), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n12), .D(s_msg[6]), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n16), .D(s_msg[5]), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n14), .D(s_msg[4]), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n15), .D(s_msg[3]), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n12), .D(s_msg[2]), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n16), .D(s_msg[1]), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n15), .D(s_msg[0]), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n12), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n12), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n12), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n12), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n16), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n15), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n12), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n13), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n16), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n15), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n12), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n13), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n16), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n15), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n12), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n13), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n16), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n15), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n12), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n13), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n16), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n15), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n12), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n13), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n16), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n14), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n15), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n13), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n15), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n15), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n15), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n15), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n15), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n15), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n15), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n15), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n15), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n13), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n15), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n14), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n14), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n12), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n16), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n12), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n14), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n13), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n16), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n14), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n13), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n16), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n14), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n13), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n16), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n14), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n13), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n13), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n12), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n16), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n15), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n14), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n13), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n12), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n16), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n15), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n14), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n13), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n12), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n16), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n15), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n14), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n13), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n12), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n16), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n15), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n12), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n12), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n12), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[35]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[32]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[34]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[33]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  INVD1 U12 ( .I(dor_e_v), .ZN(n19) );
  low_swing_rx U13 ( .i(n15), .o(n14) );
  low_swing_rx U14 ( .i(n14), .o(n13) );
  low_swing_rx U15 ( .i(n16), .o(n12) );
  INVD1 U16 ( .I(n17), .ZN(n16) );
  low_swing_rx U17 ( .i(n16), .o(n15) );
  INVD1 U18 ( .I(dor_o_v), .ZN(n18) );
  INR4D0 U19 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U20 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U21 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U22 ( .i(rst), .o(n17) );
  TIEL U23 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_14 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X2_Y0_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_14 regulator ( .clk(clk), .rst(rst), .consume(n15), .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X2_Y0 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U7 ( .A1(i_y[1]), .A2(i_y[0]), .A3(n13), .Z(n10) );
  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  OR2D0 U3 ( .A1(n_y[0]), .A2(n_y[1]), .Z(n12) );
  AN2XD1 U4 ( .A1(n11), .A2(n8), .Z(n14) );
  IND2D1 U5 ( .A1(n16), .B1(n17), .ZN(n8) );
  OAI32D1 U6 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  INVD1 U8 ( .I(n15), .ZN(w2e) );
  ND2D1 U9 ( .A1(n16), .A2(n17), .ZN(n11) );
  NR2D1 U11 ( .A1(n7), .A2(n14), .ZN(w2s) );
  INVD1 U12 ( .I(n13), .ZN(n4) );
  OAI21D1 U13 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  NR2D1 U14 ( .A1(w_y[0]), .A2(w_y[1]), .ZN(n16) );
  OAI21D1 U15 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  INR2D1 U16 ( .A1(w_x[1]), .B1(w_x[0]), .ZN(n17) );
  IND2D1 U17 ( .A1(i_x[0]), .B1(i_x[1]), .ZN(n13) );
  ND2D1 U18 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U19 ( .I(n_v), .ZN(n1) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  OAI222D0 U22 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U23 ( .A1(n4), .A2(n10), .ZN(n6) );
  NR2D0 U24 ( .A1(n_y[0]), .A2(n_y[1]), .ZN(n9) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X2_Y0 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n47), .A2(n46), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X2_Y0 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n40), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n40), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n40), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n40), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n42), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n41), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n40), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n44), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n43), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n44), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n42), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n41), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n40), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n44), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n43), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n42), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n42), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n42), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n42), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n42), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n42), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n42), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n41), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n44), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n42), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n41), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n44), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n42), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n41), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n44), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n42), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n41), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n44), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n42), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n41), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n41), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n41), .D(n39), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n40), .D(n35), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n44), .D(n37), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n42), .D(n33), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n43), .D(n31), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n40), .D(n29), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n44), .D(n27), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n42), .D(n25), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n43), .D(n23), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n40), .D(n21), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n44), .D(n19), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n42), .D(n17), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n43), .D(n15), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n40), .D(n13), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n44), .D(n11), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n42), .D(n9), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n43), .D(n7), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n40), .D(n2), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n44), .D(s_msg[17]), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n42), .D(s_msg[16]), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n43), .D(s_msg[15]), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n40), .D(s_msg[14]), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n44), .D(s_msg[13]), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n42), .D(s_msg[12]), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n43), .D(s_msg[11]), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n40), .D(s_msg[10]), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n44), .D(s_msg[9]), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n42), .D(s_msg[8]), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n43), .D(s_msg[7]), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n40), .D(s_msg[6]), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n44), .D(s_msg[5]), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n42), .D(s_msg[4]), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n43), .D(s_msg[3]), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n40), .D(s_msg[2]), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n44), .D(s_msg[1]), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n43), .D(s_msg[0]), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n40), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n40), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n40), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n40), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n44), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n43), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n40), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n41), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n44), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n43), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n40), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n41), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n44), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n43), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n40), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n41), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n44), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n43), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n40), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n41), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n44), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n43), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n40), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n41), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n44), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n42), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n43), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n41), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n43), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n43), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n43), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n43), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n43), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n43), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n43), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n43), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n43), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n41), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n43), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n42), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n42), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n40), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n44), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n40), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n42), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n41), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n44), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n42), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n41), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n44), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n42), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n41), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n44), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n42), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n41), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n41), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n40), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n44), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n43), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n42), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n41), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n40), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n44), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n43), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n42), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n41), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n40), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n44), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n43), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n42), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n41), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n40), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n44), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n43), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n40), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n40), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n40), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[18]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[19]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[20]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[21]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[22]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[23]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[24]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[25]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[26]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[27]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[28]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[29]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[30]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[31]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[34]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[32]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[35]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[33]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  INVD1 U40 ( .I(dor_e_v), .ZN(n47) );
  low_swing_rx U41 ( .i(n43), .o(n42) );
  low_swing_rx U42 ( .i(n42), .o(n41) );
  low_swing_rx U43 ( .i(n44), .o(n40) );
  INVD1 U44 ( .I(n45), .ZN(n44) );
  low_swing_rx U45 ( .i(n44), .o(n43) );
  INVD1 U46 ( .I(dor_o_v), .ZN(n46) );
  INR4D0 U47 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U48 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U49 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U50 ( .i(rst), .o(n45) );
  TIEL U51 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_13 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X3_Y0_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_13 regulator ( .clk(clk), .rst(rst), .consume(n15), .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X3_Y0 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U7 ( .A1(i_y[1]), .A2(i_y[0]), .A3(n13), .Z(n10) );
  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  OR2D0 U3 ( .A1(n_y[0]), .A2(n_y[1]), .Z(n12) );
  AN2XD1 U4 ( .A1(n11), .A2(n8), .Z(n14) );
  OAI32D1 U5 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  IND2D1 U6 ( .A1(n16), .B1(n17), .ZN(n8) );
  INVD1 U8 ( .I(n15), .ZN(w2e) );
  NR2D1 U9 ( .A1(n7), .A2(n14), .ZN(w2s) );
  ND2D1 U11 ( .A1(n16), .A2(n17), .ZN(n11) );
  INVD1 U12 ( .I(n13), .ZN(n4) );
  OAI21D1 U13 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  NR2D1 U14 ( .A1(w_y[0]), .A2(w_y[1]), .ZN(n16) );
  OAI21D1 U15 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  AN2XD1 U16 ( .A1(w_x[1]), .A2(w_x[0]), .Z(n17) );
  ND2D1 U17 ( .A1(i_x[1]), .A2(i_x[0]), .ZN(n13) );
  ND2D1 U18 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U19 ( .I(n_v), .ZN(n1) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  OAI222D0 U22 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U23 ( .A1(n4), .A2(n10), .ZN(n6) );
  NR2D0 U24 ( .A1(n_y[0]), .A2(n_y[1]), .ZN(n9) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X3_Y0 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X3_Y0 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n77), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n76), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n80), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n79), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n80), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n77), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n76), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n79), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n78), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n78), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n78), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n78), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n78), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n78), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n77), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n80), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n78), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n77), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n80), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n78), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n77), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n80), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n78), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n77), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n80), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n78), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n77), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n77), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n75), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n69), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n71), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n73), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n67), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n65), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n63), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n61), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n59), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n57), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n55), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n53), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n51), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n49), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n47), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n45), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n43), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n41), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n39), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n37), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n35), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n33), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n31), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n29), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n27), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n25), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n23), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n21), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n19), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n17), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n15), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n13), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n11), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n9), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n7), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n2), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n80), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n79), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n76), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n77), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n80), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n79), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n76), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n77), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n80), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n79), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n76), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n77), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n80), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n79), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n76), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n77), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n80), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n79), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n76), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n77), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n80), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n79), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n77), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n79), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n76), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n77), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n76), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n77), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n76), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n77), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n76), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n77), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n76), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[0]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[1]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[2]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[3]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[4]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[5]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[6]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[7]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[8]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[9]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[10]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[11]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[12]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[13]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[14]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[15]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[16]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[17]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[18]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[19]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[20]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[21]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[22]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[23]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[24]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[25]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[26]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[27]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[28]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[29]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[30]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[31]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[32]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[35]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[34]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[33]), .ZN(n74) );
  INVD1 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_12 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X0_Y1_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_12 regulator ( .clk(clk), .rst(rst), .consume(n15), .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X0_Y1 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n12), .A2(n8), .Z(n14) );
  OAI32D1 U4 ( .A1(n3), .A2(w2e), .A3(n10), .B1(n4), .B2(n5), .ZN(i_ack) );
  INVD1 U5 ( .I(n10), .ZN(n4) );
  NR2D1 U6 ( .A1(n7), .A2(n14), .ZN(w2s) );
  IND2D1 U7 ( .A1(n16), .B1(n17), .ZN(n8) );
  ND2D1 U8 ( .A1(n16), .A2(n17), .ZN(n12) );
  INVD1 U9 ( .I(n15), .ZN(w2e) );
  OAI21D1 U11 ( .A1(n10), .A2(n3), .B(n15), .ZN(e_v) );
  INR2D1 U12 ( .A1(w_y[0]), .B1(w_y[1]), .ZN(n16) );
  NR2D1 U13 ( .A1(w_x[0]), .A2(w_x[1]), .ZN(n17) );
  OAI21D1 U14 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  NR2D1 U15 ( .A1(i_x[0]), .A2(i_x[1]), .ZN(n10) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  OAI222D0 U18 ( .A1(n7), .A2(n12), .B1(n1), .B2(n13), .C1(n5), .C2(n11), .ZN(
        o_v) );
  IND2D0 U19 ( .A1(n_y[1]), .B1(n_y[0]), .ZN(n13) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  INR2D0 U22 ( .A1(n_y[0]), .B1(n_y[1]), .ZN(n9) );
  ND2D1 U23 ( .A1(n10), .A2(n11), .ZN(n6) );
  IND3D1 U24 ( .A1(i_y[1]), .B1(n10), .B2(i_y[0]), .ZN(n11) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X0_Y1 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X0_Y1 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n77), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n76), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n80), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n79), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n80), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n77), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n76), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n79), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n78), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n78), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n78), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n78), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n78), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n78), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n77), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n80), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n78), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n77), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n80), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n78), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n77), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n80), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n78), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n77), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n80), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n78), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n77), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n77), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n69), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n73), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n75), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n71), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n67), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n65), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n63), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n61), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n59), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n57), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n55), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n53), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n51), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n49), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n47), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n45), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n43), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n41), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n39), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n37), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n35), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n33), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n31), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n29), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n27), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n25), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n23), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n21), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n19), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n17), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n15), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n13), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n11), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n9), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n7), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n2), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n80), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n79), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n76), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n77), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n80), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n79), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n76), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n77), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n80), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n79), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n76), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n77), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n80), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n79), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n76), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n77), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n80), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n79), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n76), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n77), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n80), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n79), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n77), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n79), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n76), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n77), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n76), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n77), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n76), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n77), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n76), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n77), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n76), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[0]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[1]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[2]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[3]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[4]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[5]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[6]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[7]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[8]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[9]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[10]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[11]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[12]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[13]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[14]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[15]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[16]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[17]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[18]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[19]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[20]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[21]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[22]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[23]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[24]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[25]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[26]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[27]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[28]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[29]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[30]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[31]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[33]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[34]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[32]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[35]), .ZN(n74) );
  CKND0 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_11 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X1_Y1_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_11 regulator ( .clk(clk), .rst(rst), .consume(n15), .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X1_Y1 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n11), .A2(n8), .Z(n14) );
  IND2D1 U4 ( .A1(n16), .B1(n17), .ZN(n8) );
  OAI32D1 U5 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  NR2D1 U6 ( .A1(n7), .A2(n14), .ZN(w2s) );
  ND2D1 U7 ( .A1(n16), .A2(n17), .ZN(n11) );
  INVD1 U8 ( .I(n15), .ZN(w2e) );
  INVD1 U9 ( .I(n13), .ZN(n4) );
  OAI21D1 U11 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  INR2D1 U12 ( .A1(w_y[0]), .B1(w_y[1]), .ZN(n16) );
  INR2D1 U13 ( .A1(w_x[0]), .B1(w_x[1]), .ZN(n17) );
  OAI21D1 U14 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  IND2D1 U15 ( .A1(i_x[1]), .B1(i_x[0]), .ZN(n13) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  OAI222D0 U18 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  IND2D0 U19 ( .A1(n_y[1]), .B1(n_y[0]), .ZN(n12) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U22 ( .A1(n4), .A2(n10), .ZN(n6) );
  INR2D0 U23 ( .A1(n_y[0]), .B1(n_y[1]), .ZN(n9) );
  IND3D1 U24 ( .A1(i_y[1]), .B1(n4), .B2(i_y[0]), .ZN(n10) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X1_Y1 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X1_Y1 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n77), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n76), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n80), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n79), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n80), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n77), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n76), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n79), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n78), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n78), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n78), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n78), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n78), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n78), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n77), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n80), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n78), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n77), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n80), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n78), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n77), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n80), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n78), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n77), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n80), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n78), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n77), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n77), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n75), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n71), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n69), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n73), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n67), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n65), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n63), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n61), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n59), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n57), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n55), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n53), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n51), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n49), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n47), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n45), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n43), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n41), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n39), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n37), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n35), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n33), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n31), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n29), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n27), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n25), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n23), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n21), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n19), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n17), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n15), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n13), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n11), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n9), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n7), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n2), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n80), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n79), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n76), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n77), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n80), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n79), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n76), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n77), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n80), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n79), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n76), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n77), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n80), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n79), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n76), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n77), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n80), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n79), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n76), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n77), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n80), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n79), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n77), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n79), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n76), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n77), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n76), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n77), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n76), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n77), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n76), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n77), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n76), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[0]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[1]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[2]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[3]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[4]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[5]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[6]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[7]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[8]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[9]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[10]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[11]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[12]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[13]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[14]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[15]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[16]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[17]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[18]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[19]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[20]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[21]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[22]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[23]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[24]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[25]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[26]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[27]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[28]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[29]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[30]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[31]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[35]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[32]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[34]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[33]), .ZN(n74) );
  INVD1 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_10 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X2_Y1_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_10 regulator ( .clk(clk), .rst(rst), .consume(n15), .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X2_Y1 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n11), .A2(n8), .Z(n14) );
  IND2D1 U4 ( .A1(n16), .B1(n17), .ZN(n8) );
  OAI32D1 U5 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  NR2D1 U6 ( .A1(n7), .A2(n14), .ZN(w2s) );
  ND2D1 U7 ( .A1(n16), .A2(n17), .ZN(n11) );
  INVD1 U8 ( .I(n15), .ZN(w2e) );
  INVD1 U9 ( .I(n13), .ZN(n4) );
  OAI21D1 U11 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  INR2D1 U12 ( .A1(w_y[0]), .B1(w_y[1]), .ZN(n16) );
  INR2D1 U13 ( .A1(w_x[1]), .B1(w_x[0]), .ZN(n17) );
  OAI21D1 U14 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  IND2D1 U15 ( .A1(i_x[0]), .B1(i_x[1]), .ZN(n13) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  OAI222D0 U18 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  IND2D0 U19 ( .A1(n_y[1]), .B1(n_y[0]), .ZN(n12) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U22 ( .A1(n4), .A2(n10), .ZN(n6) );
  INR2D0 U23 ( .A1(n_y[0]), .B1(n_y[1]), .ZN(n9) );
  IND3D1 U24 ( .A1(i_y[1]), .B1(n4), .B2(i_y[0]), .ZN(n10) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X2_Y1 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X2_Y1 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n77), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n76), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n80), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n79), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n80), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n77), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n76), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n79), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n78), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n78), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n78), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n78), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n78), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n78), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n77), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n80), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n78), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n77), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n80), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n78), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n77), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n80), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n78), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n77), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n80), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n78), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n77), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n77), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n69), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n73), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n75), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n71), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n67), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n65), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n63), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n61), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n59), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n57), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n55), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n53), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n51), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n49), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n47), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n45), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n43), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n41), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n39), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n37), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n35), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n33), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n31), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n29), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n27), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n25), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n23), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n21), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n19), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n17), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n15), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n13), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n11), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n9), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n7), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n2), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n80), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n79), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n76), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n77), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n80), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n79), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n76), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n77), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n80), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n79), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n76), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n77), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n80), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n79), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n76), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n77), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n80), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n79), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n76), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n77), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n80), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n79), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n77), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n79), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n76), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n77), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n76), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n77), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n76), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n77), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n76), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n77), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n76), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[0]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[1]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[2]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[3]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[4]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[5]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[6]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[7]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[8]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[9]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[10]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[11]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[12]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[13]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[14]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[15]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[16]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[17]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[18]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[19]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[20]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[21]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[22]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[23]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[24]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[25]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[26]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[27]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[28]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[29]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[30]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[31]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[33]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[34]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[32]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[35]), .ZN(n74) );
  CKND0 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_9 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X3_Y1_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_9 regulator ( .clk(clk), .rst(rst), .consume(n15), 
        .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X3_Y1 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n11), .A2(n8), .Z(n14) );
  OAI32D1 U4 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  NR2D1 U5 ( .A1(n7), .A2(n14), .ZN(w2s) );
  IND2D1 U6 ( .A1(n16), .B1(n17), .ZN(n8) );
  INVD1 U7 ( .I(n15), .ZN(w2e) );
  ND2D1 U8 ( .A1(n16), .A2(n17), .ZN(n11) );
  INVD1 U9 ( .I(n13), .ZN(n4) );
  OAI21D1 U11 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  INR2D1 U12 ( .A1(w_y[0]), .B1(w_y[1]), .ZN(n16) );
  OAI21D1 U13 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  AN2XD1 U14 ( .A1(w_x[1]), .A2(w_x[0]), .Z(n17) );
  ND2D1 U15 ( .A1(i_x[1]), .A2(i_x[0]), .ZN(n13) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  OAI222D0 U18 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  IND2D0 U19 ( .A1(n_y[1]), .B1(n_y[0]), .ZN(n12) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U22 ( .A1(n4), .A2(n10), .ZN(n6) );
  INR2D0 U23 ( .A1(n_y[0]), .B1(n_y[1]), .ZN(n9) );
  IND3D1 U24 ( .A1(i_y[1]), .B1(n4), .B2(i_y[0]), .ZN(n10) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X3_Y1 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X3_Y1 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n77), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n76), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n80), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n79), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n80), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n77), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n76), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n79), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n78), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n78), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n78), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n78), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n78), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n78), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n77), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n80), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n78), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n77), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n80), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n78), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n77), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n80), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n78), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n77), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n80), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n78), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n77), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n77), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n75), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n69), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n71), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n73), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n65), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n67), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n57), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n59), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n61), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n63), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n49), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n51), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n53), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n55), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n41), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n43), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n45), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n47), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n39), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n37), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n35), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n33), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n31), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n29), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n27), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n25), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n23), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n21), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n19), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n17), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n15), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n13), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n11), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n9), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n7), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n2), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n80), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n79), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n76), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n77), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n80), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n79), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n76), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n77), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n80), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n79), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n76), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n77), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n80), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n79), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n76), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n77), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n80), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n79), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n76), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n77), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n80), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n79), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n77), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n79), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n76), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n77), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n76), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n77), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n76), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n77), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n76), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n77), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n76), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[0]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[1]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[2]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[3]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[4]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[5]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[6]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[7]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[8]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[9]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[10]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[11]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[12]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[13]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[14]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[15]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[16]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[17]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[21]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[20]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[19]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[18]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[25]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[24]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[23]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[22]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[29]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[28]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[27]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[26]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[31]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[30]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[32]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[35]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[34]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[33]), .ZN(n74) );
  INVD1 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_8 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X0_Y2_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_8 regulator ( .clk(clk), .rst(rst), .consume(n15), 
        .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X0_Y2 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n12), .A2(n8), .Z(n14) );
  OAI32D1 U4 ( .A1(n3), .A2(w2e), .A3(n10), .B1(n4), .B2(n5), .ZN(i_ack) );
  INVD1 U5 ( .I(n10), .ZN(n4) );
  NR2D1 U6 ( .A1(n7), .A2(n14), .ZN(w2s) );
  IND2D1 U7 ( .A1(n16), .B1(n17), .ZN(n8) );
  ND2D1 U8 ( .A1(n16), .A2(n17), .ZN(n12) );
  INVD1 U9 ( .I(n15), .ZN(w2e) );
  OAI21D1 U11 ( .A1(n10), .A2(n3), .B(n15), .ZN(e_v) );
  INR2D1 U12 ( .A1(w_y[1]), .B1(w_y[0]), .ZN(n16) );
  NR2D1 U13 ( .A1(w_x[0]), .A2(w_x[1]), .ZN(n17) );
  OAI21D1 U14 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  NR2D1 U15 ( .A1(i_x[0]), .A2(i_x[1]), .ZN(n10) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  OAI222D0 U18 ( .A1(n7), .A2(n12), .B1(n1), .B2(n13), .C1(n5), .C2(n11), .ZN(
        o_v) );
  IND2D0 U19 ( .A1(n_y[0]), .B1(n_y[1]), .ZN(n13) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  INR2D0 U22 ( .A1(n_y[1]), .B1(n_y[0]), .ZN(n9) );
  ND2D1 U23 ( .A1(n10), .A2(n11), .ZN(n6) );
  IND3D1 U24 ( .A1(i_y[0]), .B1(n10), .B2(i_y[1]), .ZN(n11) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X0_Y2 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X0_Y2 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n77), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n76), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n80), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n79), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n80), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n77), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n76), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n79), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n78), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n78), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n78), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n78), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n78), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n78), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n77), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n80), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n78), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n77), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n80), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n78), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n77), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n80), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n78), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n77), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n80), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n78), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n77), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n77), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n73), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n69), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n75), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n71), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n65), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n67), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n57), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n59), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n61), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n63), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n49), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n51), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n53), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n55), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n41), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n43), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n45), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n47), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n33), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n35), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n37), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n39), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n25), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n27), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n29), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n31), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n17), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n19), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n21), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n23), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n9), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n11), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n13), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n15), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n2), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n7), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n80), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n79), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n76), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n77), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n80), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n79), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n76), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n77), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n80), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n79), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n76), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n77), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n80), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n79), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n76), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n77), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n80), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n79), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n76), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n77), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n80), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n79), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n77), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n79), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n76), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n77), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n76), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n77), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n76), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n77), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n76), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n77), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n76), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[1]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[0]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[5]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[4]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[3]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[2]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[9]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[8]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[7]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[6]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[13]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[12]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[11]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[10]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[17]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[16]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[15]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[14]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[21]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[20]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[19]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[18]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[25]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[24]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[23]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[22]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[29]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[28]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[27]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[26]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[31]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[30]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[32]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[34]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[33]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[35]), .ZN(n74) );
  CKND0 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_7 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X1_Y2_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_7 regulator ( .clk(clk), .rst(rst), .consume(n15), 
        .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X1_Y2 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n11), .A2(n8), .Z(n14) );
  IND2D1 U4 ( .A1(n16), .B1(n17), .ZN(n8) );
  OAI32D1 U5 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  NR2D1 U6 ( .A1(n7), .A2(n14), .ZN(w2s) );
  ND2D1 U7 ( .A1(n16), .A2(n17), .ZN(n11) );
  INVD1 U8 ( .I(n15), .ZN(w2e) );
  INVD1 U9 ( .I(n13), .ZN(n4) );
  OAI21D1 U11 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  INR2D1 U12 ( .A1(w_y[1]), .B1(w_y[0]), .ZN(n16) );
  INR2D1 U13 ( .A1(w_x[0]), .B1(w_x[1]), .ZN(n17) );
  OAI21D1 U14 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  IND2D1 U15 ( .A1(i_x[1]), .B1(i_x[0]), .ZN(n13) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  OAI222D0 U18 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  IND2D0 U19 ( .A1(n_y[0]), .B1(n_y[1]), .ZN(n12) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U22 ( .A1(n4), .A2(n10), .ZN(n6) );
  INR2D0 U23 ( .A1(n_y[1]), .B1(n_y[0]), .ZN(n9) );
  IND3D1 U24 ( .A1(i_y[0]), .B1(n4), .B2(i_y[1]), .ZN(n10) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X1_Y2 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X1_Y2 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n77), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n76), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n80), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n79), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n80), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n77), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n76), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n79), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n78), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n78), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n78), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n78), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n78), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n78), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n77), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n80), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n78), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n77), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n80), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n78), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n77), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n80), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n78), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n77), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n80), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n78), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n77), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n77), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n75), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n69), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n71), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n73), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n65), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n67), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n57), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n59), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n61), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n63), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n49), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n51), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n53), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n55), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n41), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n43), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n45), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n47), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n33), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n35), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n37), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n39), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n25), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n27), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n29), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n31), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n17), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n19), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n21), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n23), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n9), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n11), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n13), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n15), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n2), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n7), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n80), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n79), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n76), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n77), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n80), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n79), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n76), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n77), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n80), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n79), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n76), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n77), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n80), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n79), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n76), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n77), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n80), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n79), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n76), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n77), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n80), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n79), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n77), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n79), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n76), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n77), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n76), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n77), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n76), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n77), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n76), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n77), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n76), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[1]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[0]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[5]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[4]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[3]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[2]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[9]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[8]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[7]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[6]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[13]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[12]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[11]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[10]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[17]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[16]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[15]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[14]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[21]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[20]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[19]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[18]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[25]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[24]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[23]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[22]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[29]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[28]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[27]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[26]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[31]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[30]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[32]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[35]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[34]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[33]), .ZN(n74) );
  INVD1 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_6 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X2_Y2_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_6 regulator ( .clk(clk), .rst(rst), .consume(n15), 
        .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X2_Y2 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n11), .A2(n8), .Z(n14) );
  IND2D1 U4 ( .A1(n16), .B1(n17), .ZN(n8) );
  OAI32D1 U5 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  NR2D1 U6 ( .A1(n7), .A2(n14), .ZN(w2s) );
  ND2D1 U7 ( .A1(n16), .A2(n17), .ZN(n11) );
  INVD1 U8 ( .I(n15), .ZN(w2e) );
  INVD1 U9 ( .I(n13), .ZN(n4) );
  OAI21D1 U11 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  INR2D1 U12 ( .A1(w_y[1]), .B1(w_y[0]), .ZN(n16) );
  INR2D1 U13 ( .A1(w_x[1]), .B1(w_x[0]), .ZN(n17) );
  OAI21D1 U14 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  IND2D1 U15 ( .A1(i_x[0]), .B1(i_x[1]), .ZN(n13) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  OAI222D0 U18 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  IND2D0 U19 ( .A1(n_y[0]), .B1(n_y[1]), .ZN(n12) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U22 ( .A1(n4), .A2(n10), .ZN(n6) );
  INR2D0 U23 ( .A1(n_y[1]), .B1(n_y[0]), .ZN(n9) );
  IND3D1 U24 ( .A1(i_y[0]), .B1(n4), .B2(i_y[1]), .ZN(n10) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X2_Y2 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X2_Y2 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n77), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n76), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n80), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n79), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n80), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n77), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n76), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n79), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n78), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n78), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n78), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n78), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n78), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n78), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n77), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n80), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n78), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n77), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n80), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n78), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n77), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n80), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n78), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n77), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n80), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n78), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n77), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n77), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n73), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n69), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n75), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n71), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n65), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n67), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n57), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n59), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n61), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n63), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n49), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n51), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n53), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n55), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n41), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n43), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n45), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n47), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n33), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n35), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n37), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n39), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n25), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n27), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n29), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n31), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n17), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n19), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n21), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n23), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n9), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n11), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n13), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n15), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n2), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n7), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n80), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n79), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n76), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n77), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n80), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n79), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n76), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n77), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n80), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n79), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n76), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n77), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n80), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n79), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n76), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n77), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n80), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n79), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n76), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n77), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n80), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n79), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n77), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n79), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n76), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n77), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n76), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n77), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n76), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n77), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n76), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n77), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n76), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[1]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[0]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[5]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[4]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[3]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[2]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[9]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[8]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[7]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[6]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[13]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[12]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[11]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[10]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[17]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[16]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[15]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[14]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[21]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[20]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[19]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[18]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[25]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[24]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[23]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[22]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[29]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[28]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[27]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[26]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[31]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[30]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[32]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[34]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[33]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[35]), .ZN(n74) );
  CKND0 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_5 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X3_Y2_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_5 regulator ( .clk(clk), .rst(rst), .consume(n15), 
        .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X3_Y2 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n11), .A2(n8), .Z(n14) );
  OAI32D1 U4 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  NR2D1 U5 ( .A1(n7), .A2(n14), .ZN(w2s) );
  IND2D1 U6 ( .A1(n16), .B1(n17), .ZN(n8) );
  INVD1 U7 ( .I(n15), .ZN(w2e) );
  ND2D1 U8 ( .A1(n16), .A2(n17), .ZN(n11) );
  INVD1 U9 ( .I(n13), .ZN(n4) );
  OAI21D1 U11 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  INR2D1 U12 ( .A1(w_y[1]), .B1(w_y[0]), .ZN(n16) );
  OAI21D1 U13 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  AN2XD1 U14 ( .A1(w_x[1]), .A2(w_x[0]), .Z(n17) );
  ND2D1 U15 ( .A1(i_x[1]), .A2(i_x[0]), .ZN(n13) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  OAI222D0 U18 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  IND2D0 U19 ( .A1(n_y[0]), .B1(n_y[1]), .ZN(n12) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U22 ( .A1(n4), .A2(n10), .ZN(n6) );
  INR2D0 U23 ( .A1(n_y[1]), .B1(n_y[0]), .ZN(n9) );
  IND3D1 U24 ( .A1(i_y[0]), .B1(n4), .B2(i_y[1]), .ZN(n10) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X3_Y2 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X3_Y2 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n77), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n76), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n80), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n79), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n80), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n77), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n76), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n79), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n78), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n78), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n78), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n78), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n78), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n78), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n77), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n80), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n78), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n77), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n80), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n78), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n77), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n80), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n78), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n77), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n80), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n78), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n77), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n77), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n71), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n69), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n73), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n75), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n65), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n67), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n57), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n59), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n61), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n63), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n49), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n51), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n53), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n55), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n41), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n43), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n45), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n47), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n33), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n35), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n37), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n39), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n25), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n27), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n29), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n31), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n17), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n19), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n21), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n23), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n9), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n11), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n13), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n15), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n2), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n7), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n80), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n79), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n76), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n77), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n80), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n79), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n76), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n77), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n80), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n79), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n76), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n77), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n80), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n79), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n76), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n77), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n80), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n79), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n76), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n77), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n80), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n79), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n77), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n79), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n76), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n77), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n76), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n77), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n76), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n77), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n76), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n77), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n76), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[1]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[0]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[5]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[4]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[3]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[2]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[9]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[8]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[7]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[6]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[13]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[12]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[11]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[10]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[17]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[16]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[15]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[14]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[21]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[20]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[19]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[18]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[25]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[24]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[23]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[22]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[29]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[28]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[27]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[26]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[31]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[30]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[32]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[33]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[35]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[34]), .ZN(n74) );
  CKND0 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_4 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X0_Y3_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_4 regulator ( .clk(clk), .rst(rst), .consume(n15), 
        .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X0_Y3 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n12), .A2(n8), .Z(n14) );
  OAI32D1 U4 ( .A1(n3), .A2(w2e), .A3(n10), .B1(n4), .B2(n5), .ZN(i_ack) );
  INVD1 U5 ( .I(n10), .ZN(n4) );
  NR2D1 U6 ( .A1(n7), .A2(n14), .ZN(w2s) );
  ND2D1 U7 ( .A1(n16), .A2(n17), .ZN(n8) );
  IND2D1 U8 ( .A1(n17), .B1(n16), .ZN(n12) );
  INVD1 U9 ( .I(n15), .ZN(w2e) );
  OAI21D1 U11 ( .A1(n10), .A2(n3), .B(n15), .ZN(e_v) );
  NR2D1 U12 ( .A1(w_x[0]), .A2(w_x[1]), .ZN(n16) );
  ND2D1 U13 ( .A1(w_y[1]), .A2(w_y[0]), .ZN(n17) );
  OAI21D1 U14 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  NR2D1 U15 ( .A1(i_x[0]), .A2(i_x[1]), .ZN(n10) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  OAI222D0 U18 ( .A1(n7), .A2(n12), .B1(n1), .B2(n13), .C1(n5), .C2(n11), .ZN(
        o_v) );
  CKND2D0 U19 ( .A1(n_y[1]), .A2(n_y[0]), .ZN(n13) );
  INVD1 U20 ( .I(i_v), .ZN(n3) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U22 ( .A1(n10), .A2(n11), .ZN(n6) );
  CKAN2D0 U23 ( .A1(n_y[0]), .A2(n_y[1]), .Z(n9) );
  ND3D1 U24 ( .A1(i_y[0]), .A2(n10), .A3(i_y[1]), .ZN(n11) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X0_Y3 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X0_Y3 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n78), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n78), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n78), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n78), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n77), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n78), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n79), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n77), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n76), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n79), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n80), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n77), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n78), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n80), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n78), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n77), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n80), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n78), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n77), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n80), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n78), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n77), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n80), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n78), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n77), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n80), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n78), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n76), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n75), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n71), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n73), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n69), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n61), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n63), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n65), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n67), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n59), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n57), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n55), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n53), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n51), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n49), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n47), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n45), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n43), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n41), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n33), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n35), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n37), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n39), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n25), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n27), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n29), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n31), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n17), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n19), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n21), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n23), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n9), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n11), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n13), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n15), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n2), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n7), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n80), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n79), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n77), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n76), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n80), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n79), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n77), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n76), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n80), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n79), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n77), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n76), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n80), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n79), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n77), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n76), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n80), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n79), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n77), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n76), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n80), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n76), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n79), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n77), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n79), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n77), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n76), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n77), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n76), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n77), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n76), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n77), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n76), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n77), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[1]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[0]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[5]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[4]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[3]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[2]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[9]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[8]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[7]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[6]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[13]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[12]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[11]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[10]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[17]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[16]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[15]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[14]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[18]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[19]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[20]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[21]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[22]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[23]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[24]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[25]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[26]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[27]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[31]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[30]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[29]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[28]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[34]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[32]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[35]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[33]), .ZN(n74) );
  CKND0 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_3 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X1_Y3_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_3 regulator ( .clk(clk), .rst(rst), .consume(n15), 
        .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X1_Y3 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n11), .A2(n8), .Z(n14) );
  ND2D1 U4 ( .A1(n16), .A2(n17), .ZN(n8) );
  OAI32D1 U5 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  INVD1 U6 ( .I(n15), .ZN(w2e) );
  NR2D1 U7 ( .A1(n7), .A2(n14), .ZN(w2s) );
  IND2D1 U8 ( .A1(n17), .B1(n16), .ZN(n11) );
  INVD1 U9 ( .I(n13), .ZN(n4) );
  OAI21D1 U11 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  INR2D1 U12 ( .A1(w_x[0]), .B1(w_x[1]), .ZN(n16) );
  OAI21D1 U13 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  ND2D1 U14 ( .A1(w_y[1]), .A2(w_y[0]), .ZN(n17) );
  IND2D1 U15 ( .A1(i_x[1]), .B1(i_x[0]), .ZN(n13) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  INVD1 U18 ( .I(i_v), .ZN(n3) );
  OAI222D0 U19 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  CKND2D0 U20 ( .A1(n_y[1]), .A2(n_y[0]), .ZN(n12) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U22 ( .A1(n4), .A2(n10), .ZN(n6) );
  CKAN2D0 U23 ( .A1(n_y[0]), .A2(n_y[1]), .Z(n9) );
  ND3D1 U24 ( .A1(i_y[0]), .A2(n4), .A3(i_y[1]), .ZN(n10) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X1_Y3 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X1_Y3 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n78), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n78), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n78), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n78), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n77), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n78), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n79), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n76), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n77), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n79), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n80), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n76), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n77), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n78), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n80), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n77), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n78), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n80), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n77), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n78), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n80), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n77), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n78), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n80), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n77), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n78), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n80), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n79), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n75), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n73), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n69), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n71), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n61), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n63), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n65), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n67), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n53), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n55), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n57), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n59), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n45), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n47), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n49), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n51), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n37), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n39), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n41), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n43), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n29), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n31), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n33), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n35), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n21), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n23), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n25), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n27), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n13), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n15), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n17), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n19), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n2), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n7), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n9), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n11), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n77), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n80), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n79), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n76), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n77), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n80), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n79), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n76), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n77), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n80), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n79), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n76), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n77), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n80), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n79), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n76), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n77), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n80), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n79), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n76), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n77), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n80), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n79), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n77), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n76), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n77), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n76), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n77), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n76), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n77), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n76), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n77), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n76), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[3]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[2]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[1]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[0]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[7]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[6]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[5]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[4]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[11]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[10]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[9]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[8]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[15]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[14]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[13]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[12]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[19]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[18]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[17]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[16]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[23]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[22]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[21]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[20]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[27]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[26]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[25]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[24]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[31]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[30]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[29]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[28]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[35]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[34]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[32]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[33]), .ZN(n74) );
  CKND0 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_2 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X2_Y3_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_2 regulator ( .clk(clk), .rst(rst), .consume(n15), 
        .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X2_Y3 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n11), .A2(n8), .Z(n14) );
  ND2D1 U4 ( .A1(n16), .A2(n17), .ZN(n8) );
  OAI32D1 U5 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  INVD1 U6 ( .I(n15), .ZN(w2e) );
  NR2D1 U7 ( .A1(n7), .A2(n14), .ZN(w2s) );
  IND2D1 U8 ( .A1(n17), .B1(n16), .ZN(n11) );
  INVD1 U9 ( .I(n13), .ZN(n4) );
  OAI21D1 U11 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  INR2D1 U12 ( .A1(w_x[1]), .B1(w_x[0]), .ZN(n16) );
  OAI21D1 U13 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  ND2D1 U14 ( .A1(w_y[1]), .A2(w_y[0]), .ZN(n17) );
  IND2D1 U15 ( .A1(i_x[0]), .B1(i_x[1]), .ZN(n13) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  INVD1 U18 ( .I(i_v), .ZN(n3) );
  OAI222D0 U19 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  CKND2D0 U20 ( .A1(n_y[1]), .A2(n_y[0]), .ZN(n12) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U22 ( .A1(n4), .A2(n10), .ZN(n6) );
  CKAN2D0 U23 ( .A1(n_y[0]), .A2(n_y[1]), .Z(n9) );
  ND3D1 U24 ( .A1(i_y[0]), .A2(n4), .A3(i_y[1]), .ZN(n10) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X2_Y3 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n83), .A2(n82), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X2_Y3 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n78), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n78), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n78), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n78), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n78), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n78), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n78), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n78), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n79), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n80), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n76), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n77), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n79), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n80), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n76), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n77), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n80), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n77), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n78), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n80), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n77), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n78), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n80), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n77), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n78), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n80), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n77), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n78), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n80), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n77), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n79), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n77), .D(n75), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n73), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n80), .D(n71), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n78), .D(n69), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n79), .D(n61), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n76), .D(n63), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n80), .D(n65), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n78), .D(n67), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n79), .D(n53), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n76), .D(n55), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n80), .D(n57), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n59), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n79), .D(n45), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n47), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n80), .D(n49), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n78), .D(n51), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n79), .D(n37), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n76), .D(n39), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n80), .D(n41), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n78), .D(n43), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n79), .D(n29), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n76), .D(n31), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n80), .D(n33), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n35), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n79), .D(n21), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n23), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n80), .D(n25), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n78), .D(n27), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n79), .D(n13), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n76), .D(n15), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n80), .D(n17), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n78), .D(n19), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n79), .D(n2), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n76), .D(n7), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n80), .D(n9), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n79), .D(n11), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n77), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n80), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n79), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n76), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n77), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n80), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n79), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n76), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n77), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n80), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n79), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n76), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n77), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n80), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n79), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n76), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n77), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n80), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n79), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n76), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n77), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n80), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n79), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n77), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n79), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n79), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n79), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n79), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n79), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n77), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n79), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n78), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n78), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n80), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n76), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n78), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n77), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n80), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n78), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n80), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n78), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n77), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n80), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n78), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n77), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n76), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n80), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n78), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n77), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n76), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n80), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n78), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n77), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n76), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n80), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n78), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n77), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n76), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n80), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[3]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[2]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[1]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[0]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[7]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[6]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[5]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[4]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[11]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[10]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[9]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[8]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[15]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[14]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[13]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[12]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[19]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[18]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[17]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[16]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[23]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[22]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[21]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[20]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[27]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[26]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[25]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[24]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[31]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[30]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[29]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[28]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[34]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[35]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[32]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[33]), .ZN(n74) );
  CKND0 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n83) );
  low_swing_rx U77 ( .i(n79), .o(n78) );
  low_swing_rx U78 ( .i(n78), .o(n77) );
  low_swing_rx U79 ( .i(n80), .o(n76) );
  INVD1 U80 ( .I(n81), .ZN(n80) );
  low_swing_rx U81 ( .i(n80), .o(n79) );
  INVD1 U82 ( .I(dor_o_v), .ZN(n82) );
  INR4D0 U83 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U84 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U85 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U86 ( .i(rst), .o(n81) );
  TIEL U87 ( .ZN(\*Logic0* ) );
endmodule


module token_bucket_SIGMA3_RATE20_1 ( clk, rst, consume, token_available );
  input clk, rst, consume;
  output token_available;
  wire   N9, N10, N11, N12, N13, \add_31/carry[4] , \add_31/carry[3] ,
         \add_31/carry[2] , n1, n2, n3, n4, n5, n6, n7, n8, n9, n13, n16, n17,
         n18, n19, n20;
  wire   [4:0] rate_counter;
  wire   [1:0] number_tokens;

  AO211D1 U10 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(consume), .C(
        n13), .Z(n16) );
  HA1D0 \add_31/U1_1_1  ( .A(rate_counter[1]), .B(rate_counter[0]), .CO(
        \add_31/carry[2] ), .S(N10) );
  HA1D0 \add_31/U1_1_2  ( .A(rate_counter[2]), .B(\add_31/carry[2] ), .CO(
        \add_31/carry[3] ), .S(N11) );
  HA1D0 \add_31/U1_1_3  ( .A(rate_counter[3]), .B(\add_31/carry[3] ), .CO(
        \add_31/carry[4] ), .S(N12) );
  DFKCNQD1 \rate_counter_reg[4]  ( .CN(n9), .D(N13), .CP(clk), .Q(
        rate_counter[4]) );
  DFKCNQD1 \rate_counter_reg[3]  ( .CN(n9), .D(N12), .CP(clk), .Q(
        rate_counter[3]) );
  DFKCNQD1 \rate_counter_reg[1]  ( .CN(n9), .D(N10), .CP(clk), .Q(
        rate_counter[1]) );
  DFKCNQD1 \rate_counter_reg[2]  ( .CN(n9), .D(N11), .CP(clk), .Q(
        rate_counter[2]) );
  DFKCNQD1 \rate_counter_reg[0]  ( .CN(n9), .D(N9), .CP(clk), .Q(
        rate_counter[0]) );
  EDFD1 \number_tokens_reg[0]  ( .D(n1), .E(n18), .CP(clk), .Q(
        number_tokens[0]), .QN(n5) );
  DFD1 \number_tokens_reg[1]  ( .D(n7), .CP(clk), .Q(number_tokens[1]), .QN(n6) );
  NR2D1 U3 ( .A1(n4), .A2(n2), .ZN(n9) );
  low_swing_rx U4 ( .i(rst), .o(n2) );
  ND2D1 U5 ( .A1(n5), .A2(n6), .ZN(token_available) );
  INVD1 U6 ( .I(n13), .ZN(n4) );
  OR2D1 U7 ( .A1(n2), .A2(n5), .Z(n1) );
  IND3D1 U8 ( .A1(n2), .B1(n17), .B2(n16), .ZN(n18) );
  OAI211D1 U9 ( .A1(number_tokens[0]), .A2(number_tokens[1]), .B(n9), .C(
        consume), .ZN(n17) );
  OAI22D1 U11 ( .A1(n20), .A2(n6), .B1(n3), .B2(n19), .ZN(n7) );
  AOI21D1 U12 ( .A1(n4), .A2(number_tokens[0]), .B(n2), .ZN(n19) );
  NR3D0 U13 ( .A1(n3), .A2(number_tokens[0]), .A3(n4), .ZN(n20) );
  INVD1 U14 ( .I(n18), .ZN(n3) );
  ND4D1 U15 ( .A1(rate_counter[4]), .A2(rate_counter[1]), .A3(n8), .A4(
        rate_counter[0]), .ZN(n13) );
  NR2D1 U16 ( .A1(rate_counter[3]), .A2(rate_counter[2]), .ZN(n8) );
  INVD1 U17 ( .I(rate_counter[0]), .ZN(N9) );
  CKXOR2D0 U18 ( .A1(\add_31/carry[4] ), .A2(rate_counter[4]), .Z(N13) );
endmodule



    module client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X3_Y3_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 ( 
        clk, rst, i_ack, i_v, i_vc, i_x, i_y, i_data, done, o_v, o_x, o_y, 
        o_data );
  output [2:0] i_vc;
  output [1:0] i_x;
  output [1:0] i_y;
  output [31:0] i_data;
  input [1:0] o_x;
  input [1:0] o_y;
  input [31:0] o_data;
  input clk, rst, i_ack, o_v;
  output i_v, done;
  wire   \*Logic0* , token_avail, n13, n18, n21, n22, n25, n26, n27, n28, n29,
         n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57,
         n58, n59, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n14, n15,
         n16, n17;
  assign done = \*Logic0* ;

  token_bucket_SIGMA3_RATE20_1 regulator ( .clk(clk), .rst(rst), .consume(n15), 
        .token_available(token_avail) );
  DFQD1 \i_d_r_reg[31]  ( .D(n28), .CP(clk), .Q(i_data[31]) );
  DFQD1 \i_d_r_reg[30]  ( .D(n29), .CP(clk), .Q(i_data[30]) );
  DFQD1 \i_d_r_reg[29]  ( .D(n30), .CP(clk), .Q(i_data[29]) );
  DFQD1 \i_d_r_reg[28]  ( .D(n31), .CP(clk), .Q(i_data[28]) );
  DFQD1 \i_d_r_reg[27]  ( .D(n32), .CP(clk), .Q(i_data[27]) );
  DFQD1 \i_d_r_reg[26]  ( .D(n33), .CP(clk), .Q(i_data[26]) );
  DFQD1 \i_d_r_reg[25]  ( .D(n34), .CP(clk), .Q(i_data[25]) );
  DFQD1 \i_d_r_reg[24]  ( .D(n35), .CP(clk), .Q(i_data[24]) );
  DFQD1 \i_d_r_reg[23]  ( .D(n36), .CP(clk), .Q(i_data[23]) );
  DFQD1 \i_d_r_reg[22]  ( .D(n37), .CP(clk), .Q(i_data[22]) );
  DFQD1 \i_d_r_reg[21]  ( .D(n38), .CP(clk), .Q(i_data[21]) );
  DFQD1 \i_d_r_reg[20]  ( .D(n39), .CP(clk), .Q(i_data[20]) );
  DFQD1 \i_d_r_reg[19]  ( .D(n40), .CP(clk), .Q(i_data[19]) );
  DFQD1 \i_d_r_reg[18]  ( .D(n41), .CP(clk), .Q(i_data[18]) );
  DFQD1 \i_d_r_reg[17]  ( .D(n42), .CP(clk), .Q(i_data[17]) );
  DFQD1 \i_d_r_reg[16]  ( .D(n43), .CP(clk), .Q(i_data[16]) );
  DFQD1 \i_d_r_reg[15]  ( .D(n44), .CP(clk), .Q(i_data[15]) );
  DFQD1 \i_d_r_reg[14]  ( .D(n45), .CP(clk), .Q(i_data[14]) );
  DFQD1 \i_d_r_reg[13]  ( .D(n46), .CP(clk), .Q(i_data[13]) );
  DFQD1 \i_d_r_reg[12]  ( .D(n47), .CP(clk), .Q(i_data[12]) );
  DFQD1 \i_d_r_reg[11]  ( .D(n48), .CP(clk), .Q(i_data[11]) );
  DFQD1 \i_d_r_reg[10]  ( .D(n49), .CP(clk), .Q(i_data[10]) );
  DFQD1 \i_d_r_reg[9]  ( .D(n50), .CP(clk), .Q(i_data[9]) );
  DFQD1 \i_d_r_reg[8]  ( .D(n51), .CP(clk), .Q(i_data[8]) );
  DFQD1 \i_d_r_reg[7]  ( .D(n52), .CP(clk), .Q(i_data[7]) );
  DFQD1 \i_d_r_reg[6]  ( .D(n53), .CP(clk), .Q(i_data[6]) );
  DFQD1 \i_d_r_reg[5]  ( .D(n54), .CP(clk), .Q(i_data[5]) );
  DFQD1 \i_d_r_reg[4]  ( .D(n55), .CP(clk), .Q(i_data[4]) );
  DFQD1 \i_d_r_reg[3]  ( .D(n56), .CP(clk), .Q(i_data[3]) );
  DFQD1 \i_d_r_reg[2]  ( .D(n57), .CP(clk), .Q(i_data[2]) );
  DFQD1 \i_d_r_reg[1]  ( .D(n58), .CP(clk), .Q(i_data[1]) );
  DFQD1 \i_d_r_reg[0]  ( .D(n59), .CP(clk), .Q(i_data[0]) );
  EDFKCNQD1 \i_x_r_reg[1]  ( .CN(n3), .D(n17), .E(n25), .CP(clk), .Q(i_x[1])
         );
  EDFKCNQD1 \i_x_r_reg[0]  ( .CN(n3), .D(n18), .E(n25), .CP(clk), .Q(i_x[0])
         );
  EDFKCNQD1 \i_y_r_reg[0]  ( .CN(n3), .D(n16), .E(n25), .CP(clk), .Q(i_y[0])
         );
  EDFKCNQD1 \i_y_r_reg[1]  ( .CN(n3), .D(n14), .E(n25), .CP(clk), .Q(i_y[1])
         );
  DFQD1 \i_vc_r_reg[2]  ( .D(n27), .CP(clk), .Q(i_vc[2]) );
  DFQD1 \i_vc_r_reg[1]  ( .D(n26), .CP(clk), .Q(i_vc[1]) );
  DFKCSND1 waiting_for_ack_reg ( .D(token_avail), .SN(n25), .CN(n3), .CP(clk), 
        .Q(i_v) );
  EDFKCNQD1 \i_vc_r_reg[0]  ( .CN(n3), .D(n21), .E(n25), .CP(clk), .Q(i_vc[0])
         );
  INVD1 U3 ( .I(n7), .ZN(n15) );
  INVD1 U4 ( .I(n5), .ZN(n12) );
  IND2D1 U5 ( .A1(n4), .B1(token_avail), .ZN(n7) );
  NR2D1 U6 ( .A1(rst), .A2(n12), .ZN(n1) );
  INVD1 U7 ( .I(n25), .ZN(n4) );
  NR2D1 U8 ( .A1(n9), .A2(n5), .ZN(n2) );
  OAI21D1 U9 ( .A1(n15), .A2(n21), .B(n12), .ZN(n22) );
  NR2D1 U10 ( .A1(n25), .A2(rst), .ZN(n13) );
  IND2D1 U11 ( .A1(i_ack), .B1(i_v), .ZN(n25) );
  INVD1 U12 ( .I(o_y[0]), .ZN(n6) );
  CKXOR2D1 U13 ( .A1(n15), .A2(o_data[0]), .Z(n21) );
  AO22D0 U14 ( .A1(i_data[0]), .A2(n1), .B1(o_data[0]), .B2(n2), .Z(n59) );
  AO22D0 U15 ( .A1(i_data[1]), .A2(n1), .B1(o_data[1]), .B2(n2), .Z(n58) );
  AO22D0 U16 ( .A1(i_data[2]), .A2(n1), .B1(o_data[2]), .B2(n2), .Z(n57) );
  AO22D0 U17 ( .A1(i_data[3]), .A2(n1), .B1(o_data[3]), .B2(n2), .Z(n56) );
  AO22D0 U18 ( .A1(i_data[4]), .A2(n1), .B1(o_data[4]), .B2(n2), .Z(n55) );
  AO22D0 U19 ( .A1(i_data[5]), .A2(n1), .B1(o_data[5]), .B2(n2), .Z(n54) );
  AO22D0 U20 ( .A1(i_data[6]), .A2(n1), .B1(o_data[6]), .B2(n2), .Z(n53) );
  AO22D0 U21 ( .A1(i_data[7]), .A2(n1), .B1(o_data[7]), .B2(n2), .Z(n52) );
  AO22D0 U22 ( .A1(i_data[8]), .A2(n1), .B1(o_data[8]), .B2(n2), .Z(n51) );
  AO22D0 U23 ( .A1(i_data[9]), .A2(n1), .B1(o_data[9]), .B2(n2), .Z(n50) );
  AO22D0 U24 ( .A1(i_data[10]), .A2(n1), .B1(o_data[10]), .B2(n2), .Z(n49) );
  AO22D0 U25 ( .A1(i_data[11]), .A2(n1), .B1(o_data[11]), .B2(n2), .Z(n48) );
  AO22D0 U26 ( .A1(i_data[12]), .A2(n1), .B1(o_data[12]), .B2(n2), .Z(n47) );
  AO22D0 U27 ( .A1(i_data[13]), .A2(n1), .B1(o_data[13]), .B2(n2), .Z(n46) );
  AO22D0 U28 ( .A1(i_data[14]), .A2(n1), .B1(o_data[14]), .B2(n2), .Z(n45) );
  AO22D0 U29 ( .A1(i_data[15]), .A2(n1), .B1(o_data[15]), .B2(n2), .Z(n44) );
  AO22D0 U30 ( .A1(i_data[16]), .A2(n1), .B1(o_data[16]), .B2(n2), .Z(n43) );
  AO22D0 U31 ( .A1(i_data[17]), .A2(n1), .B1(o_data[17]), .B2(n2), .Z(n42) );
  AO22D0 U32 ( .A1(i_data[18]), .A2(n1), .B1(o_data[18]), .B2(n2), .Z(n41) );
  AO22D0 U33 ( .A1(i_data[19]), .A2(n1), .B1(o_data[19]), .B2(n2), .Z(n40) );
  AO22D0 U34 ( .A1(i_data[20]), .A2(n1), .B1(o_data[20]), .B2(n2), .Z(n39) );
  AO22D0 U35 ( .A1(i_data[21]), .A2(n1), .B1(o_data[21]), .B2(n2), .Z(n38) );
  AO22D0 U36 ( .A1(i_data[22]), .A2(n1), .B1(o_data[22]), .B2(n2), .Z(n37) );
  AO22D0 U37 ( .A1(i_data[23]), .A2(n1), .B1(o_data[23]), .B2(n2), .Z(n36) );
  AO22D0 U38 ( .A1(i_data[24]), .A2(n1), .B1(o_data[24]), .B2(n2), .Z(n35) );
  AO22D0 U39 ( .A1(i_data[25]), .A2(n1), .B1(o_data[25]), .B2(n2), .Z(n34) );
  AO22D0 U40 ( .A1(i_data[26]), .A2(n1), .B1(o_data[26]), .B2(n2), .Z(n33) );
  AO22D0 U41 ( .A1(i_data[27]), .A2(n1), .B1(o_data[27]), .B2(n2), .Z(n32) );
  AO22D0 U42 ( .A1(i_data[28]), .A2(n1), .B1(o_data[28]), .B2(n2), .Z(n31) );
  AO22D0 U43 ( .A1(i_data[29]), .A2(n1), .B1(o_data[29]), .B2(n2), .Z(n30) );
  AO22D0 U44 ( .A1(i_data[30]), .A2(n1), .B1(o_data[30]), .B2(n2), .Z(n29) );
  AO22D0 U45 ( .A1(i_data[31]), .A2(n1), .B1(o_data[31]), .B2(n2), .Z(n28) );
  IOA21D1 U46 ( .A1(i_vc[1]), .A2(n13), .B(n22), .ZN(n26) );
  IOA21D1 U47 ( .A1(i_vc[2]), .A2(n13), .B(n22), .ZN(n27) );
  INVD1 U48 ( .I(i_ack), .ZN(n10) );
  INVD1 U49 ( .I(o_v), .ZN(n9) );
  INVD1 U50 ( .I(rst), .ZN(n3) );
  TIEL U51 ( .ZN(\*Logic0* ) );
  OR2D1 U52 ( .A1(rst), .A2(n4), .Z(n5) );
  XOR2D1 U53 ( .A1(o_y[0]), .A2(n15), .Z(n16) );
  OR2D1 U54 ( .A1(n7), .A2(n6), .Z(n8) );
  XNR2D0 U55 ( .A1(o_y[1]), .A2(n8), .ZN(n14) );
  XOR3D1 U56 ( .A1(o_v), .A2(i_ack), .A3(o_x[0]), .Z(n18) );
  OR2D1 U57 ( .A1(n10), .A2(n9), .Z(n11) );
  XNR2D0 U58 ( .A1(o_x[1]), .A2(n11), .ZN(n17) );
endmodule


module dor_X_W2_Y_W2_X3_Y3 ( n_x, n_y, n_v, w_x, w_y, w_v, i_x, i_y, i_v, e_v, 
        s_v, o_v, n2s, w2s, w2e, i_ack );
  input [1:0] n_x;
  input [1:0] n_y;
  input [1:0] w_x;
  input [1:0] w_y;
  input [1:0] i_x;
  input [1:0] i_y;
  input n_v, w_v, i_v;
  output e_v, s_v, o_v, n2s, w2s, w2e, i_ack;
  wire   n_v, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n1,
         n3, n4;
  assign n2s = n_v;

  OR3D1 U10 ( .A1(w2s), .A2(n_v), .A3(n3), .Z(n5) );
  AN2XD1 U3 ( .A1(n11), .A2(n8), .Z(n14) );
  OAI32D1 U4 ( .A1(n3), .A2(w2e), .A3(n4), .B1(n13), .B2(n5), .ZN(i_ack) );
  ND2D1 U5 ( .A1(n16), .A2(n17), .ZN(n8) );
  INVD1 U6 ( .I(n15), .ZN(w2e) );
  IND2D1 U7 ( .A1(n17), .B1(n16), .ZN(n11) );
  NR2D1 U8 ( .A1(n7), .A2(n14), .ZN(w2s) );
  INVD1 U9 ( .I(n13), .ZN(n4) );
  OAI21D1 U11 ( .A1(n4), .A2(n3), .B(n15), .ZN(e_v) );
  OAI21D1 U12 ( .A1(n_v), .A2(n14), .B(w_v), .ZN(n15) );
  AN2XD1 U13 ( .A1(w_x[1]), .A2(w_x[0]), .Z(n16) );
  ND2D1 U14 ( .A1(w_y[1]), .A2(w_y[0]), .ZN(n17) );
  ND2D1 U15 ( .A1(i_x[1]), .A2(i_x[0]), .ZN(n13) );
  ND2D1 U16 ( .A1(w_v), .A2(n1), .ZN(n7) );
  INVD1 U17 ( .I(n_v), .ZN(n1) );
  INVD1 U18 ( .I(i_v), .ZN(n3) );
  OAI222D0 U19 ( .A1(n7), .A2(n11), .B1(n1), .B2(n12), .C1(n5), .C2(n10), .ZN(
        o_v) );
  CKND2D0 U20 ( .A1(n_y[1]), .A2(n_y[0]), .ZN(n12) );
  OAI222D0 U21 ( .A1(n5), .A2(n6), .B1(n7), .B2(n8), .C1(n9), .C2(n1), .ZN(s_v) );
  ND2D1 U22 ( .A1(n4), .A2(n10), .ZN(n6) );
  CKAN2D0 U23 ( .A1(n_y[0]), .A2(n_y[1]), .Z(n9) );
  ND3D1 U24 ( .A1(i_y[0]), .A2(n4), .A3(i_y[1]), .ZN(n10) );
endmodule


module torus_switch_X_W2_Y_W2_D_W32_X3_Y3 ( clk, rst, n_in_v, n_in_x, n_in_y, 
        n_in_data, w_in_v, w_in_x, w_in_y, w_in_data, i_v, i_x, i_y, i_data, 
        i_ack, o_v, s_out_v, s_out_x, s_out_y, s_out_data, e_out_v, e_out_x, 
        e_out_y, e_out_data, done );
  input [1:0] n_in_x;
  input [1:0] n_in_y;
  input [31:0] n_in_data;
  input [1:0] w_in_x;
  input [1:0] w_in_y;
  input [31:0] w_in_data;
  input [1:0] i_x;
  input [1:0] i_y;
  input [31:0] i_data;
  output [1:0] s_out_x;
  output [1:0] s_out_y;
  output [31:0] s_out_data;
  output [1:0] e_out_x;
  output [1:0] e_out_y;
  output [31:0] e_out_data;
  input clk, rst, n_in_v, w_in_v, i_v;
  output i_ack, o_v, s_out_v, e_out_v, done;
  wire   \*Logic0* , n_in_v_reg, w_in_v_reg, dor_e_v, dor_s_v, dor_o_v,
         dor_n2s, dor_w2s, dor_w2e, n4, n5, n6, n1, n2, n3, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52,
         n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82;
  wire   [1:0] n_in_x_reg;
  wire   [1:0] w_in_x_reg;
  wire   [1:0] n_in_y_reg;
  wire   [1:0] w_in_y_reg;
  wire   [31:0] n_in_data_reg;
  wire   [31:0] w_in_data_reg;
  tri   [35:0] s_msg;
  tri   [35:0] e_msg;

  torus_xbar_1b \xbar_gen[0].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[0]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[0]), .eo(e_msg[0]), .so(s_msg[0]) );
  torus_xbar_1b \xbar_gen[1].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[1]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[1]), .eo(e_msg[1]), .so(s_msg[1]) );
  torus_xbar_1b \xbar_gen[2].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[2]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[2]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[2]), .eo(e_msg[2]), .so(s_msg[2]) );
  torus_xbar_1b \xbar_gen[3].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[3]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[3]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[3]), .eo(e_msg[3]), .so(s_msg[3]) );
  torus_xbar_1b \xbar_gen[4].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[4]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[4]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[4]), .eo(e_msg[4]), .so(s_msg[4]) );
  torus_xbar_1b \xbar_gen[5].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[5]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[5]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[5]), .eo(e_msg[5]), .so(s_msg[5]) );
  torus_xbar_1b \xbar_gen[6].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[6]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[6]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[6]), .eo(e_msg[6]), .so(s_msg[6]) );
  torus_xbar_1b \xbar_gen[7].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[7]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[7]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[7]), .eo(e_msg[7]), .so(s_msg[7]) );
  torus_xbar_1b \xbar_gen[8].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[8]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[8]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[8]), .eo(e_msg[8]), .so(s_msg[8]) );
  torus_xbar_1b \xbar_gen[9].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_data_reg[9]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[9]), .w2e(dor_w2e), 
        .w2s(dor_w2s), .wi(w_in_data_reg[9]), .eo(e_msg[9]), .so(s_msg[9]) );
  torus_xbar_1b \xbar_gen[10].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[10]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[10]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[10]), .eo(e_msg[10]), .so(
        s_msg[10]) );
  torus_xbar_1b \xbar_gen[11].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[11]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[11]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[11]), .eo(e_msg[11]), .so(
        s_msg[11]) );
  torus_xbar_1b \xbar_gen[12].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[12]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[12]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[12]), .eo(e_msg[12]), .so(
        s_msg[12]) );
  torus_xbar_1b \xbar_gen[13].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[13]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[13]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[13]), .eo(e_msg[13]), .so(
        s_msg[13]) );
  torus_xbar_1b \xbar_gen[14].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[14]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[14]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[14]), .eo(e_msg[14]), .so(
        s_msg[14]) );
  torus_xbar_1b \xbar_gen[15].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[15]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[15]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[15]), .eo(e_msg[15]), .so(
        s_msg[15]) );
  torus_xbar_1b \xbar_gen[16].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[16]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[16]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[16]), .eo(e_msg[16]), .so(
        s_msg[16]) );
  torus_xbar_1b \xbar_gen[17].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[17]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[17]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[17]), .eo(e_msg[17]), .so(
        s_msg[17]) );
  torus_xbar_1b \xbar_gen[18].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[18]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[18]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[18]), .eo(e_msg[18]), .so(
        s_msg[18]) );
  torus_xbar_1b \xbar_gen[19].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[19]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[19]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[19]), .eo(e_msg[19]), .so(
        s_msg[19]) );
  torus_xbar_1b \xbar_gen[20].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[20]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[20]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[20]), .eo(e_msg[20]), .so(
        s_msg[20]) );
  torus_xbar_1b \xbar_gen[21].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[21]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[21]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[21]), .eo(e_msg[21]), .so(
        s_msg[21]) );
  torus_xbar_1b \xbar_gen[22].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[22]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[22]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[22]), .eo(e_msg[22]), .so(
        s_msg[22]) );
  torus_xbar_1b \xbar_gen[23].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[23]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[23]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[23]), .eo(e_msg[23]), .so(
        s_msg[23]) );
  torus_xbar_1b \xbar_gen[24].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[24]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[24]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[24]), .eo(e_msg[24]), .so(
        s_msg[24]) );
  torus_xbar_1b \xbar_gen[25].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[25]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[25]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[25]), .eo(e_msg[25]), .so(
        s_msg[25]) );
  torus_xbar_1b \xbar_gen[26].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[26]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[26]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[26]), .eo(e_msg[26]), .so(
        s_msg[26]) );
  torus_xbar_1b \xbar_gen[27].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[27]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[27]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[27]), .eo(e_msg[27]), .so(
        s_msg[27]) );
  torus_xbar_1b \xbar_gen[28].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[28]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[28]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[28]), .eo(e_msg[28]), .so(
        s_msg[28]) );
  torus_xbar_1b \xbar_gen[29].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[29]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[29]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[29]), .eo(e_msg[29]), .so(
        s_msg[29]) );
  torus_xbar_1b \xbar_gen[30].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[30]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[30]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[30]), .eo(e_msg[30]), .so(
        s_msg[30]) );
  torus_xbar_1b \xbar_gen[31].xbar_inst  ( .n2s(dor_n2s), .ni(
        n_in_data_reg[31]), .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_data[31]), .w2e(dor_w2e), .w2s(dor_w2s), .wi(w_in_data_reg[31]), .eo(e_msg[31]), .so(
        s_msg[31]) );
  torus_xbar_1b \xbar_gen[32].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[0]), .eo(e_msg[32]), .so(s_msg[32]) );
  torus_xbar_1b \xbar_gen[33].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_y_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_y[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_y_reg[1]), .eo(e_msg[33]), .so(s_msg[33]) );
  torus_xbar_1b \xbar_gen[34].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[0]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[0]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[0]), .eo(e_msg[34]), .so(s_msg[34]) );
  torus_xbar_1b \xbar_gen[35].xbar_inst  ( .n2s(dor_n2s), .ni(n_in_x_reg[1]), 
        .p2e(\*Logic0* ), .p2s(\*Logic0* ), .pi(i_x[1]), .w2e(dor_w2e), .w2s(
        dor_w2s), .wi(w_in_x_reg[1]), .eo(e_msg[35]), .so(s_msg[35]) );
  AN4XD1 U4 ( .A1(n82), .A2(n81), .A3(n4), .A4(n5), .Z(done) );
  dor_X_W2_Y_W2_X3_Y3 dor_inst ( .n_x(n_in_x_reg), .n_y(n_in_y_reg), .n_v(
        n_in_v_reg), .w_x(w_in_x_reg), .w_y(w_in_y_reg), .w_v(w_in_v_reg), 
        .i_x(i_x), .i_y(i_y), .i_v(i_v), .e_v(dor_e_v), .s_v(dor_s_v), .o_v(
        dor_o_v), .n2s(dor_n2s), .w2s(dor_w2s), .w2e(dor_w2e), .i_ack(i_ack)
         );
  DFKCNQD1 \w_in_y_reg_reg[1]  ( .CN(n76), .D(w_in_y[1]), .CP(clk), .Q(
        w_in_y_reg[1]) );
  DFKCNQD1 \w_in_y_reg_reg[0]  ( .CN(n76), .D(w_in_y[0]), .CP(clk), .Q(
        w_in_y_reg[0]) );
  DFKCNQD1 \w_in_x_reg_reg[1]  ( .CN(n76), .D(w_in_x[1]), .CP(clk), .Q(
        w_in_x_reg[1]) );
  DFKCNQD1 \w_in_x_reg_reg[0]  ( .CN(n76), .D(w_in_x[0]), .CP(clk), .Q(
        w_in_x_reg[0]) );
  DFKCNQD1 \w_in_data_reg_reg[31]  ( .CN(n79), .D(w_in_data[31]), .CP(clk), 
        .Q(w_in_data_reg[31]) );
  DFKCNQD1 \w_in_data_reg_reg[30]  ( .CN(n79), .D(w_in_data[30]), .CP(clk), 
        .Q(w_in_data_reg[30]) );
  DFKCNQD1 \w_in_data_reg_reg[29]  ( .CN(n79), .D(w_in_data[29]), .CP(clk), 
        .Q(w_in_data_reg[29]) );
  DFKCNQD1 \w_in_data_reg_reg[28]  ( .CN(n79), .D(w_in_data[28]), .CP(clk), 
        .Q(w_in_data_reg[28]) );
  DFKCNQD1 \w_in_data_reg_reg[27]  ( .CN(n79), .D(w_in_data[27]), .CP(clk), 
        .Q(w_in_data_reg[27]) );
  DFKCNQD1 \w_in_data_reg_reg[26]  ( .CN(n79), .D(w_in_data[26]), .CP(clk), 
        .Q(w_in_data_reg[26]) );
  DFKCNQD1 \w_in_data_reg_reg[25]  ( .CN(n79), .D(w_in_data[25]), .CP(clk), 
        .Q(w_in_data_reg[25]) );
  DFKCNQD1 \w_in_data_reg_reg[24]  ( .CN(n79), .D(w_in_data[24]), .CP(clk), 
        .Q(w_in_data_reg[24]) );
  DFKCNQD1 \w_in_data_reg_reg[23]  ( .CN(n79), .D(w_in_data[23]), .CP(clk), 
        .Q(w_in_data_reg[23]) );
  DFKCNQD1 \w_in_data_reg_reg[22]  ( .CN(n79), .D(w_in_data[22]), .CP(clk), 
        .Q(w_in_data_reg[22]) );
  DFKCNQD1 \w_in_data_reg_reg[21]  ( .CN(n79), .D(w_in_data[21]), .CP(clk), 
        .Q(w_in_data_reg[21]) );
  DFKCNQD1 \w_in_data_reg_reg[20]  ( .CN(n78), .D(w_in_data[20]), .CP(clk), 
        .Q(w_in_data_reg[20]) );
  DFKCNQD1 \w_in_data_reg_reg[19]  ( .CN(n78), .D(w_in_data[19]), .CP(clk), 
        .Q(w_in_data_reg[19]) );
  DFKCNQD1 \w_in_data_reg_reg[18]  ( .CN(n79), .D(w_in_data[18]), .CP(clk), 
        .Q(w_in_data_reg[18]) );
  DFKCNQD1 \w_in_data_reg_reg[17]  ( .CN(n79), .D(w_in_data[17]), .CP(clk), 
        .Q(w_in_data_reg[17]) );
  DFKCNQD1 \w_in_data_reg_reg[16]  ( .CN(n79), .D(w_in_data[16]), .CP(clk), 
        .Q(w_in_data_reg[16]) );
  DFKCNQD1 \w_in_data_reg_reg[15]  ( .CN(n79), .D(w_in_data[15]), .CP(clk), 
        .Q(w_in_data_reg[15]) );
  DFKCNQD1 \w_in_data_reg_reg[14]  ( .CN(n77), .D(w_in_data[14]), .CP(clk), 
        .Q(w_in_data_reg[14]) );
  DFKCNQD1 \w_in_data_reg_reg[13]  ( .CN(n77), .D(w_in_data[13]), .CP(clk), 
        .Q(w_in_data_reg[13]) );
  DFKCNQD1 \w_in_data_reg_reg[12]  ( .CN(n77), .D(w_in_data[12]), .CP(clk), 
        .Q(w_in_data_reg[12]) );
  DFKCNQD1 \w_in_data_reg_reg[11]  ( .CN(n77), .D(w_in_data[11]), .CP(clk), 
        .Q(w_in_data_reg[11]) );
  DFKCNQD1 \w_in_data_reg_reg[10]  ( .CN(n77), .D(w_in_data[10]), .CP(clk), 
        .Q(w_in_data_reg[10]) );
  DFKCNQD1 \w_in_data_reg_reg[9]  ( .CN(n77), .D(w_in_data[9]), .CP(clk), .Q(
        w_in_data_reg[9]) );
  DFKCNQD1 \w_in_data_reg_reg[8]  ( .CN(n77), .D(w_in_data[8]), .CP(clk), .Q(
        w_in_data_reg[8]) );
  DFKCNQD1 \w_in_data_reg_reg[7]  ( .CN(n77), .D(w_in_data[7]), .CP(clk), .Q(
        w_in_data_reg[7]) );
  DFKCNQD1 \w_in_data_reg_reg[6]  ( .CN(n76), .D(w_in_data[6]), .CP(clk), .Q(
        w_in_data_reg[6]) );
  DFKCNQD1 \w_in_data_reg_reg[5]  ( .CN(n77), .D(w_in_data[5]), .CP(clk), .Q(
        w_in_data_reg[5]) );
  DFKCNQD1 \w_in_data_reg_reg[4]  ( .CN(n76), .D(w_in_data[4]), .CP(clk), .Q(
        w_in_data_reg[4]) );
  DFKCNQD1 \w_in_data_reg_reg[3]  ( .CN(n77), .D(w_in_data[3]), .CP(clk), .Q(
        w_in_data_reg[3]) );
  DFKCNQD1 \w_in_data_reg_reg[2]  ( .CN(n79), .D(w_in_data[2]), .CP(clk), .Q(
        w_in_data_reg[2]) );
  DFKCNQD1 \w_in_data_reg_reg[1]  ( .CN(n79), .D(w_in_data[1]), .CP(clk), .Q(
        w_in_data_reg[1]) );
  DFKCNQD1 \w_in_data_reg_reg[0]  ( .CN(n79), .D(w_in_data[0]), .CP(clk), .Q(
        w_in_data_reg[0]) );
  DFKCNQD1 \s_out_y_reg_reg[1]  ( .CN(n78), .D(n75), .CP(clk), .Q(s_out_y[1])
         );
  DFKCNQD1 \s_out_y_reg_reg[0]  ( .CN(n76), .D(n71), .CP(clk), .Q(s_out_y[0])
         );
  DFKCNQD1 \s_out_x_reg_reg[1]  ( .CN(n77), .D(n69), .CP(clk), .Q(s_out_x[1])
         );
  DFKCNQD1 \s_out_x_reg_reg[0]  ( .CN(n76), .D(n73), .CP(clk), .Q(s_out_x[0])
         );
  DFKCNQD1 \s_out_data_reg_reg[31]  ( .CN(n76), .D(n61), .CP(clk), .Q(
        s_out_data[31]) );
  DFKCNQD1 \s_out_data_reg_reg[30]  ( .CN(n78), .D(n63), .CP(clk), .Q(
        s_out_data[30]) );
  DFKCNQD1 \s_out_data_reg_reg[29]  ( .CN(n77), .D(n65), .CP(clk), .Q(
        s_out_data[29]) );
  DFKCNQD1 \s_out_data_reg_reg[28]  ( .CN(n76), .D(n67), .CP(clk), .Q(
        s_out_data[28]) );
  DFKCNQD1 \s_out_data_reg_reg[27]  ( .CN(n78), .D(n53), .CP(clk), .Q(
        s_out_data[27]) );
  DFKCNQD1 \s_out_data_reg_reg[26]  ( .CN(n77), .D(n55), .CP(clk), .Q(
        s_out_data[26]) );
  DFKCNQD1 \s_out_data_reg_reg[25]  ( .CN(n76), .D(n57), .CP(clk), .Q(
        s_out_data[25]) );
  DFKCNQD1 \s_out_data_reg_reg[24]  ( .CN(n78), .D(n59), .CP(clk), .Q(
        s_out_data[24]) );
  DFKCNQD1 \s_out_data_reg_reg[23]  ( .CN(n77), .D(n45), .CP(clk), .Q(
        s_out_data[23]) );
  DFKCNQD1 \s_out_data_reg_reg[22]  ( .CN(n76), .D(n47), .CP(clk), .Q(
        s_out_data[22]) );
  DFKCNQD1 \s_out_data_reg_reg[21]  ( .CN(n78), .D(n49), .CP(clk), .Q(
        s_out_data[21]) );
  DFKCNQD1 \s_out_data_reg_reg[20]  ( .CN(n77), .D(n51), .CP(clk), .Q(
        s_out_data[20]) );
  DFKCNQD1 \s_out_data_reg_reg[19]  ( .CN(n76), .D(n37), .CP(clk), .Q(
        s_out_data[19]) );
  DFKCNQD1 \s_out_data_reg_reg[18]  ( .CN(n78), .D(n39), .CP(clk), .Q(
        s_out_data[18]) );
  DFKCNQD1 \s_out_data_reg_reg[17]  ( .CN(n77), .D(n41), .CP(clk), .Q(
        s_out_data[17]) );
  DFKCNQD1 \s_out_data_reg_reg[16]  ( .CN(n76), .D(n43), .CP(clk), .Q(
        s_out_data[16]) );
  DFKCNQD1 \s_out_data_reg_reg[15]  ( .CN(n78), .D(n29), .CP(clk), .Q(
        s_out_data[15]) );
  DFKCNQD1 \s_out_data_reg_reg[14]  ( .CN(n77), .D(n31), .CP(clk), .Q(
        s_out_data[14]) );
  DFKCNQD1 \s_out_data_reg_reg[13]  ( .CN(n76), .D(n33), .CP(clk), .Q(
        s_out_data[13]) );
  DFKCNQD1 \s_out_data_reg_reg[12]  ( .CN(n78), .D(n35), .CP(clk), .Q(
        s_out_data[12]) );
  DFKCNQD1 \s_out_data_reg_reg[11]  ( .CN(n77), .D(n21), .CP(clk), .Q(
        s_out_data[11]) );
  DFKCNQD1 \s_out_data_reg_reg[10]  ( .CN(n76), .D(n23), .CP(clk), .Q(
        s_out_data[10]) );
  DFKCNQD1 \s_out_data_reg_reg[9]  ( .CN(n78), .D(n25), .CP(clk), .Q(
        s_out_data[9]) );
  DFKCNQD1 \s_out_data_reg_reg[8]  ( .CN(n77), .D(n27), .CP(clk), .Q(
        s_out_data[8]) );
  DFKCNQD1 \s_out_data_reg_reg[7]  ( .CN(n76), .D(n13), .CP(clk), .Q(
        s_out_data[7]) );
  DFKCNQD1 \s_out_data_reg_reg[6]  ( .CN(n78), .D(n15), .CP(clk), .Q(
        s_out_data[6]) );
  DFKCNQD1 \s_out_data_reg_reg[5]  ( .CN(n77), .D(n17), .CP(clk), .Q(
        s_out_data[5]) );
  DFKCNQD1 \s_out_data_reg_reg[4]  ( .CN(n76), .D(n19), .CP(clk), .Q(
        s_out_data[4]) );
  DFKCNQD1 \s_out_data_reg_reg[3]  ( .CN(n78), .D(n2), .CP(clk), .Q(
        s_out_data[3]) );
  DFKCNQD1 \s_out_data_reg_reg[2]  ( .CN(n77), .D(n7), .CP(clk), .Q(
        s_out_data[2]) );
  DFKCNQD1 \s_out_data_reg_reg[1]  ( .CN(n76), .D(n9), .CP(clk), .Q(
        s_out_data[1]) );
  DFKCNQD1 \s_out_data_reg_reg[0]  ( .CN(n78), .D(n11), .CP(clk), .Q(
        s_out_data[0]) );
  DFKCNQD1 \e_out_y_reg_reg[1]  ( .CN(n76), .D(e_msg[33]), .CP(clk), .Q(
        e_out_y[1]) );
  DFKCNQD1 \e_out_y_reg_reg[0]  ( .CN(n76), .D(e_msg[32]), .CP(clk), .Q(
        e_out_y[0]) );
  DFKCNQD1 \e_out_x_reg_reg[1]  ( .CN(n76), .D(e_msg[35]), .CP(clk), .Q(
        e_out_x[1]) );
  DFKCNQD1 \e_out_x_reg_reg[0]  ( .CN(n76), .D(e_msg[34]), .CP(clk), .Q(
        e_out_x[0]) );
  DFKCNQD1 \e_out_data_reg_reg[31]  ( .CN(n79), .D(e_msg[31]), .CP(clk), .Q(
        e_out_data[31]) );
  DFKCNQD1 \e_out_data_reg_reg[30]  ( .CN(n78), .D(e_msg[30]), .CP(clk), .Q(
        e_out_data[30]) );
  DFKCNQD1 \e_out_data_reg_reg[29]  ( .CN(n79), .D(e_msg[29]), .CP(clk), .Q(
        e_out_data[29]) );
  DFKCNQD1 \e_out_data_reg_reg[28]  ( .CN(n78), .D(e_msg[28]), .CP(clk), .Q(
        e_out_data[28]) );
  DFKCNQD1 \e_out_data_reg_reg[27]  ( .CN(n79), .D(e_msg[27]), .CP(clk), .Q(
        e_out_data[27]) );
  DFKCNQD1 \e_out_data_reg_reg[26]  ( .CN(n78), .D(e_msg[26]), .CP(clk), .Q(
        e_out_data[26]) );
  DFKCNQD1 \e_out_data_reg_reg[25]  ( .CN(n79), .D(e_msg[25]), .CP(clk), .Q(
        e_out_data[25]) );
  DFKCNQD1 \e_out_data_reg_reg[24]  ( .CN(n78), .D(e_msg[24]), .CP(clk), .Q(
        e_out_data[24]) );
  DFKCNQD1 \e_out_data_reg_reg[23]  ( .CN(n79), .D(e_msg[23]), .CP(clk), .Q(
        e_out_data[23]) );
  DFKCNQD1 \e_out_data_reg_reg[22]  ( .CN(n78), .D(e_msg[22]), .CP(clk), .Q(
        e_out_data[22]) );
  DFKCNQD1 \e_out_data_reg_reg[21]  ( .CN(n79), .D(e_msg[21]), .CP(clk), .Q(
        e_out_data[21]) );
  DFKCNQD1 \e_out_data_reg_reg[20]  ( .CN(n78), .D(e_msg[20]), .CP(clk), .Q(
        e_out_data[20]) );
  DFKCNQD1 \e_out_data_reg_reg[19]  ( .CN(n79), .D(e_msg[19]), .CP(clk), .Q(
        e_out_data[19]) );
  DFKCNQD1 \e_out_data_reg_reg[18]  ( .CN(n78), .D(e_msg[18]), .CP(clk), .Q(
        e_out_data[18]) );
  DFKCNQD1 \e_out_data_reg_reg[17]  ( .CN(n79), .D(e_msg[17]), .CP(clk), .Q(
        e_out_data[17]) );
  DFKCNQD1 \e_out_data_reg_reg[16]  ( .CN(n78), .D(e_msg[16]), .CP(clk), .Q(
        e_out_data[16]) );
  DFKCNQD1 \e_out_data_reg_reg[15]  ( .CN(n79), .D(e_msg[15]), .CP(clk), .Q(
        e_out_data[15]) );
  DFKCNQD1 \e_out_data_reg_reg[14]  ( .CN(n77), .D(e_msg[14]), .CP(clk), .Q(
        e_out_data[14]) );
  DFKCNQD1 \e_out_data_reg_reg[13]  ( .CN(n76), .D(e_msg[13]), .CP(clk), .Q(
        e_out_data[13]) );
  DFKCNQD1 \e_out_data_reg_reg[12]  ( .CN(n78), .D(e_msg[12]), .CP(clk), .Q(
        e_out_data[12]) );
  DFKCNQD1 \e_out_data_reg_reg[11]  ( .CN(n78), .D(e_msg[11]), .CP(clk), .Q(
        e_out_data[11]) );
  DFKCNQD1 \e_out_data_reg_reg[10]  ( .CN(n78), .D(e_msg[10]), .CP(clk), .Q(
        e_out_data[10]) );
  DFKCNQD1 \e_out_data_reg_reg[9]  ( .CN(n79), .D(e_msg[9]), .CP(clk), .Q(
        e_out_data[9]) );
  DFKCNQD1 \e_out_data_reg_reg[8]  ( .CN(n78), .D(e_msg[8]), .CP(clk), .Q(
        e_out_data[8]) );
  DFKCNQD1 \e_out_data_reg_reg[7]  ( .CN(n79), .D(e_msg[7]), .CP(clk), .Q(
        e_out_data[7]) );
  DFKCNQD1 \e_out_data_reg_reg[6]  ( .CN(n78), .D(e_msg[6]), .CP(clk), .Q(
        e_out_data[6]) );
  DFKCNQD1 \e_out_data_reg_reg[5]  ( .CN(n79), .D(e_msg[5]), .CP(clk), .Q(
        e_out_data[5]) );
  DFKCNQD1 \e_out_data_reg_reg[4]  ( .CN(n78), .D(e_msg[4]), .CP(clk), .Q(
        e_out_data[4]) );
  DFKCNQD1 \e_out_data_reg_reg[3]  ( .CN(n79), .D(e_msg[3]), .CP(clk), .Q(
        e_out_data[3]) );
  DFKCNQD1 \e_out_data_reg_reg[2]  ( .CN(n78), .D(e_msg[2]), .CP(clk), .Q(
        e_out_data[2]) );
  DFKCNQD1 \e_out_data_reg_reg[1]  ( .CN(n79), .D(e_msg[1]), .CP(clk), .Q(
        e_out_data[1]) );
  DFKCNQD1 \e_out_data_reg_reg[0]  ( .CN(n78), .D(e_msg[0]), .CP(clk), .Q(
        e_out_data[0]) );
  DFKCNQD1 o_v_reg_reg ( .CN(dor_o_v), .D(n78), .CP(clk), .Q(o_v) );
  DFKCNQD1 s_out_v_reg_reg ( .CN(n78), .D(dor_s_v), .CP(clk), .Q(s_out_v) );
  DFKCNQD1 e_out_v_reg_reg ( .CN(dor_e_v), .D(n78), .CP(clk), .Q(e_out_v) );
  DFKCNQD1 w_in_v_reg_reg ( .CN(n77), .D(w_in_v), .CP(clk), .Q(w_in_v_reg) );
  DFKCNQD1 n_in_v_reg_reg ( .CN(n77), .D(n_in_v), .CP(clk), .Q(n_in_v_reg) );
  DFKCNQD2 \n_in_y_reg_reg[1]  ( .CN(n76), .D(n_in_y[1]), .CP(clk), .Q(
        n_in_y_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[0]  ( .CN(n77), .D(n_in_data[0]), .CP(clk), .Q(
        n_in_data_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[1]  ( .CN(n79), .D(n_in_x[1]), .CP(clk), .Q(
        n_in_x_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[1]  ( .CN(n79), .D(n_in_data[1]), .CP(clk), .Q(
        n_in_data_reg[1]) );
  DFKCNQD2 \n_in_data_reg_reg[2]  ( .CN(n76), .D(n_in_data[2]), .CP(clk), .Q(
        n_in_data_reg[2]) );
  DFKCNQD2 \n_in_data_reg_reg[3]  ( .CN(n77), .D(n_in_data[3]), .CP(clk), .Q(
        n_in_data_reg[3]) );
  DFKCNQD2 \n_in_data_reg_reg[4]  ( .CN(n76), .D(n_in_data[4]), .CP(clk), .Q(
        n_in_data_reg[4]) );
  DFKCNQD2 \n_in_data_reg_reg[5]  ( .CN(n77), .D(n_in_data[5]), .CP(clk), .Q(
        n_in_data_reg[5]) );
  DFKCNQD2 \n_in_data_reg_reg[6]  ( .CN(n76), .D(n_in_data[6]), .CP(clk), .Q(
        n_in_data_reg[6]) );
  DFKCNQD2 \n_in_data_reg_reg[7]  ( .CN(n77), .D(n_in_data[7]), .CP(clk), .Q(
        n_in_data_reg[7]) );
  DFKCNQD2 \n_in_data_reg_reg[9]  ( .CN(n76), .D(n_in_data[9]), .CP(clk), .Q(
        n_in_data_reg[9]) );
  DFKCNQD2 \n_in_data_reg_reg[10]  ( .CN(n77), .D(n_in_data[10]), .CP(clk), 
        .Q(n_in_data_reg[10]) );
  DFKCNQD2 \n_in_data_reg_reg[11]  ( .CN(n76), .D(n_in_data[11]), .CP(clk), 
        .Q(n_in_data_reg[11]) );
  DFKCNQD2 \n_in_data_reg_reg[12]  ( .CN(n79), .D(n_in_data[12]), .CP(clk), 
        .Q(n_in_data_reg[12]) );
  DFKCNQD2 \n_in_data_reg_reg[13]  ( .CN(n77), .D(n_in_data[13]), .CP(clk), 
        .Q(n_in_data_reg[13]) );
  DFKCNQD2 \n_in_data_reg_reg[14]  ( .CN(n79), .D(n_in_data[14]), .CP(clk), 
        .Q(n_in_data_reg[14]) );
  DFKCNQD2 \n_in_data_reg_reg[15]  ( .CN(n79), .D(n_in_data[15]), .CP(clk), 
        .Q(n_in_data_reg[15]) );
  DFKCNQD2 \n_in_data_reg_reg[16]  ( .CN(n79), .D(n_in_data[16]), .CP(clk), 
        .Q(n_in_data_reg[16]) );
  DFKCNQD2 \n_in_data_reg_reg[17]  ( .CN(n79), .D(n_in_data[17]), .CP(clk), 
        .Q(n_in_data_reg[17]) );
  DFKCNQD2 \n_in_data_reg_reg[18]  ( .CN(n79), .D(n_in_data[18]), .CP(clk), 
        .Q(n_in_data_reg[18]) );
  DFKCNQD2 \n_in_data_reg_reg[19]  ( .CN(n77), .D(n_in_data[19]), .CP(clk), 
        .Q(n_in_data_reg[19]) );
  DFKCNQD2 \n_in_data_reg_reg[20]  ( .CN(n79), .D(n_in_data[20]), .CP(clk), 
        .Q(n_in_data_reg[20]) );
  DFKCNQD2 \n_in_data_reg_reg[21]  ( .CN(n79), .D(n_in_data[21]), .CP(clk), 
        .Q(n_in_data_reg[21]) );
  DFKCNQD2 \n_in_data_reg_reg[22]  ( .CN(n79), .D(n_in_data[22]), .CP(clk), 
        .Q(n_in_data_reg[22]) );
  DFKCNQD2 \n_in_data_reg_reg[23]  ( .CN(n79), .D(n_in_data[23]), .CP(clk), 
        .Q(n_in_data_reg[23]) );
  DFKCNQD2 \n_in_data_reg_reg[24]  ( .CN(n79), .D(n_in_data[24]), .CP(clk), 
        .Q(n_in_data_reg[24]) );
  DFKCNQD2 \n_in_data_reg_reg[25]  ( .CN(n79), .D(n_in_data[25]), .CP(clk), 
        .Q(n_in_data_reg[25]) );
  DFKCNQD2 \n_in_data_reg_reg[26]  ( .CN(n79), .D(n_in_data[26]), .CP(clk), 
        .Q(n_in_data_reg[26]) );
  DFKCNQD2 \n_in_data_reg_reg[27]  ( .CN(n79), .D(n_in_data[27]), .CP(clk), 
        .Q(n_in_data_reg[27]) );
  DFKCNQD2 \n_in_data_reg_reg[28]  ( .CN(n79), .D(n_in_data[28]), .CP(clk), 
        .Q(n_in_data_reg[28]) );
  DFKCNQD2 \n_in_data_reg_reg[29]  ( .CN(n79), .D(n_in_data[29]), .CP(clk), 
        .Q(n_in_data_reg[29]) );
  DFKCNQD2 \n_in_data_reg_reg[30]  ( .CN(n79), .D(n_in_data[30]), .CP(clk), 
        .Q(n_in_data_reg[30]) );
  DFKCNQD2 \n_in_data_reg_reg[31]  ( .CN(n79), .D(n_in_data[31]), .CP(clk), 
        .Q(n_in_data_reg[31]) );
  DFKCNQD2 \n_in_y_reg_reg[0]  ( .CN(n76), .D(n_in_y[0]), .CP(clk), .Q(
        n_in_y_reg[0]) );
  DFKCNQD2 \n_in_x_reg_reg[0]  ( .CN(n76), .D(n_in_x[0]), .CP(clk), .Q(
        n_in_x_reg[0]) );
  DFKCNQD2 \n_in_data_reg_reg[8]  ( .CN(n76), .D(n_in_data[8]), .CP(clk), .Q(
        n_in_data_reg[8]) );
  CKND0 U3 ( .I(s_msg[3]), .ZN(n1) );
  CKND0 U5 ( .I(n1), .ZN(n2) );
  CKND0 U6 ( .I(s_msg[2]), .ZN(n3) );
  CKND0 U7 ( .I(n3), .ZN(n7) );
  CKND0 U8 ( .I(s_msg[1]), .ZN(n8) );
  CKND0 U9 ( .I(n8), .ZN(n9) );
  CKND0 U10 ( .I(s_msg[0]), .ZN(n10) );
  CKND0 U11 ( .I(n10), .ZN(n11) );
  CKND0 U12 ( .I(s_msg[7]), .ZN(n12) );
  CKND0 U13 ( .I(n12), .ZN(n13) );
  CKND0 U14 ( .I(s_msg[6]), .ZN(n14) );
  CKND0 U15 ( .I(n14), .ZN(n15) );
  CKND0 U16 ( .I(s_msg[5]), .ZN(n16) );
  CKND0 U17 ( .I(n16), .ZN(n17) );
  CKND0 U18 ( .I(s_msg[4]), .ZN(n18) );
  CKND0 U19 ( .I(n18), .ZN(n19) );
  CKND0 U20 ( .I(s_msg[11]), .ZN(n20) );
  CKND0 U21 ( .I(n20), .ZN(n21) );
  CKND0 U22 ( .I(s_msg[10]), .ZN(n22) );
  CKND0 U23 ( .I(n22), .ZN(n23) );
  CKND0 U24 ( .I(s_msg[9]), .ZN(n24) );
  CKND0 U25 ( .I(n24), .ZN(n25) );
  CKND0 U26 ( .I(s_msg[8]), .ZN(n26) );
  CKND0 U27 ( .I(n26), .ZN(n27) );
  CKND0 U28 ( .I(s_msg[15]), .ZN(n28) );
  CKND0 U29 ( .I(n28), .ZN(n29) );
  CKND0 U30 ( .I(s_msg[14]), .ZN(n30) );
  CKND0 U31 ( .I(n30), .ZN(n31) );
  CKND0 U32 ( .I(s_msg[13]), .ZN(n32) );
  CKND0 U33 ( .I(n32), .ZN(n33) );
  CKND0 U34 ( .I(s_msg[12]), .ZN(n34) );
  CKND0 U35 ( .I(n34), .ZN(n35) );
  CKND0 U36 ( .I(s_msg[19]), .ZN(n36) );
  CKND0 U37 ( .I(n36), .ZN(n37) );
  CKND0 U38 ( .I(s_msg[18]), .ZN(n38) );
  CKND0 U39 ( .I(n38), .ZN(n39) );
  CKND0 U40 ( .I(s_msg[17]), .ZN(n40) );
  CKND0 U41 ( .I(n40), .ZN(n41) );
  CKND0 U42 ( .I(s_msg[16]), .ZN(n42) );
  CKND0 U43 ( .I(n42), .ZN(n43) );
  CKND0 U44 ( .I(s_msg[23]), .ZN(n44) );
  CKND0 U45 ( .I(n44), .ZN(n45) );
  CKND0 U46 ( .I(s_msg[22]), .ZN(n46) );
  CKND0 U47 ( .I(n46), .ZN(n47) );
  CKND0 U48 ( .I(s_msg[21]), .ZN(n48) );
  CKND0 U49 ( .I(n48), .ZN(n49) );
  CKND0 U50 ( .I(s_msg[20]), .ZN(n50) );
  CKND0 U51 ( .I(n50), .ZN(n51) );
  CKND0 U52 ( .I(s_msg[27]), .ZN(n52) );
  CKND0 U53 ( .I(n52), .ZN(n53) );
  CKND0 U54 ( .I(s_msg[26]), .ZN(n54) );
  CKND0 U55 ( .I(n54), .ZN(n55) );
  CKND0 U56 ( .I(s_msg[25]), .ZN(n56) );
  CKND0 U57 ( .I(n56), .ZN(n57) );
  CKND0 U58 ( .I(s_msg[24]), .ZN(n58) );
  CKND0 U59 ( .I(n58), .ZN(n59) );
  CKND0 U60 ( .I(s_msg[31]), .ZN(n60) );
  CKND0 U61 ( .I(n60), .ZN(n61) );
  CKND0 U62 ( .I(s_msg[30]), .ZN(n62) );
  CKND0 U63 ( .I(n62), .ZN(n63) );
  CKND0 U64 ( .I(s_msg[29]), .ZN(n64) );
  CKND0 U65 ( .I(n64), .ZN(n65) );
  CKND0 U66 ( .I(s_msg[28]), .ZN(n66) );
  CKND0 U67 ( .I(n66), .ZN(n67) );
  CKND0 U68 ( .I(s_msg[35]), .ZN(n68) );
  CKND0 U69 ( .I(n68), .ZN(n69) );
  CKND0 U70 ( .I(s_msg[32]), .ZN(n70) );
  CKND0 U71 ( .I(n70), .ZN(n71) );
  CKND0 U72 ( .I(s_msg[34]), .ZN(n72) );
  CKND0 U73 ( .I(n72), .ZN(n73) );
  CKND0 U74 ( .I(s_msg[33]), .ZN(n74) );
  CKND0 U75 ( .I(n74), .ZN(n75) );
  INVD1 U76 ( .I(dor_e_v), .ZN(n82) );
  low_swing_rx U77 ( .i(n79), .o(n77) );
  INVD1 U78 ( .I(n80), .ZN(n79) );
  low_swing_rx U79 ( .i(n77), .o(n76) );
  low_swing_rx U80 ( .i(n77), .o(n78) );
  INVD1 U81 ( .I(dor_o_v), .ZN(n81) );
  INR4D0 U82 ( .A1(n6), .B1(o_v), .B2(n_in_v), .B3(n_in_v_reg), .ZN(n5) );
  NR3D0 U83 ( .A1(s_out_v), .A2(w_in_v_reg), .A3(w_in_v), .ZN(n6) );
  NR3D0 U84 ( .A1(dor_s_v), .A2(i_v), .A3(e_out_v), .ZN(n4) );
  low_swing_rx U85 ( .i(rst), .o(n80) );
  TIEL U86 ( .ZN(\*Logic0* ) );
endmodule


module torus_D_W32 ( clk, rst, out_v, out, done );
  output [31:0] out;
  input clk, rst;
  output out_v, done;
  wire   \i[0][0][36] , \i[0][0][35] , \i[0][0][34] , \i[0][0][33] ,
         \i[0][0][32] , \i[0][0][31] , \i[0][0][30] , \i[0][0][29] ,
         \i[0][0][28] , \i[0][0][27] , \i[0][0][26] , \i[0][0][25] ,
         \i[0][0][24] , \i[0][0][23] , \i[0][0][22] , \i[0][0][21] ,
         \i[0][0][20] , \i[0][0][19] , \i[0][0][18] , \i[0][0][17] ,
         \i[0][0][16] , \i[0][0][15] , \i[0][0][14] , \i[0][0][13] ,
         \i[0][0][12] , \i[0][0][11] , \i[0][0][10] , \i[0][0][9] ,
         \i[0][0][8] , \i[0][0][7] , \i[0][0][6] , \i[0][0][5] , \i[0][0][4] ,
         \i[0][0][3] , \i[0][0][2] , \i[0][0][1] , \i[0][0][0] , \i[0][1][36] ,
         \i[0][1][35] , \i[0][1][34] , \i[0][1][33] , \i[0][1][32] ,
         \i[0][1][31] , \i[0][1][30] , \i[0][1][29] , \i[0][1][28] ,
         \i[0][1][27] , \i[0][1][26] , \i[0][1][25] , \i[0][1][24] ,
         \i[0][1][23] , \i[0][1][22] , \i[0][1][21] , \i[0][1][20] ,
         \i[0][1][19] , \i[0][1][18] , \i[0][1][17] , \i[0][1][16] ,
         \i[0][1][15] , \i[0][1][14] , \i[0][1][13] , \i[0][1][12] ,
         \i[0][1][11] , \i[0][1][10] , \i[0][1][9] , \i[0][1][8] ,
         \i[0][1][7] , \i[0][1][6] , \i[0][1][5] , \i[0][1][4] , \i[0][1][3] ,
         \i[0][1][2] , \i[0][1][1] , \i[0][1][0] , \i[0][2][36] ,
         \i[0][2][35] , \i[0][2][34] , \i[0][2][33] , \i[0][2][32] ,
         \i[0][2][31] , \i[0][2][30] , \i[0][2][29] , \i[0][2][28] ,
         \i[0][2][27] , \i[0][2][26] , \i[0][2][25] , \i[0][2][24] ,
         \i[0][2][23] , \i[0][2][22] , \i[0][2][21] , \i[0][2][20] ,
         \i[0][2][19] , \i[0][2][18] , \i[0][2][17] , \i[0][2][16] ,
         \i[0][2][15] , \i[0][2][14] , \i[0][2][13] , \i[0][2][12] ,
         \i[0][2][11] , \i[0][2][10] , \i[0][2][9] , \i[0][2][8] ,
         \i[0][2][7] , \i[0][2][6] , \i[0][2][5] , \i[0][2][4] , \i[0][2][3] ,
         \i[0][2][2] , \i[0][2][1] , \i[0][2][0] , \i[0][3][36] ,
         \i[0][3][35] , \i[0][3][34] , \i[0][3][33] , \i[0][3][32] ,
         \i[0][3][31] , \i[0][3][30] , \i[0][3][29] , \i[0][3][28] ,
         \i[0][3][27] , \i[0][3][26] , \i[0][3][25] , \i[0][3][24] ,
         \i[0][3][23] , \i[0][3][22] , \i[0][3][21] , \i[0][3][20] ,
         \i[0][3][19] , \i[0][3][18] , \i[0][3][17] , \i[0][3][16] ,
         \i[0][3][15] , \i[0][3][14] , \i[0][3][13] , \i[0][3][12] ,
         \i[0][3][11] , \i[0][3][10] , \i[0][3][9] , \i[0][3][8] ,
         \i[0][3][7] , \i[0][3][6] , \i[0][3][5] , \i[0][3][4] , \i[0][3][3] ,
         \i[0][3][2] , \i[0][3][1] , \i[0][3][0] , \i[1][0][36] ,
         \i[1][0][35] , \i[1][0][34] , \i[1][0][33] , \i[1][0][32] ,
         \i[1][0][31] , \i[1][0][30] , \i[1][0][29] , \i[1][0][28] ,
         \i[1][0][27] , \i[1][0][26] , \i[1][0][25] , \i[1][0][24] ,
         \i[1][0][23] , \i[1][0][22] , \i[1][0][21] , \i[1][0][20] ,
         \i[1][0][19] , \i[1][0][18] , \i[1][0][17] , \i[1][0][16] ,
         \i[1][0][15] , \i[1][0][14] , \i[1][0][13] , \i[1][0][12] ,
         \i[1][0][11] , \i[1][0][10] , \i[1][0][9] , \i[1][0][8] ,
         \i[1][0][7] , \i[1][0][6] , \i[1][0][5] , \i[1][0][4] , \i[1][0][3] ,
         \i[1][0][2] , \i[1][0][1] , \i[1][0][0] , \i[1][1][36] ,
         \i[1][1][35] , \i[1][1][34] , \i[1][1][33] , \i[1][1][32] ,
         \i[1][1][31] , \i[1][1][30] , \i[1][1][29] , \i[1][1][28] ,
         \i[1][1][27] , \i[1][1][26] , \i[1][1][25] , \i[1][1][24] ,
         \i[1][1][23] , \i[1][1][22] , \i[1][1][21] , \i[1][1][20] ,
         \i[1][1][19] , \i[1][1][18] , \i[1][1][17] , \i[1][1][16] ,
         \i[1][1][15] , \i[1][1][14] , \i[1][1][13] , \i[1][1][12] ,
         \i[1][1][11] , \i[1][1][10] , \i[1][1][9] , \i[1][1][8] ,
         \i[1][1][7] , \i[1][1][6] , \i[1][1][5] , \i[1][1][4] , \i[1][1][3] ,
         \i[1][1][2] , \i[1][1][1] , \i[1][1][0] , \i[1][2][36] ,
         \i[1][2][35] , \i[1][2][34] , \i[1][2][33] , \i[1][2][32] ,
         \i[1][2][31] , \i[1][2][30] , \i[1][2][29] , \i[1][2][28] ,
         \i[1][2][27] , \i[1][2][26] , \i[1][2][25] , \i[1][2][24] ,
         \i[1][2][23] , \i[1][2][22] , \i[1][2][21] , \i[1][2][20] ,
         \i[1][2][19] , \i[1][2][18] , \i[1][2][17] , \i[1][2][16] ,
         \i[1][2][15] , \i[1][2][14] , \i[1][2][13] , \i[1][2][12] ,
         \i[1][2][11] , \i[1][2][10] , \i[1][2][9] , \i[1][2][8] ,
         \i[1][2][7] , \i[1][2][6] , \i[1][2][5] , \i[1][2][4] , \i[1][2][3] ,
         \i[1][2][2] , \i[1][2][1] , \i[1][2][0] , \i[1][3][36] ,
         \i[1][3][35] , \i[1][3][34] , \i[1][3][33] , \i[1][3][32] ,
         \i[1][3][31] , \i[1][3][30] , \i[1][3][29] , \i[1][3][28] ,
         \i[1][3][27] , \i[1][3][26] , \i[1][3][25] , \i[1][3][24] ,
         \i[1][3][23] , \i[1][3][22] , \i[1][3][21] , \i[1][3][20] ,
         \i[1][3][19] , \i[1][3][18] , \i[1][3][17] , \i[1][3][16] ,
         \i[1][3][15] , \i[1][3][14] , \i[1][3][13] , \i[1][3][12] ,
         \i[1][3][11] , \i[1][3][10] , \i[1][3][9] , \i[1][3][8] ,
         \i[1][3][7] , \i[1][3][6] , \i[1][3][5] , \i[1][3][4] , \i[1][3][3] ,
         \i[1][3][2] , \i[1][3][1] , \i[1][3][0] , \i[2][0][36] ,
         \i[2][0][35] , \i[2][0][34] , \i[2][0][33] , \i[2][0][32] ,
         \i[2][0][31] , \i[2][0][30] , \i[2][0][29] , \i[2][0][28] ,
         \i[2][0][27] , \i[2][0][26] , \i[2][0][25] , \i[2][0][24] ,
         \i[2][0][23] , \i[2][0][22] , \i[2][0][21] , \i[2][0][20] ,
         \i[2][0][19] , \i[2][0][18] , \i[2][0][17] , \i[2][0][16] ,
         \i[2][0][15] , \i[2][0][14] , \i[2][0][13] , \i[2][0][12] ,
         \i[2][0][11] , \i[2][0][10] , \i[2][0][9] , \i[2][0][8] ,
         \i[2][0][7] , \i[2][0][6] , \i[2][0][5] , \i[2][0][4] , \i[2][0][3] ,
         \i[2][0][2] , \i[2][0][1] , \i[2][0][0] , \i[2][1][36] ,
         \i[2][1][35] , \i[2][1][34] , \i[2][1][33] , \i[2][1][32] ,
         \i[2][1][31] , \i[2][1][30] , \i[2][1][29] , \i[2][1][28] ,
         \i[2][1][27] , \i[2][1][26] , \i[2][1][25] , \i[2][1][24] ,
         \i[2][1][23] , \i[2][1][22] , \i[2][1][21] , \i[2][1][20] ,
         \i[2][1][19] , \i[2][1][18] , \i[2][1][17] , \i[2][1][16] ,
         \i[2][1][15] , \i[2][1][14] , \i[2][1][13] , \i[2][1][12] ,
         \i[2][1][11] , \i[2][1][10] , \i[2][1][9] , \i[2][1][8] ,
         \i[2][1][7] , \i[2][1][6] , \i[2][1][5] , \i[2][1][4] , \i[2][1][3] ,
         \i[2][1][2] , \i[2][1][1] , \i[2][1][0] , \i[2][2][36] ,
         \i[2][2][35] , \i[2][2][34] , \i[2][2][33] , \i[2][2][32] ,
         \i[2][2][31] , \i[2][2][30] , \i[2][2][29] , \i[2][2][28] ,
         \i[2][2][27] , \i[2][2][26] , \i[2][2][25] , \i[2][2][24] ,
         \i[2][2][23] , \i[2][2][22] , \i[2][2][21] , \i[2][2][20] ,
         \i[2][2][19] , \i[2][2][18] , \i[2][2][17] , \i[2][2][16] ,
         \i[2][2][15] , \i[2][2][14] , \i[2][2][13] , \i[2][2][12] ,
         \i[2][2][11] , \i[2][2][10] , \i[2][2][9] , \i[2][2][8] ,
         \i[2][2][7] , \i[2][2][6] , \i[2][2][5] , \i[2][2][4] , \i[2][2][3] ,
         \i[2][2][2] , \i[2][2][1] , \i[2][2][0] , \i[2][3][36] ,
         \i[2][3][35] , \i[2][3][34] , \i[2][3][33] , \i[2][3][32] ,
         \i[2][3][31] , \i[2][3][30] , \i[2][3][29] , \i[2][3][28] ,
         \i[2][3][27] , \i[2][3][26] , \i[2][3][25] , \i[2][3][24] ,
         \i[2][3][23] , \i[2][3][22] , \i[2][3][21] , \i[2][3][20] ,
         \i[2][3][19] , \i[2][3][18] , \i[2][3][17] , \i[2][3][16] ,
         \i[2][3][15] , \i[2][3][14] , \i[2][3][13] , \i[2][3][12] ,
         \i[2][3][11] , \i[2][3][10] , \i[2][3][9] , \i[2][3][8] ,
         \i[2][3][7] , \i[2][3][6] , \i[2][3][5] , \i[2][3][4] , \i[2][3][3] ,
         \i[2][3][2] , \i[2][3][1] , \i[2][3][0] , \i[3][0][36] ,
         \i[3][0][35] , \i[3][0][34] , \i[3][0][33] , \i[3][0][32] ,
         \i[3][0][31] , \i[3][0][30] , \i[3][0][29] , \i[3][0][28] ,
         \i[3][0][27] , \i[3][0][26] , \i[3][0][25] , \i[3][0][24] ,
         \i[3][0][23] , \i[3][0][22] , \i[3][0][21] , \i[3][0][20] ,
         \i[3][0][19] , \i[3][0][18] , \i[3][0][17] , \i[3][0][16] ,
         \i[3][0][15] , \i[3][0][14] , \i[3][0][13] , \i[3][0][12] ,
         \i[3][0][11] , \i[3][0][10] , \i[3][0][9] , \i[3][0][8] ,
         \i[3][0][7] , \i[3][0][6] , \i[3][0][5] , \i[3][0][4] , \i[3][0][3] ,
         \i[3][0][2] , \i[3][0][1] , \i[3][0][0] , \i[3][1][36] ,
         \i[3][1][35] , \i[3][1][34] , \i[3][1][33] , \i[3][1][32] ,
         \i[3][1][31] , \i[3][1][30] , \i[3][1][29] , \i[3][1][28] ,
         \i[3][1][27] , \i[3][1][26] , \i[3][1][25] , \i[3][1][24] ,
         \i[3][1][23] , \i[3][1][22] , \i[3][1][21] , \i[3][1][20] ,
         \i[3][1][19] , \i[3][1][18] , \i[3][1][17] , \i[3][1][16] ,
         \i[3][1][15] , \i[3][1][14] , \i[3][1][13] , \i[3][1][12] ,
         \i[3][1][11] , \i[3][1][10] , \i[3][1][9] , \i[3][1][8] ,
         \i[3][1][7] , \i[3][1][6] , \i[3][1][5] , \i[3][1][4] , \i[3][1][3] ,
         \i[3][1][2] , \i[3][1][1] , \i[3][1][0] , \i[3][2][36] ,
         \i[3][2][35] , \i[3][2][34] , \i[3][2][33] , \i[3][2][32] ,
         \i[3][2][31] , \i[3][2][30] , \i[3][2][29] , \i[3][2][28] ,
         \i[3][2][27] , \i[3][2][26] , \i[3][2][25] , \i[3][2][24] ,
         \i[3][2][23] , \i[3][2][22] , \i[3][2][21] , \i[3][2][20] ,
         \i[3][2][19] , \i[3][2][18] , \i[3][2][17] , \i[3][2][16] ,
         \i[3][2][15] , \i[3][2][14] , \i[3][2][13] , \i[3][2][12] ,
         \i[3][2][11] , \i[3][2][10] , \i[3][2][9] , \i[3][2][8] ,
         \i[3][2][7] , \i[3][2][6] , \i[3][2][5] , \i[3][2][4] , \i[3][2][3] ,
         \i[3][2][2] , \i[3][2][1] , \i[3][2][0] , \i[3][3][36] ,
         \i[3][3][35] , \i[3][3][34] , \i[3][3][33] , \i[3][3][32] ,
         \i[3][3][31] , \i[3][3][30] , \i[3][3][29] , \i[3][3][28] ,
         \i[3][3][27] , \i[3][3][26] , \i[3][3][25] , \i[3][3][24] ,
         \i[3][3][23] , \i[3][3][22] , \i[3][3][21] , \i[3][3][20] ,
         \i[3][3][19] , \i[3][3][18] , \i[3][3][17] , \i[3][3][16] ,
         \i[3][3][15] , \i[3][3][14] , \i[3][3][13] , \i[3][3][12] ,
         \i[3][3][11] , \i[3][3][10] , \i[3][3][9] , \i[3][3][8] ,
         \i[3][3][7] , \i[3][3][6] , \i[3][3][5] , \i[3][3][4] , \i[3][3][3] ,
         \i[3][3][2] , \i[3][3][1] , \i[3][3][0] , \s[0][0][36] ,
         \s[0][0][35] , \s[0][0][34] , \s[0][0][33] , \s[0][0][32] ,
         \s[0][1][36] , \s[0][1][35] , \s[0][1][34] , \s[0][1][33] ,
         \s[0][1][32] , \s[0][1][31] , \s[0][1][30] , \s[0][1][29] ,
         \s[0][1][28] , \s[0][1][27] , \s[0][1][26] , \s[0][1][25] ,
         \s[0][1][24] , \s[0][1][23] , \s[0][1][22] , \s[0][1][21] ,
         \s[0][1][20] , \s[0][1][19] , \s[0][1][18] , \s[0][1][17] ,
         \s[0][1][16] , \s[0][1][15] , \s[0][1][14] , \s[0][1][13] ,
         \s[0][1][12] , \s[0][1][11] , \s[0][1][10] , \s[0][1][9] ,
         \s[0][1][8] , \s[0][1][7] , \s[0][1][6] , \s[0][1][5] , \s[0][1][4] ,
         \s[0][1][3] , \s[0][1][2] , \s[0][1][1] , \s[0][1][0] , \s[0][2][36] ,
         \s[0][2][35] , \s[0][2][34] , \s[0][2][33] , \s[0][2][32] ,
         \s[0][2][31] , \s[0][2][30] , \s[0][2][29] , \s[0][2][28] ,
         \s[0][2][27] , \s[0][2][26] , \s[0][2][25] , \s[0][2][24] ,
         \s[0][2][23] , \s[0][2][22] , \s[0][2][21] , \s[0][2][20] ,
         \s[0][2][19] , \s[0][2][18] , \s[0][2][17] , \s[0][2][16] ,
         \s[0][2][15] , \s[0][2][14] , \s[0][2][13] , \s[0][2][12] ,
         \s[0][2][11] , \s[0][2][10] , \s[0][2][9] , \s[0][2][8] ,
         \s[0][2][7] , \s[0][2][6] , \s[0][2][5] , \s[0][2][4] , \s[0][2][3] ,
         \s[0][2][2] , \s[0][2][1] , \s[0][2][0] , \s[0][3][36] ,
         \s[0][3][35] , \s[0][3][34] , \s[0][3][33] , \s[0][3][32] ,
         \s[0][3][31] , \s[0][3][30] , \s[0][3][29] , \s[0][3][28] ,
         \s[0][3][27] , \s[0][3][26] , \s[0][3][25] , \s[0][3][24] ,
         \s[0][3][23] , \s[0][3][22] , \s[0][3][21] , \s[0][3][20] ,
         \s[0][3][19] , \s[0][3][18] , \s[0][3][17] , \s[0][3][16] ,
         \s[0][3][15] , \s[0][3][14] , \s[0][3][13] , \s[0][3][12] ,
         \s[0][3][11] , \s[0][3][10] , \s[0][3][9] , \s[0][3][8] ,
         \s[0][3][7] , \s[0][3][6] , \s[0][3][5] , \s[0][3][4] , \s[0][3][3] ,
         \s[0][3][2] , \s[0][3][1] , \s[0][3][0] , \s[1][0][36] ,
         \s[1][0][35] , \s[1][0][34] , \s[1][0][33] , \s[1][0][32] ,
         \s[1][0][31] , \s[1][0][30] , \s[1][0][29] , \s[1][0][28] ,
         \s[1][0][27] , \s[1][0][26] , \s[1][0][25] , \s[1][0][24] ,
         \s[1][0][23] , \s[1][0][22] , \s[1][0][21] , \s[1][0][20] ,
         \s[1][0][19] , \s[1][0][18] , \s[1][0][17] , \s[1][0][16] ,
         \s[1][0][15] , \s[1][0][14] , \s[1][0][13] , \s[1][0][12] ,
         \s[1][0][11] , \s[1][0][10] , \s[1][0][9] , \s[1][0][8] ,
         \s[1][0][7] , \s[1][0][6] , \s[1][0][5] , \s[1][0][4] , \s[1][0][3] ,
         \s[1][0][2] , \s[1][0][1] , \s[1][0][0] , \s[1][1][36] ,
         \s[1][1][35] , \s[1][1][34] , \s[1][1][33] , \s[1][1][32] ,
         \s[1][1][31] , \s[1][1][30] , \s[1][1][29] , \s[1][1][28] ,
         \s[1][1][27] , \s[1][1][26] , \s[1][1][25] , \s[1][1][24] ,
         \s[1][1][23] , \s[1][1][22] , \s[1][1][21] , \s[1][1][20] ,
         \s[1][1][19] , \s[1][1][18] , \s[1][1][17] , \s[1][1][16] ,
         \s[1][1][15] , \s[1][1][14] , \s[1][1][13] , \s[1][1][12] ,
         \s[1][1][11] , \s[1][1][10] , \s[1][1][9] , \s[1][1][8] ,
         \s[1][1][7] , \s[1][1][6] , \s[1][1][5] , \s[1][1][4] , \s[1][1][3] ,
         \s[1][1][2] , \s[1][1][1] , \s[1][1][0] , \s[1][2][36] ,
         \s[1][2][35] , \s[1][2][34] , \s[1][2][33] , \s[1][2][32] ,
         \s[1][2][31] , \s[1][2][30] , \s[1][2][29] , \s[1][2][28] ,
         \s[1][2][27] , \s[1][2][26] , \s[1][2][25] , \s[1][2][24] ,
         \s[1][2][23] , \s[1][2][22] , \s[1][2][21] , \s[1][2][20] ,
         \s[1][2][19] , \s[1][2][18] , \s[1][2][17] , \s[1][2][16] ,
         \s[1][2][15] , \s[1][2][14] , \s[1][2][13] , \s[1][2][12] ,
         \s[1][2][11] , \s[1][2][10] , \s[1][2][9] , \s[1][2][8] ,
         \s[1][2][7] , \s[1][2][6] , \s[1][2][5] , \s[1][2][4] , \s[1][2][3] ,
         \s[1][2][2] , \s[1][2][1] , \s[1][2][0] , \s[1][3][36] ,
         \s[1][3][35] , \s[1][3][34] , \s[1][3][33] , \s[1][3][32] ,
         \s[1][3][31] , \s[1][3][30] , \s[1][3][29] , \s[1][3][28] ,
         \s[1][3][27] , \s[1][3][26] , \s[1][3][25] , \s[1][3][24] ,
         \s[1][3][23] , \s[1][3][22] , \s[1][3][21] , \s[1][3][20] ,
         \s[1][3][19] , \s[1][3][18] , \s[1][3][17] , \s[1][3][16] ,
         \s[1][3][15] , \s[1][3][14] , \s[1][3][13] , \s[1][3][12] ,
         \s[1][3][11] , \s[1][3][10] , \s[1][3][9] , \s[1][3][8] ,
         \s[1][3][7] , \s[1][3][6] , \s[1][3][5] , \s[1][3][4] , \s[1][3][3] ,
         \s[1][3][2] , \s[1][3][1] , \s[1][3][0] , \s[2][0][36] ,
         \s[2][0][35] , \s[2][0][34] , \s[2][0][33] , \s[2][0][32] ,
         \s[2][0][31] , \s[2][0][30] , \s[2][0][29] , \s[2][0][28] ,
         \s[2][0][27] , \s[2][0][26] , \s[2][0][25] , \s[2][0][24] ,
         \s[2][0][23] , \s[2][0][22] , \s[2][0][21] , \s[2][0][20] ,
         \s[2][0][19] , \s[2][0][18] , \s[2][0][17] , \s[2][0][16] ,
         \s[2][0][15] , \s[2][0][14] , \s[2][0][13] , \s[2][0][12] ,
         \s[2][0][11] , \s[2][0][10] , \s[2][0][9] , \s[2][0][8] ,
         \s[2][0][7] , \s[2][0][6] , \s[2][0][5] , \s[2][0][4] , \s[2][0][3] ,
         \s[2][0][2] , \s[2][0][1] , \s[2][0][0] , \s[2][1][36] ,
         \s[2][1][35] , \s[2][1][34] , \s[2][1][33] , \s[2][1][32] ,
         \s[2][1][31] , \s[2][1][30] , \s[2][1][29] , \s[2][1][28] ,
         \s[2][1][27] , \s[2][1][26] , \s[2][1][25] , \s[2][1][24] ,
         \s[2][1][23] , \s[2][1][22] , \s[2][1][21] , \s[2][1][20] ,
         \s[2][1][19] , \s[2][1][18] , \s[2][1][17] , \s[2][1][16] ,
         \s[2][1][15] , \s[2][1][14] , \s[2][1][13] , \s[2][1][12] ,
         \s[2][1][11] , \s[2][1][10] , \s[2][1][9] , \s[2][1][8] ,
         \s[2][1][7] , \s[2][1][6] , \s[2][1][5] , \s[2][1][4] , \s[2][1][3] ,
         \s[2][1][2] , \s[2][1][1] , \s[2][1][0] , \s[2][2][36] ,
         \s[2][2][35] , \s[2][2][34] , \s[2][2][33] , \s[2][2][32] ,
         \s[2][2][31] , \s[2][2][30] , \s[2][2][29] , \s[2][2][28] ,
         \s[2][2][27] , \s[2][2][26] , \s[2][2][25] , \s[2][2][24] ,
         \s[2][2][23] , \s[2][2][22] , \s[2][2][21] , \s[2][2][20] ,
         \s[2][2][19] , \s[2][2][18] , \s[2][2][17] , \s[2][2][16] ,
         \s[2][2][15] , \s[2][2][14] , \s[2][2][13] , \s[2][2][12] ,
         \s[2][2][11] , \s[2][2][10] , \s[2][2][9] , \s[2][2][8] ,
         \s[2][2][7] , \s[2][2][6] , \s[2][2][5] , \s[2][2][4] , \s[2][2][3] ,
         \s[2][2][2] , \s[2][2][1] , \s[2][2][0] , \s[2][3][36] ,
         \s[2][3][35] , \s[2][3][34] , \s[2][3][33] , \s[2][3][32] ,
         \s[2][3][31] , \s[2][3][30] , \s[2][3][29] , \s[2][3][28] ,
         \s[2][3][27] , \s[2][3][26] , \s[2][3][25] , \s[2][3][24] ,
         \s[2][3][23] , \s[2][3][22] , \s[2][3][21] , \s[2][3][20] ,
         \s[2][3][19] , \s[2][3][18] , \s[2][3][17] , \s[2][3][16] ,
         \s[2][3][15] , \s[2][3][14] , \s[2][3][13] , \s[2][3][12] ,
         \s[2][3][11] , \s[2][3][10] , \s[2][3][9] , \s[2][3][8] ,
         \s[2][3][7] , \s[2][3][6] , \s[2][3][5] , \s[2][3][4] , \s[2][3][3] ,
         \s[2][3][2] , \s[2][3][1] , \s[2][3][0] , \s[3][0][36] ,
         \s[3][0][35] , \s[3][0][34] , \s[3][0][33] , \s[3][0][32] ,
         \s[3][0][31] , \s[3][0][30] , \s[3][0][29] , \s[3][0][28] ,
         \s[3][0][27] , \s[3][0][26] , \s[3][0][25] , \s[3][0][24] ,
         \s[3][0][23] , \s[3][0][22] , \s[3][0][21] , \s[3][0][20] ,
         \s[3][0][19] , \s[3][0][18] , \s[3][0][17] , \s[3][0][16] ,
         \s[3][0][15] , \s[3][0][14] , \s[3][0][13] , \s[3][0][12] ,
         \s[3][0][11] , \s[3][0][10] , \s[3][0][9] , \s[3][0][8] ,
         \s[3][0][7] , \s[3][0][6] , \s[3][0][5] , \s[3][0][4] , \s[3][0][3] ,
         \s[3][0][2] , \s[3][0][1] , \s[3][0][0] , \s[3][1][36] ,
         \s[3][1][35] , \s[3][1][34] , \s[3][1][33] , \s[3][1][32] ,
         \s[3][1][31] , \s[3][1][30] , \s[3][1][29] , \s[3][1][28] ,
         \s[3][1][27] , \s[3][1][26] , \s[3][1][25] , \s[3][1][24] ,
         \s[3][1][23] , \s[3][1][22] , \s[3][1][21] , \s[3][1][20] ,
         \s[3][1][19] , \s[3][1][18] , \s[3][1][17] , \s[3][1][16] ,
         \s[3][1][15] , \s[3][1][14] , \s[3][1][13] , \s[3][1][12] ,
         \s[3][1][11] , \s[3][1][10] , \s[3][1][9] , \s[3][1][8] ,
         \s[3][1][7] , \s[3][1][6] , \s[3][1][5] , \s[3][1][4] , \s[3][1][3] ,
         \s[3][1][2] , \s[3][1][1] , \s[3][1][0] , \s[3][2][36] ,
         \s[3][2][35] , \s[3][2][34] , \s[3][2][33] , \s[3][2][32] ,
         \s[3][2][31] , \s[3][2][30] , \s[3][2][29] , \s[3][2][28] ,
         \s[3][2][27] , \s[3][2][26] , \s[3][2][25] , \s[3][2][24] ,
         \s[3][2][23] , \s[3][2][22] , \s[3][2][21] , \s[3][2][20] ,
         \s[3][2][19] , \s[3][2][18] , \s[3][2][17] , \s[3][2][16] ,
         \s[3][2][15] , \s[3][2][14] , \s[3][2][13] , \s[3][2][12] ,
         \s[3][2][11] , \s[3][2][10] , \s[3][2][9] , \s[3][2][8] ,
         \s[3][2][7] , \s[3][2][6] , \s[3][2][5] , \s[3][2][4] , \s[3][2][3] ,
         \s[3][2][2] , \s[3][2][1] , \s[3][2][0] , \s[3][3][36] ,
         \s[3][3][35] , \s[3][3][34] , \s[3][3][33] , \s[3][3][32] ,
         \s[3][3][31] , \s[3][3][30] , \s[3][3][29] , \s[3][3][28] ,
         \s[3][3][27] , \s[3][3][26] , \s[3][3][25] , \s[3][3][24] ,
         \s[3][3][23] , \s[3][3][22] , \s[3][3][21] , \s[3][3][20] ,
         \s[3][3][19] , \s[3][3][18] , \s[3][3][17] , \s[3][3][16] ,
         \s[3][3][15] , \s[3][3][14] , \s[3][3][13] , \s[3][3][12] ,
         \s[3][3][11] , \s[3][3][10] , \s[3][3][9] , \s[3][3][8] ,
         \s[3][3][7] , \s[3][3][6] , \s[3][3][5] , \s[3][3][4] , \s[3][3][3] ,
         \s[3][3][2] , \s[3][3][1] , \s[3][3][0] , \o_v[0][1] , \o_v[0][2] ,
         \o_v[0][3] , \o_v[1][0] , \o_v[1][1] , \o_v[1][2] , \o_v[1][3] ,
         \o_v[2][0] , \o_v[2][1] , \o_v[2][2] , \o_v[2][3] , \o_v[3][0] ,
         \o_v[3][1] , \o_v[3][2] , \o_v[3][3] , \i_ack[0][0] , \i_ack[0][1] ,
         \i_ack[0][2] , \i_ack[0][3] , \i_ack[1][0] , \i_ack[1][1] ,
         \i_ack[1][2] , \i_ack[1][3] , \i_ack[2][0] , \i_ack[2][1] ,
         \i_ack[2][2] , \i_ack[2][3] , \i_ack[3][0] , \i_ack[3][1] ,
         \i_ack[3][2] , \i_ack[3][3] , \e[0][0][36] , \e[0][0][35] ,
         \e[0][0][34] , \e[0][0][33] , \e[0][0][32] , \e[0][0][31] ,
         \e[0][0][30] , \e[0][0][29] , \e[0][0][28] , \e[0][0][27] ,
         \e[0][0][26] , \e[0][0][25] , \e[0][0][24] , \e[0][0][23] ,
         \e[0][0][22] , \e[0][0][21] , \e[0][0][20] , \e[0][0][19] ,
         \e[0][0][18] , \e[0][0][17] , \e[0][0][16] , \e[0][0][15] ,
         \e[0][0][14] , \e[0][0][13] , \e[0][0][12] , \e[0][0][11] ,
         \e[0][0][10] , \e[0][0][9] , \e[0][0][8] , \e[0][0][7] , \e[0][0][6] ,
         \e[0][0][5] , \e[0][0][4] , \e[0][0][3] , \e[0][0][2] , \e[0][0][1] ,
         \e[0][0][0] , \e[0][1][36] , \e[0][1][35] , \e[0][1][34] ,
         \e[0][1][33] , \e[0][1][32] , \e[0][1][31] , \e[0][1][30] ,
         \e[0][1][29] , \e[0][1][28] , \e[0][1][27] , \e[0][1][26] ,
         \e[0][1][25] , \e[0][1][24] , \e[0][1][23] , \e[0][1][22] ,
         \e[0][1][21] , \e[0][1][20] , \e[0][1][19] , \e[0][1][18] ,
         \e[0][1][17] , \e[0][1][16] , \e[0][1][15] , \e[0][1][14] ,
         \e[0][1][13] , \e[0][1][12] , \e[0][1][11] , \e[0][1][10] ,
         \e[0][1][9] , \e[0][1][8] , \e[0][1][7] , \e[0][1][6] , \e[0][1][5] ,
         \e[0][1][4] , \e[0][1][3] , \e[0][1][2] , \e[0][1][1] , \e[0][1][0] ,
         \e[0][2][36] , \e[0][2][35] , \e[0][2][34] , \e[0][2][33] ,
         \e[0][2][32] , \e[0][2][31] , \e[0][2][30] , \e[0][2][29] ,
         \e[0][2][28] , \e[0][2][27] , \e[0][2][26] , \e[0][2][25] ,
         \e[0][2][24] , \e[0][2][23] , \e[0][2][22] , \e[0][2][21] ,
         \e[0][2][20] , \e[0][2][19] , \e[0][2][18] , \e[0][2][17] ,
         \e[0][2][16] , \e[0][2][15] , \e[0][2][14] , \e[0][2][13] ,
         \e[0][2][12] , \e[0][2][11] , \e[0][2][10] , \e[0][2][9] ,
         \e[0][2][8] , \e[0][2][7] , \e[0][2][6] , \e[0][2][5] , \e[0][2][4] ,
         \e[0][2][3] , \e[0][2][2] , \e[0][2][1] , \e[0][2][0] , \e[0][3][36] ,
         \e[0][3][35] , \e[0][3][34] , \e[0][3][33] , \e[0][3][32] ,
         \e[0][3][31] , \e[0][3][30] , \e[0][3][29] , \e[0][3][28] ,
         \e[0][3][27] , \e[0][3][26] , \e[0][3][25] , \e[0][3][24] ,
         \e[0][3][23] , \e[0][3][22] , \e[0][3][21] , \e[0][3][20] ,
         \e[0][3][19] , \e[0][3][18] , \e[0][3][17] , \e[0][3][16] ,
         \e[0][3][15] , \e[0][3][14] , \e[0][3][13] , \e[0][3][12] ,
         \e[0][3][11] , \e[0][3][10] , \e[0][3][9] , \e[0][3][8] ,
         \e[0][3][7] , \e[0][3][6] , \e[0][3][5] , \e[0][3][4] , \e[0][3][3] ,
         \e[0][3][2] , \e[0][3][1] , \e[0][3][0] , \e[1][0][36] ,
         \e[1][0][35] , \e[1][0][34] , \e[1][0][33] , \e[1][0][32] ,
         \e[1][0][31] , \e[1][0][30] , \e[1][0][29] , \e[1][0][28] ,
         \e[1][0][27] , \e[1][0][26] , \e[1][0][25] , \e[1][0][24] ,
         \e[1][0][23] , \e[1][0][22] , \e[1][0][21] , \e[1][0][20] ,
         \e[1][0][19] , \e[1][0][18] , \e[1][0][17] , \e[1][0][16] ,
         \e[1][0][15] , \e[1][0][14] , \e[1][0][13] , \e[1][0][12] ,
         \e[1][0][11] , \e[1][0][10] , \e[1][0][9] , \e[1][0][8] ,
         \e[1][0][7] , \e[1][0][6] , \e[1][0][5] , \e[1][0][4] , \e[1][0][3] ,
         \e[1][0][2] , \e[1][0][1] , \e[1][0][0] , \e[1][1][36] ,
         \e[1][1][35] , \e[1][1][34] , \e[1][1][33] , \e[1][1][32] ,
         \e[1][1][31] , \e[1][1][30] , \e[1][1][29] , \e[1][1][28] ,
         \e[1][1][27] , \e[1][1][26] , \e[1][1][25] , \e[1][1][24] ,
         \e[1][1][23] , \e[1][1][22] , \e[1][1][21] , \e[1][1][20] ,
         \e[1][1][19] , \e[1][1][18] , \e[1][1][17] , \e[1][1][16] ,
         \e[1][1][15] , \e[1][1][14] , \e[1][1][13] , \e[1][1][12] ,
         \e[1][1][11] , \e[1][1][10] , \e[1][1][9] , \e[1][1][8] ,
         \e[1][1][7] , \e[1][1][6] , \e[1][1][5] , \e[1][1][4] , \e[1][1][3] ,
         \e[1][1][2] , \e[1][1][1] , \e[1][1][0] , \e[1][2][36] ,
         \e[1][2][35] , \e[1][2][34] , \e[1][2][33] , \e[1][2][32] ,
         \e[1][2][31] , \e[1][2][30] , \e[1][2][29] , \e[1][2][28] ,
         \e[1][2][27] , \e[1][2][26] , \e[1][2][25] , \e[1][2][24] ,
         \e[1][2][23] , \e[1][2][22] , \e[1][2][21] , \e[1][2][20] ,
         \e[1][2][19] , \e[1][2][18] , \e[1][2][17] , \e[1][2][16] ,
         \e[1][2][15] , \e[1][2][14] , \e[1][2][13] , \e[1][2][12] ,
         \e[1][2][11] , \e[1][2][10] , \e[1][2][9] , \e[1][2][8] ,
         \e[1][2][7] , \e[1][2][6] , \e[1][2][5] , \e[1][2][4] , \e[1][2][3] ,
         \e[1][2][2] , \e[1][2][1] , \e[1][2][0] , \e[1][3][36] ,
         \e[1][3][35] , \e[1][3][34] , \e[1][3][33] , \e[1][3][32] ,
         \e[1][3][31] , \e[1][3][30] , \e[1][3][29] , \e[1][3][28] ,
         \e[1][3][27] , \e[1][3][26] , \e[1][3][25] , \e[1][3][24] ,
         \e[1][3][23] , \e[1][3][22] , \e[1][3][21] , \e[1][3][20] ,
         \e[1][3][19] , \e[1][3][18] , \e[1][3][17] , \e[1][3][16] ,
         \e[1][3][15] , \e[1][3][14] , \e[1][3][13] , \e[1][3][12] ,
         \e[1][3][11] , \e[1][3][10] , \e[1][3][9] , \e[1][3][8] ,
         \e[1][3][7] , \e[1][3][6] , \e[1][3][5] , \e[1][3][4] , \e[1][3][3] ,
         \e[1][3][2] , \e[1][3][1] , \e[1][3][0] , \e[2][0][36] ,
         \e[2][0][35] , \e[2][0][34] , \e[2][0][33] , \e[2][0][32] ,
         \e[2][0][31] , \e[2][0][30] , \e[2][0][29] , \e[2][0][28] ,
         \e[2][0][27] , \e[2][0][26] , \e[2][0][25] , \e[2][0][24] ,
         \e[2][0][23] , \e[2][0][22] , \e[2][0][21] , \e[2][0][20] ,
         \e[2][0][19] , \e[2][0][18] , \e[2][0][17] , \e[2][0][16] ,
         \e[2][0][15] , \e[2][0][14] , \e[2][0][13] , \e[2][0][12] ,
         \e[2][0][11] , \e[2][0][10] , \e[2][0][9] , \e[2][0][8] ,
         \e[2][0][7] , \e[2][0][6] , \e[2][0][5] , \e[2][0][4] , \e[2][0][3] ,
         \e[2][0][2] , \e[2][0][1] , \e[2][0][0] , \e[2][1][36] ,
         \e[2][1][35] , \e[2][1][34] , \e[2][1][33] , \e[2][1][32] ,
         \e[2][1][31] , \e[2][1][30] , \e[2][1][29] , \e[2][1][28] ,
         \e[2][1][27] , \e[2][1][26] , \e[2][1][25] , \e[2][1][24] ,
         \e[2][1][23] , \e[2][1][22] , \e[2][1][21] , \e[2][1][20] ,
         \e[2][1][19] , \e[2][1][18] , \e[2][1][17] , \e[2][1][16] ,
         \e[2][1][15] , \e[2][1][14] , \e[2][1][13] , \e[2][1][12] ,
         \e[2][1][11] , \e[2][1][10] , \e[2][1][9] , \e[2][1][8] ,
         \e[2][1][7] , \e[2][1][6] , \e[2][1][5] , \e[2][1][4] , \e[2][1][3] ,
         \e[2][1][2] , \e[2][1][1] , \e[2][1][0] , \e[2][2][36] ,
         \e[2][2][35] , \e[2][2][34] , \e[2][2][33] , \e[2][2][32] ,
         \e[2][2][31] , \e[2][2][30] , \e[2][2][29] , \e[2][2][28] ,
         \e[2][2][27] , \e[2][2][26] , \e[2][2][25] , \e[2][2][24] ,
         \e[2][2][23] , \e[2][2][22] , \e[2][2][21] , \e[2][2][20] ,
         \e[2][2][19] , \e[2][2][18] , \e[2][2][17] , \e[2][2][16] ,
         \e[2][2][15] , \e[2][2][14] , \e[2][2][13] , \e[2][2][12] ,
         \e[2][2][11] , \e[2][2][10] , \e[2][2][9] , \e[2][2][8] ,
         \e[2][2][7] , \e[2][2][6] , \e[2][2][5] , \e[2][2][4] , \e[2][2][3] ,
         \e[2][2][2] , \e[2][2][1] , \e[2][2][0] , \e[2][3][36] ,
         \e[2][3][35] , \e[2][3][34] , \e[2][3][33] , \e[2][3][32] ,
         \e[2][3][31] , \e[2][3][30] , \e[2][3][29] , \e[2][3][28] ,
         \e[2][3][27] , \e[2][3][26] , \e[2][3][25] , \e[2][3][24] ,
         \e[2][3][23] , \e[2][3][22] , \e[2][3][21] , \e[2][3][20] ,
         \e[2][3][19] , \e[2][3][18] , \e[2][3][17] , \e[2][3][16] ,
         \e[2][3][15] , \e[2][3][14] , \e[2][3][13] , \e[2][3][12] ,
         \e[2][3][11] , \e[2][3][10] , \e[2][3][9] , \e[2][3][8] ,
         \e[2][3][7] , \e[2][3][6] , \e[2][3][5] , \e[2][3][4] , \e[2][3][3] ,
         \e[2][3][2] , \e[2][3][1] , \e[2][3][0] , \e[3][0][36] ,
         \e[3][0][35] , \e[3][0][34] , \e[3][0][33] , \e[3][0][32] ,
         \e[3][0][31] , \e[3][0][30] , \e[3][0][29] , \e[3][0][28] ,
         \e[3][0][27] , \e[3][0][26] , \e[3][0][25] , \e[3][0][24] ,
         \e[3][0][23] , \e[3][0][22] , \e[3][0][21] , \e[3][0][20] ,
         \e[3][0][19] , \e[3][0][18] , \e[3][0][17] , \e[3][0][16] ,
         \e[3][0][15] , \e[3][0][14] , \e[3][0][13] , \e[3][0][12] ,
         \e[3][0][11] , \e[3][0][10] , \e[3][0][9] , \e[3][0][8] ,
         \e[3][0][7] , \e[3][0][6] , \e[3][0][5] , \e[3][0][4] , \e[3][0][3] ,
         \e[3][0][2] , \e[3][0][1] , \e[3][0][0] , \e[3][1][36] ,
         \e[3][1][35] , \e[3][1][34] , \e[3][1][33] , \e[3][1][32] ,
         \e[3][1][31] , \e[3][1][30] , \e[3][1][29] , \e[3][1][28] ,
         \e[3][1][27] , \e[3][1][26] , \e[3][1][25] , \e[3][1][24] ,
         \e[3][1][23] , \e[3][1][22] , \e[3][1][21] , \e[3][1][20] ,
         \e[3][1][19] , \e[3][1][18] , \e[3][1][17] , \e[3][1][16] ,
         \e[3][1][15] , \e[3][1][14] , \e[3][1][13] , \e[3][1][12] ,
         \e[3][1][11] , \e[3][1][10] , \e[3][1][9] , \e[3][1][8] ,
         \e[3][1][7] , \e[3][1][6] , \e[3][1][5] , \e[3][1][4] , \e[3][1][3] ,
         \e[3][1][2] , \e[3][1][1] , \e[3][1][0] , \e[3][2][36] ,
         \e[3][2][35] , \e[3][2][34] , \e[3][2][33] , \e[3][2][32] ,
         \e[3][2][31] , \e[3][2][30] , \e[3][2][29] , \e[3][2][28] ,
         \e[3][2][27] , \e[3][2][26] , \e[3][2][25] , \e[3][2][24] ,
         \e[3][2][23] , \e[3][2][22] , \e[3][2][21] , \e[3][2][20] ,
         \e[3][2][19] , \e[3][2][18] , \e[3][2][17] , \e[3][2][16] ,
         \e[3][2][15] , \e[3][2][14] , \e[3][2][13] , \e[3][2][12] ,
         \e[3][2][11] , \e[3][2][10] , \e[3][2][9] , \e[3][2][8] ,
         \e[3][2][7] , \e[3][2][6] , \e[3][2][5] , \e[3][2][4] , \e[3][2][3] ,
         \e[3][2][2] , \e[3][2][1] , \e[3][2][0] , \e[3][3][36] ,
         \e[3][3][35] , \e[3][3][34] , \e[3][3][33] , \e[3][3][32] ,
         \e[3][3][31] , \e[3][3][30] , \e[3][3][29] , \e[3][3][28] ,
         \e[3][3][27] , \e[3][3][26] , \e[3][3][25] , \e[3][3][24] ,
         \e[3][3][23] , \e[3][3][22] , \e[3][3][21] , \e[3][3][20] ,
         \e[3][3][19] , \e[3][3][18] , \e[3][3][17] , \e[3][3][16] ,
         \e[3][3][15] , \e[3][3][14] , \e[3][3][13] , \e[3][3][12] ,
         \e[3][3][11] , \e[3][3][10] , \e[3][3][9] , \e[3][3][8] ,
         \e[3][3][7] , \e[3][3][6] , \e[3][3][5] , \e[3][3][4] , \e[3][3][3] ,
         \e[3][3][2] , \e[3][3][1] , \e[3][3][0] , \w[0][0][36] ,
         \w[0][0][35] , \w[0][0][34] , \w[0][0][33] , \w[0][0][32] ,
         \w[0][0][31] , \w[0][0][30] , \w[0][0][29] , \w[0][0][28] ,
         \w[0][0][27] , \w[0][0][26] , \w[0][0][25] , \w[0][0][24] ,
         \w[0][0][23] , \w[0][0][22] , \w[0][0][21] , \w[0][0][20] ,
         \w[0][0][19] , \w[0][0][18] , \w[0][0][17] , \w[0][0][16] ,
         \w[0][0][15] , \w[0][0][14] , \w[0][0][13] , \w[0][0][12] ,
         \w[0][0][11] , \w[0][0][10] , \w[0][0][9] , \w[0][0][8] ,
         \w[0][0][7] , \w[0][0][6] , \w[0][0][5] , \w[0][0][4] , \w[0][0][3] ,
         \w[0][0][2] , \w[0][0][1] , \w[0][0][0] , \w[0][1][36] ,
         \w[0][1][35] , \w[0][1][34] , \w[0][1][33] , \w[0][1][32] ,
         \w[0][1][31] , \w[0][1][30] , \w[0][1][29] , \w[0][1][28] ,
         \w[0][1][27] , \w[0][1][26] , \w[0][1][25] , \w[0][1][24] ,
         \w[0][1][23] , \w[0][1][22] , \w[0][1][21] , \w[0][1][20] ,
         \w[0][1][19] , \w[0][1][18] , \w[0][1][17] , \w[0][1][16] ,
         \w[0][1][15] , \w[0][1][14] , \w[0][1][13] , \w[0][1][12] ,
         \w[0][1][11] , \w[0][1][10] , \w[0][1][9] , \w[0][1][8] ,
         \w[0][1][7] , \w[0][1][6] , \w[0][1][5] , \w[0][1][4] , \w[0][1][3] ,
         \w[0][1][2] , \w[0][1][1] , \w[0][1][0] , \w[0][2][36] ,
         \w[0][2][35] , \w[0][2][34] , \w[0][2][33] , \w[0][2][32] ,
         \w[0][2][31] , \w[0][2][30] , \w[0][2][29] , \w[0][2][28] ,
         \w[0][2][27] , \w[0][2][26] , \w[0][2][25] , \w[0][2][24] ,
         \w[0][2][23] , \w[0][2][22] , \w[0][2][21] , \w[0][2][20] ,
         \w[0][2][19] , \w[0][2][18] , \w[0][2][17] , \w[0][2][16] ,
         \w[0][2][15] , \w[0][2][14] , \w[0][2][13] , \w[0][2][12] ,
         \w[0][2][11] , \w[0][2][10] , \w[0][2][9] , \w[0][2][8] ,
         \w[0][2][7] , \w[0][2][6] , \w[0][2][5] , \w[0][2][4] , \w[0][2][3] ,
         \w[0][2][2] , \w[0][2][1] , \w[0][2][0] , \w[0][3][36] ,
         \w[0][3][35] , \w[0][3][34] , \w[0][3][33] , \w[0][3][32] ,
         \w[0][3][31] , \w[0][3][30] , \w[0][3][29] , \w[0][3][28] ,
         \w[0][3][27] , \w[0][3][26] , \w[0][3][25] , \w[0][3][24] ,
         \w[0][3][23] , \w[0][3][22] , \w[0][3][21] , \w[0][3][20] ,
         \w[0][3][19] , \w[0][3][18] , \w[0][3][17] , \w[0][3][16] ,
         \w[0][3][15] , \w[0][3][14] , \w[0][3][13] , \w[0][3][12] ,
         \w[0][3][11] , \w[0][3][10] , \w[0][3][9] , \w[0][3][8] ,
         \w[0][3][7] , \w[0][3][6] , \w[0][3][5] , \w[0][3][4] , \w[0][3][3] ,
         \w[0][3][2] , \w[0][3][1] , \w[0][3][0] , \w[1][0][36] ,
         \w[1][0][35] , \w[1][0][34] , \w[1][0][33] , \w[1][0][32] ,
         \w[1][0][31] , \w[1][0][30] , \w[1][0][29] , \w[1][0][28] ,
         \w[1][0][27] , \w[1][0][26] , \w[1][0][25] , \w[1][0][24] ,
         \w[1][0][23] , \w[1][0][22] , \w[1][0][21] , \w[1][0][20] ,
         \w[1][0][19] , \w[1][0][18] , \w[1][0][17] , \w[1][0][16] ,
         \w[1][0][15] , \w[1][0][14] , \w[1][0][13] , \w[1][0][12] ,
         \w[1][0][11] , \w[1][0][10] , \w[1][0][9] , \w[1][0][8] ,
         \w[1][0][7] , \w[1][0][6] , \w[1][0][5] , \w[1][0][4] , \w[1][0][3] ,
         \w[1][0][2] , \w[1][0][1] , \w[1][0][0] , \w[1][1][36] ,
         \w[1][1][35] , \w[1][1][34] , \w[1][1][33] , \w[1][1][32] ,
         \w[1][1][31] , \w[1][1][30] , \w[1][1][29] , \w[1][1][28] ,
         \w[1][1][27] , \w[1][1][26] , \w[1][1][25] , \w[1][1][24] ,
         \w[1][1][23] , \w[1][1][22] , \w[1][1][21] , \w[1][1][20] ,
         \w[1][1][19] , \w[1][1][18] , \w[1][1][17] , \w[1][1][16] ,
         \w[1][1][15] , \w[1][1][14] , \w[1][1][13] , \w[1][1][12] ,
         \w[1][1][11] , \w[1][1][10] , \w[1][1][9] , \w[1][1][8] ,
         \w[1][1][7] , \w[1][1][6] , \w[1][1][5] , \w[1][1][4] , \w[1][1][3] ,
         \w[1][1][2] , \w[1][1][1] , \w[1][1][0] , \w[1][2][36] ,
         \w[1][2][35] , \w[1][2][34] , \w[1][2][33] , \w[1][2][32] ,
         \w[1][2][31] , \w[1][2][30] , \w[1][2][29] , \w[1][2][28] ,
         \w[1][2][27] , \w[1][2][26] , \w[1][2][25] , \w[1][2][24] ,
         \w[1][2][23] , \w[1][2][22] , \w[1][2][21] , \w[1][2][20] ,
         \w[1][2][19] , \w[1][2][18] , \w[1][2][17] , \w[1][2][16] ,
         \w[1][2][15] , \w[1][2][14] , \w[1][2][13] , \w[1][2][12] ,
         \w[1][2][11] , \w[1][2][10] , \w[1][2][9] , \w[1][2][8] ,
         \w[1][2][7] , \w[1][2][6] , \w[1][2][5] , \w[1][2][4] , \w[1][2][3] ,
         \w[1][2][2] , \w[1][2][1] , \w[1][2][0] , \w[1][3][36] ,
         \w[1][3][35] , \w[1][3][34] , \w[1][3][33] , \w[1][3][32] ,
         \w[1][3][31] , \w[1][3][30] , \w[1][3][29] , \w[1][3][28] ,
         \w[1][3][27] , \w[1][3][26] , \w[1][3][25] , \w[1][3][24] ,
         \w[1][3][23] , \w[1][3][22] , \w[1][3][21] , \w[1][3][20] ,
         \w[1][3][19] , \w[1][3][18] , \w[1][3][17] , \w[1][3][16] ,
         \w[1][3][15] , \w[1][3][14] , \w[1][3][13] , \w[1][3][12] ,
         \w[1][3][11] , \w[1][3][10] , \w[1][3][9] , \w[1][3][8] ,
         \w[1][3][7] , \w[1][3][6] , \w[1][3][5] , \w[1][3][4] , \w[1][3][3] ,
         \w[1][3][2] , \w[1][3][1] , \w[1][3][0] , \w[2][0][36] ,
         \w[2][0][35] , \w[2][0][34] , \w[2][0][33] , \w[2][0][32] ,
         \w[2][0][31] , \w[2][0][30] , \w[2][0][29] , \w[2][0][28] ,
         \w[2][0][27] , \w[2][0][26] , \w[2][0][25] , \w[2][0][24] ,
         \w[2][0][23] , \w[2][0][22] , \w[2][0][21] , \w[2][0][20] ,
         \w[2][0][19] , \w[2][0][18] , \w[2][0][17] , \w[2][0][16] ,
         \w[2][0][15] , \w[2][0][14] , \w[2][0][13] , \w[2][0][12] ,
         \w[2][0][11] , \w[2][0][10] , \w[2][0][9] , \w[2][0][8] ,
         \w[2][0][7] , \w[2][0][6] , \w[2][0][5] , \w[2][0][4] , \w[2][0][3] ,
         \w[2][0][2] , \w[2][0][1] , \w[2][0][0] , \w[2][1][36] ,
         \w[2][1][35] , \w[2][1][34] , \w[2][1][33] , \w[2][1][32] ,
         \w[2][1][31] , \w[2][1][30] , \w[2][1][29] , \w[2][1][28] ,
         \w[2][1][27] , \w[2][1][26] , \w[2][1][25] , \w[2][1][24] ,
         \w[2][1][23] , \w[2][1][22] , \w[2][1][21] , \w[2][1][20] ,
         \w[2][1][19] , \w[2][1][18] , \w[2][1][17] , \w[2][1][16] ,
         \w[2][1][15] , \w[2][1][14] , \w[2][1][13] , \w[2][1][12] ,
         \w[2][1][11] , \w[2][1][10] , \w[2][1][9] , \w[2][1][8] ,
         \w[2][1][7] , \w[2][1][6] , \w[2][1][5] , \w[2][1][4] , \w[2][1][3] ,
         \w[2][1][2] , \w[2][1][1] , \w[2][1][0] , \w[2][2][36] ,
         \w[2][2][35] , \w[2][2][34] , \w[2][2][33] , \w[2][2][32] ,
         \w[2][2][31] , \w[2][2][30] , \w[2][2][29] , \w[2][2][28] ,
         \w[2][2][27] , \w[2][2][26] , \w[2][2][25] , \w[2][2][24] ,
         \w[2][2][23] , \w[2][2][22] , \w[2][2][21] , \w[2][2][20] ,
         \w[2][2][19] , \w[2][2][18] , \w[2][2][17] , \w[2][2][16] ,
         \w[2][2][15] , \w[2][2][14] , \w[2][2][13] , \w[2][2][12] ,
         \w[2][2][11] , \w[2][2][10] , \w[2][2][9] , \w[2][2][8] ,
         \w[2][2][7] , \w[2][2][6] , \w[2][2][5] , \w[2][2][4] , \w[2][2][3] ,
         \w[2][2][2] , \w[2][2][1] , \w[2][2][0] , \w[2][3][36] ,
         \w[2][3][35] , \w[2][3][34] , \w[2][3][33] , \w[2][3][32] ,
         \w[2][3][31] , \w[2][3][30] , \w[2][3][29] , \w[2][3][28] ,
         \w[2][3][27] , \w[2][3][26] , \w[2][3][25] , \w[2][3][24] ,
         \w[2][3][23] , \w[2][3][22] , \w[2][3][21] , \w[2][3][20] ,
         \w[2][3][19] , \w[2][3][18] , \w[2][3][17] , \w[2][3][16] ,
         \w[2][3][15] , \w[2][3][14] , \w[2][3][13] , \w[2][3][12] ,
         \w[2][3][11] , \w[2][3][10] , \w[2][3][9] , \w[2][3][8] ,
         \w[2][3][7] , \w[2][3][6] , \w[2][3][5] , \w[2][3][4] , \w[2][3][3] ,
         \w[2][3][2] , \w[2][3][1] , \w[2][3][0] , \w[3][0][36] ,
         \w[3][0][35] , \w[3][0][34] , \w[3][0][33] , \w[3][0][32] ,
         \w[3][0][31] , \w[3][0][30] , \w[3][0][29] , \w[3][0][28] ,
         \w[3][0][27] , \w[3][0][26] , \w[3][0][25] , \w[3][0][24] ,
         \w[3][0][23] , \w[3][0][22] , \w[3][0][21] , \w[3][0][20] ,
         \w[3][0][19] , \w[3][0][18] , \w[3][0][17] , \w[3][0][16] ,
         \w[3][0][15] , \w[3][0][14] , \w[3][0][13] , \w[3][0][12] ,
         \w[3][0][11] , \w[3][0][10] , \w[3][0][9] , \w[3][0][8] ,
         \w[3][0][7] , \w[3][0][6] , \w[3][0][5] , \w[3][0][4] , \w[3][0][3] ,
         \w[3][0][2] , \w[3][0][1] , \w[3][0][0] , \w[3][1][36] ,
         \w[3][1][35] , \w[3][1][34] , \w[3][1][33] , \w[3][1][32] ,
         \w[3][1][31] , \w[3][1][30] , \w[3][1][29] , \w[3][1][28] ,
         \w[3][1][27] , \w[3][1][26] , \w[3][1][25] , \w[3][1][24] ,
         \w[3][1][23] , \w[3][1][22] , \w[3][1][21] , \w[3][1][20] ,
         \w[3][1][19] , \w[3][1][18] , \w[3][1][17] , \w[3][1][16] ,
         \w[3][1][15] , \w[3][1][14] , \w[3][1][13] , \w[3][1][12] ,
         \w[3][1][11] , \w[3][1][10] , \w[3][1][9] , \w[3][1][8] ,
         \w[3][1][7] , \w[3][1][6] , \w[3][1][5] , \w[3][1][4] , \w[3][1][3] ,
         \w[3][1][2] , \w[3][1][1] , \w[3][1][0] , \w[3][2][36] ,
         \w[3][2][35] , \w[3][2][34] , \w[3][2][33] , \w[3][2][32] ,
         \w[3][2][31] , \w[3][2][30] , \w[3][2][29] , \w[3][2][28] ,
         \w[3][2][27] , \w[3][2][26] , \w[3][2][25] , \w[3][2][24] ,
         \w[3][2][23] , \w[3][2][22] , \w[3][2][21] , \w[3][2][20] ,
         \w[3][2][19] , \w[3][2][18] , \w[3][2][17] , \w[3][2][16] ,
         \w[3][2][15] , \w[3][2][14] , \w[3][2][13] , \w[3][2][12] ,
         \w[3][2][11] , \w[3][2][10] , \w[3][2][9] , \w[3][2][8] ,
         \w[3][2][7] , \w[3][2][6] , \w[3][2][5] , \w[3][2][4] , \w[3][2][3] ,
         \w[3][2][2] , \w[3][2][1] , \w[3][2][0] , \w[3][3][36] ,
         \w[3][3][35] , \w[3][3][34] , \w[3][3][33] , \w[3][3][32] ,
         \w[3][3][31] , \w[3][3][30] , \w[3][3][29] , \w[3][3][28] ,
         \w[3][3][27] , \w[3][3][26] , \w[3][3][25] , \w[3][3][24] ,
         \w[3][3][23] , \w[3][3][22] , \w[3][3][21] , \w[3][3][20] ,
         \w[3][3][19] , \w[3][3][18] , \w[3][3][17] , \w[3][3][16] ,
         \w[3][3][15] , \w[3][3][14] , \w[3][3][13] , \w[3][3][12] ,
         \w[3][3][11] , \w[3][3][10] , \w[3][3][9] , \w[3][3][8] ,
         \w[3][3][7] , \w[3][3][6] , \w[3][3][5] , \w[3][3][4] , \w[3][3][3] ,
         \w[3][3][2] , \w[3][3][1] , \w[3][3][0] , \n[0][0][36] ,
         \n[0][0][35] , \n[0][0][34] , \n[0][0][33] , \n[0][0][32] ,
         \n[0][0][31] , \n[0][0][30] , \n[0][0][29] , \n[0][0][28] ,
         \n[0][0][27] , \n[0][0][26] , \n[0][0][25] , \n[0][0][24] ,
         \n[0][0][23] , \n[0][0][22] , \n[0][0][21] , \n[0][0][20] ,
         \n[0][0][19] , \n[0][0][18] , \n[0][0][17] , \n[0][0][16] ,
         \n[0][0][15] , \n[0][0][14] , \n[0][0][13] , \n[0][0][12] ,
         \n[0][0][11] , \n[0][0][10] , \n[0][0][9] , \n[0][0][8] ,
         \n[0][0][7] , \n[0][0][6] , \n[0][0][5] , \n[0][0][4] , \n[0][0][3] ,
         \n[0][0][2] , \n[0][0][1] , \n[0][0][0] , \n[0][1][36] ,
         \n[0][1][35] , \n[0][1][34] , \n[0][1][33] , \n[0][1][32] ,
         \n[0][1][31] , \n[0][1][30] , \n[0][1][29] , \n[0][1][28] ,
         \n[0][1][27] , \n[0][1][26] , \n[0][1][25] , \n[0][1][24] ,
         \n[0][1][23] , \n[0][1][22] , \n[0][1][21] , \n[0][1][20] ,
         \n[0][1][19] , \n[0][1][18] , \n[0][1][17] , \n[0][1][16] ,
         \n[0][1][15] , \n[0][1][14] , \n[0][1][13] , \n[0][1][12] ,
         \n[0][1][11] , \n[0][1][10] , \n[0][1][9] , \n[0][1][8] ,
         \n[0][1][7] , \n[0][1][6] , \n[0][1][5] , \n[0][1][4] , \n[0][1][3] ,
         \n[0][1][2] , \n[0][1][1] , \n[0][1][0] , \n[0][2][36] ,
         \n[0][2][35] , \n[0][2][34] , \n[0][2][33] , \n[0][2][32] ,
         \n[0][2][31] , \n[0][2][30] , \n[0][2][29] , \n[0][2][28] ,
         \n[0][2][27] , \n[0][2][26] , \n[0][2][25] , \n[0][2][24] ,
         \n[0][2][23] , \n[0][2][22] , \n[0][2][21] , \n[0][2][20] ,
         \n[0][2][19] , \n[0][2][18] , \n[0][2][17] , \n[0][2][16] ,
         \n[0][2][15] , \n[0][2][14] , \n[0][2][13] , \n[0][2][12] ,
         \n[0][2][11] , \n[0][2][10] , \n[0][2][9] , \n[0][2][8] ,
         \n[0][2][7] , \n[0][2][6] , \n[0][2][5] , \n[0][2][4] , \n[0][2][3] ,
         \n[0][2][2] , \n[0][2][1] , \n[0][2][0] , \n[0][3][36] ,
         \n[0][3][35] , \n[0][3][34] , \n[0][3][33] , \n[0][3][32] ,
         \n[0][3][31] , \n[0][3][30] , \n[0][3][29] , \n[0][3][28] ,
         \n[0][3][27] , \n[0][3][26] , \n[0][3][25] , \n[0][3][24] ,
         \n[0][3][23] , \n[0][3][22] , \n[0][3][21] , \n[0][3][20] ,
         \n[0][3][19] , \n[0][3][18] , \n[0][3][17] , \n[0][3][16] ,
         \n[0][3][15] , \n[0][3][14] , \n[0][3][13] , \n[0][3][12] ,
         \n[0][3][11] , \n[0][3][10] , \n[0][3][9] , \n[0][3][8] ,
         \n[0][3][7] , \n[0][3][6] , \n[0][3][5] , \n[0][3][4] , \n[0][3][3] ,
         \n[0][3][2] , \n[0][3][1] , \n[0][3][0] , \n[1][0][36] ,
         \n[1][0][35] , \n[1][0][34] , \n[1][0][33] , \n[1][0][32] ,
         \n[1][0][31] , \n[1][0][30] , \n[1][0][29] , \n[1][0][28] ,
         \n[1][0][27] , \n[1][0][26] , \n[1][0][25] , \n[1][0][24] ,
         \n[1][0][23] , \n[1][0][22] , \n[1][0][21] , \n[1][0][20] ,
         \n[1][0][19] , \n[1][0][18] , \n[1][0][17] , \n[1][0][16] ,
         \n[1][0][15] , \n[1][0][14] , \n[1][0][13] , \n[1][0][12] ,
         \n[1][0][11] , \n[1][0][10] , \n[1][0][9] , \n[1][0][8] ,
         \n[1][0][7] , \n[1][0][6] , \n[1][0][5] , \n[1][0][4] , \n[1][0][3] ,
         \n[1][0][2] , \n[1][0][1] , \n[1][0][0] , \n[1][1][36] ,
         \n[1][1][35] , \n[1][1][34] , \n[1][1][33] , \n[1][1][32] ,
         \n[1][1][31] , \n[1][1][30] , \n[1][1][29] , \n[1][1][28] ,
         \n[1][1][27] , \n[1][1][26] , \n[1][1][25] , \n[1][1][24] ,
         \n[1][1][23] , \n[1][1][22] , \n[1][1][21] , \n[1][1][20] ,
         \n[1][1][19] , \n[1][1][18] , \n[1][1][17] , \n[1][1][16] ,
         \n[1][1][15] , \n[1][1][14] , \n[1][1][13] , \n[1][1][12] ,
         \n[1][1][11] , \n[1][1][10] , \n[1][1][9] , \n[1][1][8] ,
         \n[1][1][7] , \n[1][1][6] , \n[1][1][5] , \n[1][1][4] , \n[1][1][3] ,
         \n[1][1][2] , \n[1][1][1] , \n[1][1][0] , \n[1][2][36] ,
         \n[1][2][35] , \n[1][2][34] , \n[1][2][33] , \n[1][2][32] ,
         \n[1][2][31] , \n[1][2][30] , \n[1][2][29] , \n[1][2][28] ,
         \n[1][2][27] , \n[1][2][26] , \n[1][2][25] , \n[1][2][24] ,
         \n[1][2][23] , \n[1][2][22] , \n[1][2][21] , \n[1][2][20] ,
         \n[1][2][19] , \n[1][2][18] , \n[1][2][17] , \n[1][2][16] ,
         \n[1][2][15] , \n[1][2][14] , \n[1][2][13] , \n[1][2][12] ,
         \n[1][2][11] , \n[1][2][10] , \n[1][2][9] , \n[1][2][8] ,
         \n[1][2][7] , \n[1][2][6] , \n[1][2][5] , \n[1][2][4] , \n[1][2][3] ,
         \n[1][2][2] , \n[1][2][1] , \n[1][2][0] , \n[1][3][36] ,
         \n[1][3][35] , \n[1][3][34] , \n[1][3][33] , \n[1][3][32] ,
         \n[1][3][31] , \n[1][3][30] , \n[1][3][29] , \n[1][3][28] ,
         \n[1][3][27] , \n[1][3][26] , \n[1][3][25] , \n[1][3][24] ,
         \n[1][3][23] , \n[1][3][22] , \n[1][3][21] , \n[1][3][20] ,
         \n[1][3][19] , \n[1][3][18] , \n[1][3][17] , \n[1][3][16] ,
         \n[1][3][15] , \n[1][3][14] , \n[1][3][13] , \n[1][3][12] ,
         \n[1][3][11] , \n[1][3][10] , \n[1][3][9] , \n[1][3][8] ,
         \n[1][3][7] , \n[1][3][6] , \n[1][3][5] , \n[1][3][4] , \n[1][3][3] ,
         \n[1][3][2] , \n[1][3][1] , \n[1][3][0] , \n[2][0][36] ,
         \n[2][0][35] , \n[2][0][34] , \n[2][0][33] , \n[2][0][32] ,
         \n[2][0][31] , \n[2][0][30] , \n[2][0][29] , \n[2][0][28] ,
         \n[2][0][27] , \n[2][0][26] , \n[2][0][25] , \n[2][0][24] ,
         \n[2][0][23] , \n[2][0][22] , \n[2][0][21] , \n[2][0][20] ,
         \n[2][0][19] , \n[2][0][18] , \n[2][0][17] , \n[2][0][16] ,
         \n[2][0][15] , \n[2][0][14] , \n[2][0][13] , \n[2][0][12] ,
         \n[2][0][11] , \n[2][0][10] , \n[2][0][9] , \n[2][0][8] ,
         \n[2][0][7] , \n[2][0][6] , \n[2][0][5] , \n[2][0][4] , \n[2][0][3] ,
         \n[2][0][2] , \n[2][0][1] , \n[2][0][0] , \n[2][1][36] ,
         \n[2][1][35] , \n[2][1][34] , \n[2][1][33] , \n[2][1][32] ,
         \n[2][1][31] , \n[2][1][30] , \n[2][1][29] , \n[2][1][28] ,
         \n[2][1][27] , \n[2][1][26] , \n[2][1][25] , \n[2][1][24] ,
         \n[2][1][23] , \n[2][1][22] , \n[2][1][21] , \n[2][1][20] ,
         \n[2][1][19] , \n[2][1][18] , \n[2][1][17] , \n[2][1][16] ,
         \n[2][1][15] , \n[2][1][14] , \n[2][1][13] , \n[2][1][12] ,
         \n[2][1][11] , \n[2][1][10] , \n[2][1][9] , \n[2][1][8] ,
         \n[2][1][7] , \n[2][1][6] , \n[2][1][5] , \n[2][1][4] , \n[2][1][3] ,
         \n[2][1][2] , \n[2][1][1] , \n[2][1][0] , \n[2][2][36] ,
         \n[2][2][35] , \n[2][2][34] , \n[2][2][33] , \n[2][2][32] ,
         \n[2][2][31] , \n[2][2][30] , \n[2][2][29] , \n[2][2][28] ,
         \n[2][2][27] , \n[2][2][26] , \n[2][2][25] , \n[2][2][24] ,
         \n[2][2][23] , \n[2][2][22] , \n[2][2][21] , \n[2][2][20] ,
         \n[2][2][19] , \n[2][2][18] , \n[2][2][17] , \n[2][2][16] ,
         \n[2][2][15] , \n[2][2][14] , \n[2][2][13] , \n[2][2][12] ,
         \n[2][2][11] , \n[2][2][10] , \n[2][2][9] , \n[2][2][8] ,
         \n[2][2][7] , \n[2][2][6] , \n[2][2][5] , \n[2][2][4] , \n[2][2][3] ,
         \n[2][2][2] , \n[2][2][1] , \n[2][2][0] , \n[2][3][36] ,
         \n[2][3][35] , \n[2][3][34] , \n[2][3][33] , \n[2][3][32] ,
         \n[2][3][31] , \n[2][3][30] , \n[2][3][29] , \n[2][3][28] ,
         \n[2][3][27] , \n[2][3][26] , \n[2][3][25] , \n[2][3][24] ,
         \n[2][3][23] , \n[2][3][22] , \n[2][3][21] , \n[2][3][20] ,
         \n[2][3][19] , \n[2][3][18] , \n[2][3][17] , \n[2][3][16] ,
         \n[2][3][15] , \n[2][3][14] , \n[2][3][13] , \n[2][3][12] ,
         \n[2][3][11] , \n[2][3][10] , \n[2][3][9] , \n[2][3][8] ,
         \n[2][3][7] , \n[2][3][6] , \n[2][3][5] , \n[2][3][4] , \n[2][3][3] ,
         \n[2][3][2] , \n[2][3][1] , \n[2][3][0] , \n[3][0][36] ,
         \n[3][0][35] , \n[3][0][34] , \n[3][0][33] , \n[3][0][32] ,
         \n[3][0][31] , \n[3][0][30] , \n[3][0][29] , \n[3][0][28] ,
         \n[3][0][27] , \n[3][0][26] , \n[3][0][25] , \n[3][0][24] ,
         \n[3][0][23] , \n[3][0][22] , \n[3][0][21] , \n[3][0][20] ,
         \n[3][0][19] , \n[3][0][18] , \n[3][0][17] , \n[3][0][16] ,
         \n[3][0][15] , \n[3][0][14] , \n[3][0][13] , \n[3][0][12] ,
         \n[3][0][11] , \n[3][0][10] , \n[3][0][9] , \n[3][0][8] ,
         \n[3][0][7] , \n[3][0][6] , \n[3][0][5] , \n[3][0][4] , \n[3][0][3] ,
         \n[3][0][2] , \n[3][0][1] , \n[3][0][0] , \n[3][1][36] ,
         \n[3][1][35] , \n[3][1][34] , \n[3][1][33] , \n[3][1][32] ,
         \n[3][1][31] , \n[3][1][30] , \n[3][1][29] , \n[3][1][28] ,
         \n[3][1][27] , \n[3][1][26] , \n[3][1][25] , \n[3][1][24] ,
         \n[3][1][23] , \n[3][1][22] , \n[3][1][21] , \n[3][1][20] ,
         \n[3][1][19] , \n[3][1][18] , \n[3][1][17] , \n[3][1][16] ,
         \n[3][1][15] , \n[3][1][14] , \n[3][1][13] , \n[3][1][12] ,
         \n[3][1][11] , \n[3][1][10] , \n[3][1][9] , \n[3][1][8] ,
         \n[3][1][7] , \n[3][1][6] , \n[3][1][5] , \n[3][1][4] , \n[3][1][3] ,
         \n[3][1][2] , \n[3][1][1] , \n[3][1][0] , \n[3][2][36] ,
         \n[3][2][35] , \n[3][2][34] , \n[3][2][33] , \n[3][2][32] ,
         \n[3][2][31] , \n[3][2][30] , \n[3][2][29] , \n[3][2][28] ,
         \n[3][2][27] , \n[3][2][26] , \n[3][2][25] , \n[3][2][24] ,
         \n[3][2][23] , \n[3][2][22] , \n[3][2][21] , \n[3][2][20] ,
         \n[3][2][19] , \n[3][2][18] , \n[3][2][17] , \n[3][2][16] ,
         \n[3][2][15] , \n[3][2][14] , \n[3][2][13] , \n[3][2][12] ,
         \n[3][2][11] , \n[3][2][10] , \n[3][2][9] , \n[3][2][8] ,
         \n[3][2][7] , \n[3][2][6] , \n[3][2][5] , \n[3][2][4] , \n[3][2][3] ,
         \n[3][2][2] , \n[3][2][1] , \n[3][2][0] , \n[3][3][36] ,
         \n[3][3][35] , \n[3][3][34] , \n[3][3][33] , \n[3][3][32] ,
         \n[3][3][31] , \n[3][3][30] , \n[3][3][29] , \n[3][3][28] ,
         \n[3][3][27] , \n[3][3][26] , \n[3][3][25] , \n[3][3][24] ,
         \n[3][3][23] , \n[3][3][22] , \n[3][3][21] , \n[3][3][20] ,
         \n[3][3][19] , \n[3][3][18] , \n[3][3][17] , \n[3][3][16] ,
         \n[3][3][15] , \n[3][3][14] , \n[3][3][13] , \n[3][3][12] ,
         \n[3][3][11] , \n[3][3][10] , \n[3][3][9] , \n[3][3][8] ,
         \n[3][3][7] , \n[3][3][6] , \n[3][3][5] , \n[3][3][4] , \n[3][3][3] ,
         \n[3][3][2] , \n[3][3][1] , \n[3][3][0] ;
  tri   \s_tx[0][0][36] ;
  tri   \s_tx[0][0][35] ;
  tri   \s_tx[0][0][34] ;
  tri   \s_tx[0][0][33] ;
  tri   \s_tx[0][0][32] ;
  tri   \s_tx[0][0][31] ;
  tri   \s_tx[0][0][30] ;
  tri   \s_tx[0][0][29] ;
  tri   \s_tx[0][0][28] ;
  tri   \s_tx[0][0][27] ;
  tri   \s_tx[0][0][26] ;
  tri   \s_tx[0][0][25] ;
  tri   \s_tx[0][0][24] ;
  tri   \s_tx[0][0][23] ;
  tri   \s_tx[0][0][22] ;
  tri   \s_tx[0][0][21] ;
  tri   \s_tx[0][0][20] ;
  tri   \s_tx[0][0][19] ;
  tri   \s_tx[0][0][18] ;
  tri   \s_tx[0][0][17] ;
  tri   \s_tx[0][0][16] ;
  tri   \s_tx[0][0][15] ;
  tri   \s_tx[0][0][14] ;
  tri   \s_tx[0][0][13] ;
  tri   \s_tx[0][0][12] ;
  tri   \s_tx[0][0][11] ;
  tri   \s_tx[0][0][10] ;
  tri   \s_tx[0][0][9] ;
  tri   \s_tx[0][0][8] ;
  tri   \s_tx[0][0][7] ;
  tri   \s_tx[0][0][6] ;
  tri   \s_tx[0][0][5] ;
  tri   \s_tx[0][0][4] ;
  tri   \s_tx[0][0][3] ;
  tri   \s_tx[0][0][2] ;
  tri   \s_tx[0][0][1] ;
  tri   \s_tx[0][0][0] ;
  tri   \s_tx[0][1][36] ;
  tri   \s_tx[0][1][35] ;
  tri   \s_tx[0][1][34] ;
  tri   \s_tx[0][1][33] ;
  tri   \s_tx[0][1][32] ;
  tri   \s_tx[0][1][31] ;
  tri   \s_tx[0][1][30] ;
  tri   \s_tx[0][1][29] ;
  tri   \s_tx[0][1][28] ;
  tri   \s_tx[0][1][27] ;
  tri   \s_tx[0][1][26] ;
  tri   \s_tx[0][1][25] ;
  tri   \s_tx[0][1][24] ;
  tri   \s_tx[0][1][23] ;
  tri   \s_tx[0][1][22] ;
  tri   \s_tx[0][1][21] ;
  tri   \s_tx[0][1][20] ;
  tri   \s_tx[0][1][19] ;
  tri   \s_tx[0][1][18] ;
  tri   \s_tx[0][1][17] ;
  tri   \s_tx[0][1][16] ;
  tri   \s_tx[0][1][15] ;
  tri   \s_tx[0][1][14] ;
  tri   \s_tx[0][1][13] ;
  tri   \s_tx[0][1][12] ;
  tri   \s_tx[0][1][11] ;
  tri   \s_tx[0][1][10] ;
  tri   \s_tx[0][1][9] ;
  tri   \s_tx[0][1][8] ;
  tri   \s_tx[0][1][7] ;
  tri   \s_tx[0][1][6] ;
  tri   \s_tx[0][1][5] ;
  tri   \s_tx[0][1][4] ;
  tri   \s_tx[0][1][3] ;
  tri   \s_tx[0][1][2] ;
  tri   \s_tx[0][1][1] ;
  tri   \s_tx[0][1][0] ;
  tri   \s_tx[0][2][36] ;
  tri   \s_tx[0][2][35] ;
  tri   \s_tx[0][2][34] ;
  tri   \s_tx[0][2][33] ;
  tri   \s_tx[0][2][32] ;
  tri   \s_tx[0][2][31] ;
  tri   \s_tx[0][2][30] ;
  tri   \s_tx[0][2][29] ;
  tri   \s_tx[0][2][28] ;
  tri   \s_tx[0][2][27] ;
  tri   \s_tx[0][2][26] ;
  tri   \s_tx[0][2][25] ;
  tri   \s_tx[0][2][24] ;
  tri   \s_tx[0][2][23] ;
  tri   \s_tx[0][2][22] ;
  tri   \s_tx[0][2][21] ;
  tri   \s_tx[0][2][20] ;
  tri   \s_tx[0][2][19] ;
  tri   \s_tx[0][2][18] ;
  tri   \s_tx[0][2][17] ;
  tri   \s_tx[0][2][16] ;
  tri   \s_tx[0][2][15] ;
  tri   \s_tx[0][2][14] ;
  tri   \s_tx[0][2][13] ;
  tri   \s_tx[0][2][12] ;
  tri   \s_tx[0][2][11] ;
  tri   \s_tx[0][2][10] ;
  tri   \s_tx[0][2][9] ;
  tri   \s_tx[0][2][8] ;
  tri   \s_tx[0][2][7] ;
  tri   \s_tx[0][2][6] ;
  tri   \s_tx[0][2][5] ;
  tri   \s_tx[0][2][4] ;
  tri   \s_tx[0][2][3] ;
  tri   \s_tx[0][2][2] ;
  tri   \s_tx[0][2][1] ;
  tri   \s_tx[0][2][0] ;
  tri   \s_tx[0][3][36] ;
  tri   \s_tx[0][3][35] ;
  tri   \s_tx[0][3][34] ;
  tri   \s_tx[0][3][33] ;
  tri   \s_tx[0][3][32] ;
  tri   \s_tx[0][3][31] ;
  tri   \s_tx[0][3][30] ;
  tri   \s_tx[0][3][29] ;
  tri   \s_tx[0][3][28] ;
  tri   \s_tx[0][3][27] ;
  tri   \s_tx[0][3][26] ;
  tri   \s_tx[0][3][25] ;
  tri   \s_tx[0][3][24] ;
  tri   \s_tx[0][3][23] ;
  tri   \s_tx[0][3][22] ;
  tri   \s_tx[0][3][21] ;
  tri   \s_tx[0][3][20] ;
  tri   \s_tx[0][3][19] ;
  tri   \s_tx[0][3][18] ;
  tri   \s_tx[0][3][17] ;
  tri   \s_tx[0][3][16] ;
  tri   \s_tx[0][3][15] ;
  tri   \s_tx[0][3][14] ;
  tri   \s_tx[0][3][13] ;
  tri   \s_tx[0][3][12] ;
  tri   \s_tx[0][3][11] ;
  tri   \s_tx[0][3][10] ;
  tri   \s_tx[0][3][9] ;
  tri   \s_tx[0][3][8] ;
  tri   \s_tx[0][3][7] ;
  tri   \s_tx[0][3][6] ;
  tri   \s_tx[0][3][5] ;
  tri   \s_tx[0][3][4] ;
  tri   \s_tx[0][3][3] ;
  tri   \s_tx[0][3][2] ;
  tri   \s_tx[0][3][1] ;
  tri   \s_tx[0][3][0] ;
  tri   \s_tx[1][0][36] ;
  tri   \s_tx[1][0][35] ;
  tri   \s_tx[1][0][34] ;
  tri   \s_tx[1][0][33] ;
  tri   \s_tx[1][0][32] ;
  tri   \s_tx[1][0][31] ;
  tri   \s_tx[1][0][30] ;
  tri   \s_tx[1][0][29] ;
  tri   \s_tx[1][0][28] ;
  tri   \s_tx[1][0][27] ;
  tri   \s_tx[1][0][26] ;
  tri   \s_tx[1][0][25] ;
  tri   \s_tx[1][0][24] ;
  tri   \s_tx[1][0][23] ;
  tri   \s_tx[1][0][22] ;
  tri   \s_tx[1][0][21] ;
  tri   \s_tx[1][0][20] ;
  tri   \s_tx[1][0][19] ;
  tri   \s_tx[1][0][18] ;
  tri   \s_tx[1][0][17] ;
  tri   \s_tx[1][0][16] ;
  tri   \s_tx[1][0][15] ;
  tri   \s_tx[1][0][14] ;
  tri   \s_tx[1][0][13] ;
  tri   \s_tx[1][0][12] ;
  tri   \s_tx[1][0][11] ;
  tri   \s_tx[1][0][10] ;
  tri   \s_tx[1][0][9] ;
  tri   \s_tx[1][0][8] ;
  tri   \s_tx[1][0][7] ;
  tri   \s_tx[1][0][6] ;
  tri   \s_tx[1][0][5] ;
  tri   \s_tx[1][0][4] ;
  tri   \s_tx[1][0][3] ;
  tri   \s_tx[1][0][2] ;
  tri   \s_tx[1][0][1] ;
  tri   \s_tx[1][0][0] ;
  tri   \s_tx[1][1][36] ;
  tri   \s_tx[1][1][35] ;
  tri   \s_tx[1][1][34] ;
  tri   \s_tx[1][1][33] ;
  tri   \s_tx[1][1][32] ;
  tri   \s_tx[1][1][31] ;
  tri   \s_tx[1][1][30] ;
  tri   \s_tx[1][1][29] ;
  tri   \s_tx[1][1][28] ;
  tri   \s_tx[1][1][27] ;
  tri   \s_tx[1][1][26] ;
  tri   \s_tx[1][1][25] ;
  tri   \s_tx[1][1][24] ;
  tri   \s_tx[1][1][23] ;
  tri   \s_tx[1][1][22] ;
  tri   \s_tx[1][1][21] ;
  tri   \s_tx[1][1][20] ;
  tri   \s_tx[1][1][19] ;
  tri   \s_tx[1][1][18] ;
  tri   \s_tx[1][1][17] ;
  tri   \s_tx[1][1][16] ;
  tri   \s_tx[1][1][15] ;
  tri   \s_tx[1][1][14] ;
  tri   \s_tx[1][1][13] ;
  tri   \s_tx[1][1][12] ;
  tri   \s_tx[1][1][11] ;
  tri   \s_tx[1][1][10] ;
  tri   \s_tx[1][1][9] ;
  tri   \s_tx[1][1][8] ;
  tri   \s_tx[1][1][7] ;
  tri   \s_tx[1][1][6] ;
  tri   \s_tx[1][1][5] ;
  tri   \s_tx[1][1][4] ;
  tri   \s_tx[1][1][3] ;
  tri   \s_tx[1][1][2] ;
  tri   \s_tx[1][1][1] ;
  tri   \s_tx[1][1][0] ;
  tri   \s_tx[1][2][36] ;
  tri   \s_tx[1][2][35] ;
  tri   \s_tx[1][2][34] ;
  tri   \s_tx[1][2][33] ;
  tri   \s_tx[1][2][32] ;
  tri   \s_tx[1][2][31] ;
  tri   \s_tx[1][2][30] ;
  tri   \s_tx[1][2][29] ;
  tri   \s_tx[1][2][28] ;
  tri   \s_tx[1][2][27] ;
  tri   \s_tx[1][2][26] ;
  tri   \s_tx[1][2][25] ;
  tri   \s_tx[1][2][24] ;
  tri   \s_tx[1][2][23] ;
  tri   \s_tx[1][2][22] ;
  tri   \s_tx[1][2][21] ;
  tri   \s_tx[1][2][20] ;
  tri   \s_tx[1][2][19] ;
  tri   \s_tx[1][2][18] ;
  tri   \s_tx[1][2][17] ;
  tri   \s_tx[1][2][16] ;
  tri   \s_tx[1][2][15] ;
  tri   \s_tx[1][2][14] ;
  tri   \s_tx[1][2][13] ;
  tri   \s_tx[1][2][12] ;
  tri   \s_tx[1][2][11] ;
  tri   \s_tx[1][2][10] ;
  tri   \s_tx[1][2][9] ;
  tri   \s_tx[1][2][8] ;
  tri   \s_tx[1][2][7] ;
  tri   \s_tx[1][2][6] ;
  tri   \s_tx[1][2][5] ;
  tri   \s_tx[1][2][4] ;
  tri   \s_tx[1][2][3] ;
  tri   \s_tx[1][2][2] ;
  tri   \s_tx[1][2][1] ;
  tri   \s_tx[1][2][0] ;
  tri   \s_tx[1][3][36] ;
  tri   \s_tx[1][3][35] ;
  tri   \s_tx[1][3][34] ;
  tri   \s_tx[1][3][33] ;
  tri   \s_tx[1][3][32] ;
  tri   \s_tx[1][3][31] ;
  tri   \s_tx[1][3][30] ;
  tri   \s_tx[1][3][29] ;
  tri   \s_tx[1][3][28] ;
  tri   \s_tx[1][3][27] ;
  tri   \s_tx[1][3][26] ;
  tri   \s_tx[1][3][25] ;
  tri   \s_tx[1][3][24] ;
  tri   \s_tx[1][3][23] ;
  tri   \s_tx[1][3][22] ;
  tri   \s_tx[1][3][21] ;
  tri   \s_tx[1][3][20] ;
  tri   \s_tx[1][3][19] ;
  tri   \s_tx[1][3][18] ;
  tri   \s_tx[1][3][17] ;
  tri   \s_tx[1][3][16] ;
  tri   \s_tx[1][3][15] ;
  tri   \s_tx[1][3][14] ;
  tri   \s_tx[1][3][13] ;
  tri   \s_tx[1][3][12] ;
  tri   \s_tx[1][3][11] ;
  tri   \s_tx[1][3][10] ;
  tri   \s_tx[1][3][9] ;
  tri   \s_tx[1][3][8] ;
  tri   \s_tx[1][3][7] ;
  tri   \s_tx[1][3][6] ;
  tri   \s_tx[1][3][5] ;
  tri   \s_tx[1][3][4] ;
  tri   \s_tx[1][3][3] ;
  tri   \s_tx[1][3][2] ;
  tri   \s_tx[1][3][1] ;
  tri   \s_tx[1][3][0] ;
  tri   \s_tx[2][0][36] ;
  tri   \s_tx[2][0][35] ;
  tri   \s_tx[2][0][34] ;
  tri   \s_tx[2][0][33] ;
  tri   \s_tx[2][0][32] ;
  tri   \s_tx[2][0][31] ;
  tri   \s_tx[2][0][30] ;
  tri   \s_tx[2][0][29] ;
  tri   \s_tx[2][0][28] ;
  tri   \s_tx[2][0][27] ;
  tri   \s_tx[2][0][26] ;
  tri   \s_tx[2][0][25] ;
  tri   \s_tx[2][0][24] ;
  tri   \s_tx[2][0][23] ;
  tri   \s_tx[2][0][22] ;
  tri   \s_tx[2][0][21] ;
  tri   \s_tx[2][0][20] ;
  tri   \s_tx[2][0][19] ;
  tri   \s_tx[2][0][18] ;
  tri   \s_tx[2][0][17] ;
  tri   \s_tx[2][0][16] ;
  tri   \s_tx[2][0][15] ;
  tri   \s_tx[2][0][14] ;
  tri   \s_tx[2][0][13] ;
  tri   \s_tx[2][0][12] ;
  tri   \s_tx[2][0][11] ;
  tri   \s_tx[2][0][10] ;
  tri   \s_tx[2][0][9] ;
  tri   \s_tx[2][0][8] ;
  tri   \s_tx[2][0][7] ;
  tri   \s_tx[2][0][6] ;
  tri   \s_tx[2][0][5] ;
  tri   \s_tx[2][0][4] ;
  tri   \s_tx[2][0][3] ;
  tri   \s_tx[2][0][2] ;
  tri   \s_tx[2][0][1] ;
  tri   \s_tx[2][0][0] ;
  tri   \s_tx[2][1][36] ;
  tri   \s_tx[2][1][35] ;
  tri   \s_tx[2][1][34] ;
  tri   \s_tx[2][1][33] ;
  tri   \s_tx[2][1][32] ;
  tri   \s_tx[2][1][31] ;
  tri   \s_tx[2][1][30] ;
  tri   \s_tx[2][1][29] ;
  tri   \s_tx[2][1][28] ;
  tri   \s_tx[2][1][27] ;
  tri   \s_tx[2][1][26] ;
  tri   \s_tx[2][1][25] ;
  tri   \s_tx[2][1][24] ;
  tri   \s_tx[2][1][23] ;
  tri   \s_tx[2][1][22] ;
  tri   \s_tx[2][1][21] ;
  tri   \s_tx[2][1][20] ;
  tri   \s_tx[2][1][19] ;
  tri   \s_tx[2][1][18] ;
  tri   \s_tx[2][1][17] ;
  tri   \s_tx[2][1][16] ;
  tri   \s_tx[2][1][15] ;
  tri   \s_tx[2][1][14] ;
  tri   \s_tx[2][1][13] ;
  tri   \s_tx[2][1][12] ;
  tri   \s_tx[2][1][11] ;
  tri   \s_tx[2][1][10] ;
  tri   \s_tx[2][1][9] ;
  tri   \s_tx[2][1][8] ;
  tri   \s_tx[2][1][7] ;
  tri   \s_tx[2][1][6] ;
  tri   \s_tx[2][1][5] ;
  tri   \s_tx[2][1][4] ;
  tri   \s_tx[2][1][3] ;
  tri   \s_tx[2][1][2] ;
  tri   \s_tx[2][1][1] ;
  tri   \s_tx[2][1][0] ;
  tri   \s_tx[2][2][36] ;
  tri   \s_tx[2][2][35] ;
  tri   \s_tx[2][2][34] ;
  tri   \s_tx[2][2][33] ;
  tri   \s_tx[2][2][32] ;
  tri   \s_tx[2][2][31] ;
  tri   \s_tx[2][2][30] ;
  tri   \s_tx[2][2][29] ;
  tri   \s_tx[2][2][28] ;
  tri   \s_tx[2][2][27] ;
  tri   \s_tx[2][2][26] ;
  tri   \s_tx[2][2][25] ;
  tri   \s_tx[2][2][24] ;
  tri   \s_tx[2][2][23] ;
  tri   \s_tx[2][2][22] ;
  tri   \s_tx[2][2][21] ;
  tri   \s_tx[2][2][20] ;
  tri   \s_tx[2][2][19] ;
  tri   \s_tx[2][2][18] ;
  tri   \s_tx[2][2][17] ;
  tri   \s_tx[2][2][16] ;
  tri   \s_tx[2][2][15] ;
  tri   \s_tx[2][2][14] ;
  tri   \s_tx[2][2][13] ;
  tri   \s_tx[2][2][12] ;
  tri   \s_tx[2][2][11] ;
  tri   \s_tx[2][2][10] ;
  tri   \s_tx[2][2][9] ;
  tri   \s_tx[2][2][8] ;
  tri   \s_tx[2][2][7] ;
  tri   \s_tx[2][2][6] ;
  tri   \s_tx[2][2][5] ;
  tri   \s_tx[2][2][4] ;
  tri   \s_tx[2][2][3] ;
  tri   \s_tx[2][2][2] ;
  tri   \s_tx[2][2][1] ;
  tri   \s_tx[2][2][0] ;
  tri   \s_tx[2][3][36] ;
  tri   \s_tx[2][3][35] ;
  tri   \s_tx[2][3][34] ;
  tri   \s_tx[2][3][33] ;
  tri   \s_tx[2][3][32] ;
  tri   \s_tx[2][3][31] ;
  tri   \s_tx[2][3][30] ;
  tri   \s_tx[2][3][29] ;
  tri   \s_tx[2][3][28] ;
  tri   \s_tx[2][3][27] ;
  tri   \s_tx[2][3][26] ;
  tri   \s_tx[2][3][25] ;
  tri   \s_tx[2][3][24] ;
  tri   \s_tx[2][3][23] ;
  tri   \s_tx[2][3][22] ;
  tri   \s_tx[2][3][21] ;
  tri   \s_tx[2][3][20] ;
  tri   \s_tx[2][3][19] ;
  tri   \s_tx[2][3][18] ;
  tri   \s_tx[2][3][17] ;
  tri   \s_tx[2][3][16] ;
  tri   \s_tx[2][3][15] ;
  tri   \s_tx[2][3][14] ;
  tri   \s_tx[2][3][13] ;
  tri   \s_tx[2][3][12] ;
  tri   \s_tx[2][3][11] ;
  tri   \s_tx[2][3][10] ;
  tri   \s_tx[2][3][9] ;
  tri   \s_tx[2][3][8] ;
  tri   \s_tx[2][3][7] ;
  tri   \s_tx[2][3][6] ;
  tri   \s_tx[2][3][5] ;
  tri   \s_tx[2][3][4] ;
  tri   \s_tx[2][3][3] ;
  tri   \s_tx[2][3][2] ;
  tri   \s_tx[2][3][1] ;
  tri   \s_tx[2][3][0] ;
  tri   \s_tx[3][0][36] ;
  tri   \s_tx[3][0][35] ;
  tri   \s_tx[3][0][34] ;
  tri   \s_tx[3][0][33] ;
  tri   \s_tx[3][0][32] ;
  tri   \s_tx[3][0][31] ;
  tri   \s_tx[3][0][30] ;
  tri   \s_tx[3][0][29] ;
  tri   \s_tx[3][0][28] ;
  tri   \s_tx[3][0][27] ;
  tri   \s_tx[3][0][26] ;
  tri   \s_tx[3][0][25] ;
  tri   \s_tx[3][0][24] ;
  tri   \s_tx[3][0][23] ;
  tri   \s_tx[3][0][22] ;
  tri   \s_tx[3][0][21] ;
  tri   \s_tx[3][0][20] ;
  tri   \s_tx[3][0][19] ;
  tri   \s_tx[3][0][18] ;
  tri   \s_tx[3][0][17] ;
  tri   \s_tx[3][0][16] ;
  tri   \s_tx[3][0][15] ;
  tri   \s_tx[3][0][14] ;
  tri   \s_tx[3][0][13] ;
  tri   \s_tx[3][0][12] ;
  tri   \s_tx[3][0][11] ;
  tri   \s_tx[3][0][10] ;
  tri   \s_tx[3][0][9] ;
  tri   \s_tx[3][0][8] ;
  tri   \s_tx[3][0][7] ;
  tri   \s_tx[3][0][6] ;
  tri   \s_tx[3][0][5] ;
  tri   \s_tx[3][0][4] ;
  tri   \s_tx[3][0][3] ;
  tri   \s_tx[3][0][2] ;
  tri   \s_tx[3][0][1] ;
  tri   \s_tx[3][0][0] ;
  tri   \s_tx[3][1][36] ;
  tri   \s_tx[3][1][35] ;
  tri   \s_tx[3][1][34] ;
  tri   \s_tx[3][1][33] ;
  tri   \s_tx[3][1][32] ;
  tri   \s_tx[3][1][31] ;
  tri   \s_tx[3][1][30] ;
  tri   \s_tx[3][1][29] ;
  tri   \s_tx[3][1][28] ;
  tri   \s_tx[3][1][27] ;
  tri   \s_tx[3][1][26] ;
  tri   \s_tx[3][1][25] ;
  tri   \s_tx[3][1][24] ;
  tri   \s_tx[3][1][23] ;
  tri   \s_tx[3][1][22] ;
  tri   \s_tx[3][1][21] ;
  tri   \s_tx[3][1][20] ;
  tri   \s_tx[3][1][19] ;
  tri   \s_tx[3][1][18] ;
  tri   \s_tx[3][1][17] ;
  tri   \s_tx[3][1][16] ;
  tri   \s_tx[3][1][15] ;
  tri   \s_tx[3][1][14] ;
  tri   \s_tx[3][1][13] ;
  tri   \s_tx[3][1][12] ;
  tri   \s_tx[3][1][11] ;
  tri   \s_tx[3][1][10] ;
  tri   \s_tx[3][1][9] ;
  tri   \s_tx[3][1][8] ;
  tri   \s_tx[3][1][7] ;
  tri   \s_tx[3][1][6] ;
  tri   \s_tx[3][1][5] ;
  tri   \s_tx[3][1][4] ;
  tri   \s_tx[3][1][3] ;
  tri   \s_tx[3][1][2] ;
  tri   \s_tx[3][1][1] ;
  tri   \s_tx[3][1][0] ;
  tri   \s_tx[3][2][36] ;
  tri   \s_tx[3][2][35] ;
  tri   \s_tx[3][2][34] ;
  tri   \s_tx[3][2][33] ;
  tri   \s_tx[3][2][32] ;
  tri   \s_tx[3][2][31] ;
  tri   \s_tx[3][2][30] ;
  tri   \s_tx[3][2][29] ;
  tri   \s_tx[3][2][28] ;
  tri   \s_tx[3][2][27] ;
  tri   \s_tx[3][2][26] ;
  tri   \s_tx[3][2][25] ;
  tri   \s_tx[3][2][24] ;
  tri   \s_tx[3][2][23] ;
  tri   \s_tx[3][2][22] ;
  tri   \s_tx[3][2][21] ;
  tri   \s_tx[3][2][20] ;
  tri   \s_tx[3][2][19] ;
  tri   \s_tx[3][2][18] ;
  tri   \s_tx[3][2][17] ;
  tri   \s_tx[3][2][16] ;
  tri   \s_tx[3][2][15] ;
  tri   \s_tx[3][2][14] ;
  tri   \s_tx[3][2][13] ;
  tri   \s_tx[3][2][12] ;
  tri   \s_tx[3][2][11] ;
  tri   \s_tx[3][2][10] ;
  tri   \s_tx[3][2][9] ;
  tri   \s_tx[3][2][8] ;
  tri   \s_tx[3][2][7] ;
  tri   \s_tx[3][2][6] ;
  tri   \s_tx[3][2][5] ;
  tri   \s_tx[3][2][4] ;
  tri   \s_tx[3][2][3] ;
  tri   \s_tx[3][2][2] ;
  tri   \s_tx[3][2][1] ;
  tri   \s_tx[3][2][0] ;
  tri   \s_tx[3][3][36] ;
  tri   \s_tx[3][3][35] ;
  tri   \s_tx[3][3][34] ;
  tri   \s_tx[3][3][33] ;
  tri   \s_tx[3][3][32] ;
  tri   \s_tx[3][3][31] ;
  tri   \s_tx[3][3][30] ;
  tri   \s_tx[3][3][29] ;
  tri   \s_tx[3][3][28] ;
  tri   \s_tx[3][3][27] ;
  tri   \s_tx[3][3][26] ;
  tri   \s_tx[3][3][25] ;
  tri   \s_tx[3][3][24] ;
  tri   \s_tx[3][3][23] ;
  tri   \s_tx[3][3][22] ;
  tri   \s_tx[3][3][21] ;
  tri   \s_tx[3][3][20] ;
  tri   \s_tx[3][3][19] ;
  tri   \s_tx[3][3][18] ;
  tri   \s_tx[3][3][17] ;
  tri   \s_tx[3][3][16] ;
  tri   \s_tx[3][3][15] ;
  tri   \s_tx[3][3][14] ;
  tri   \s_tx[3][3][13] ;
  tri   \s_tx[3][3][12] ;
  tri   \s_tx[3][3][11] ;
  tri   \s_tx[3][3][10] ;
  tri   \s_tx[3][3][9] ;
  tri   \s_tx[3][3][8] ;
  tri   \s_tx[3][3][7] ;
  tri   \s_tx[3][3][6] ;
  tri   \s_tx[3][3][5] ;
  tri   \s_tx[3][3][4] ;
  tri   \s_tx[3][3][3] ;
  tri   \s_tx[3][3][2] ;
  tri   \s_tx[3][3][1] ;
  tri   \s_tx[3][3][0] ;
  tri   \e_tx[0][0][36] ;
  tri   \e_tx[0][0][35] ;
  tri   \e_tx[0][0][34] ;
  tri   \e_tx[0][0][33] ;
  tri   \e_tx[0][0][32] ;
  tri   \e_tx[0][0][31] ;
  tri   \e_tx[0][0][30] ;
  tri   \e_tx[0][0][29] ;
  tri   \e_tx[0][0][28] ;
  tri   \e_tx[0][0][27] ;
  tri   \e_tx[0][0][26] ;
  tri   \e_tx[0][0][25] ;
  tri   \e_tx[0][0][24] ;
  tri   \e_tx[0][0][23] ;
  tri   \e_tx[0][0][22] ;
  tri   \e_tx[0][0][21] ;
  tri   \e_tx[0][0][20] ;
  tri   \e_tx[0][0][19] ;
  tri   \e_tx[0][0][18] ;
  tri   \e_tx[0][0][17] ;
  tri   \e_tx[0][0][16] ;
  tri   \e_tx[0][0][15] ;
  tri   \e_tx[0][0][14] ;
  tri   \e_tx[0][0][13] ;
  tri   \e_tx[0][0][12] ;
  tri   \e_tx[0][0][11] ;
  tri   \e_tx[0][0][10] ;
  tri   \e_tx[0][0][9] ;
  tri   \e_tx[0][0][8] ;
  tri   \e_tx[0][0][7] ;
  tri   \e_tx[0][0][6] ;
  tri   \e_tx[0][0][5] ;
  tri   \e_tx[0][0][4] ;
  tri   \e_tx[0][0][3] ;
  tri   \e_tx[0][0][2] ;
  tri   \e_tx[0][0][1] ;
  tri   \e_tx[0][0][0] ;
  tri   \e_tx[0][1][36] ;
  tri   \e_tx[0][1][35] ;
  tri   \e_tx[0][1][34] ;
  tri   \e_tx[0][1][33] ;
  tri   \e_tx[0][1][32] ;
  tri   \e_tx[0][1][31] ;
  tri   \e_tx[0][1][30] ;
  tri   \e_tx[0][1][29] ;
  tri   \e_tx[0][1][28] ;
  tri   \e_tx[0][1][27] ;
  tri   \e_tx[0][1][26] ;
  tri   \e_tx[0][1][25] ;
  tri   \e_tx[0][1][24] ;
  tri   \e_tx[0][1][23] ;
  tri   \e_tx[0][1][22] ;
  tri   \e_tx[0][1][21] ;
  tri   \e_tx[0][1][20] ;
  tri   \e_tx[0][1][19] ;
  tri   \e_tx[0][1][18] ;
  tri   \e_tx[0][1][17] ;
  tri   \e_tx[0][1][16] ;
  tri   \e_tx[0][1][15] ;
  tri   \e_tx[0][1][14] ;
  tri   \e_tx[0][1][13] ;
  tri   \e_tx[0][1][12] ;
  tri   \e_tx[0][1][11] ;
  tri   \e_tx[0][1][10] ;
  tri   \e_tx[0][1][9] ;
  tri   \e_tx[0][1][8] ;
  tri   \e_tx[0][1][7] ;
  tri   \e_tx[0][1][6] ;
  tri   \e_tx[0][1][5] ;
  tri   \e_tx[0][1][4] ;
  tri   \e_tx[0][1][3] ;
  tri   \e_tx[0][1][2] ;
  tri   \e_tx[0][1][1] ;
  tri   \e_tx[0][1][0] ;
  tri   \e_tx[0][2][36] ;
  tri   \e_tx[0][2][35] ;
  tri   \e_tx[0][2][34] ;
  tri   \e_tx[0][2][33] ;
  tri   \e_tx[0][2][32] ;
  tri   \e_tx[0][2][31] ;
  tri   \e_tx[0][2][30] ;
  tri   \e_tx[0][2][29] ;
  tri   \e_tx[0][2][28] ;
  tri   \e_tx[0][2][27] ;
  tri   \e_tx[0][2][26] ;
  tri   \e_tx[0][2][25] ;
  tri   \e_tx[0][2][24] ;
  tri   \e_tx[0][2][23] ;
  tri   \e_tx[0][2][22] ;
  tri   \e_tx[0][2][21] ;
  tri   \e_tx[0][2][20] ;
  tri   \e_tx[0][2][19] ;
  tri   \e_tx[0][2][18] ;
  tri   \e_tx[0][2][17] ;
  tri   \e_tx[0][2][16] ;
  tri   \e_tx[0][2][15] ;
  tri   \e_tx[0][2][14] ;
  tri   \e_tx[0][2][13] ;
  tri   \e_tx[0][2][12] ;
  tri   \e_tx[0][2][11] ;
  tri   \e_tx[0][2][10] ;
  tri   \e_tx[0][2][9] ;
  tri   \e_tx[0][2][8] ;
  tri   \e_tx[0][2][7] ;
  tri   \e_tx[0][2][6] ;
  tri   \e_tx[0][2][5] ;
  tri   \e_tx[0][2][4] ;
  tri   \e_tx[0][2][3] ;
  tri   \e_tx[0][2][2] ;
  tri   \e_tx[0][2][1] ;
  tri   \e_tx[0][2][0] ;
  tri   \e_tx[0][3][36] ;
  tri   \e_tx[0][3][35] ;
  tri   \e_tx[0][3][34] ;
  tri   \e_tx[0][3][33] ;
  tri   \e_tx[0][3][32] ;
  tri   \e_tx[0][3][31] ;
  tri   \e_tx[0][3][30] ;
  tri   \e_tx[0][3][29] ;
  tri   \e_tx[0][3][28] ;
  tri   \e_tx[0][3][27] ;
  tri   \e_tx[0][3][26] ;
  tri   \e_tx[0][3][25] ;
  tri   \e_tx[0][3][24] ;
  tri   \e_tx[0][3][23] ;
  tri   \e_tx[0][3][22] ;
  tri   \e_tx[0][3][21] ;
  tri   \e_tx[0][3][20] ;
  tri   \e_tx[0][3][19] ;
  tri   \e_tx[0][3][18] ;
  tri   \e_tx[0][3][17] ;
  tri   \e_tx[0][3][16] ;
  tri   \e_tx[0][3][15] ;
  tri   \e_tx[0][3][14] ;
  tri   \e_tx[0][3][13] ;
  tri   \e_tx[0][3][12] ;
  tri   \e_tx[0][3][11] ;
  tri   \e_tx[0][3][10] ;
  tri   \e_tx[0][3][9] ;
  tri   \e_tx[0][3][8] ;
  tri   \e_tx[0][3][7] ;
  tri   \e_tx[0][3][6] ;
  tri   \e_tx[0][3][5] ;
  tri   \e_tx[0][3][4] ;
  tri   \e_tx[0][3][3] ;
  tri   \e_tx[0][3][2] ;
  tri   \e_tx[0][3][1] ;
  tri   \e_tx[0][3][0] ;
  tri   \e_tx[1][0][36] ;
  tri   \e_tx[1][0][35] ;
  tri   \e_tx[1][0][34] ;
  tri   \e_tx[1][0][33] ;
  tri   \e_tx[1][0][32] ;
  tri   \e_tx[1][0][31] ;
  tri   \e_tx[1][0][30] ;
  tri   \e_tx[1][0][29] ;
  tri   \e_tx[1][0][28] ;
  tri   \e_tx[1][0][27] ;
  tri   \e_tx[1][0][26] ;
  tri   \e_tx[1][0][25] ;
  tri   \e_tx[1][0][24] ;
  tri   \e_tx[1][0][23] ;
  tri   \e_tx[1][0][22] ;
  tri   \e_tx[1][0][21] ;
  tri   \e_tx[1][0][20] ;
  tri   \e_tx[1][0][19] ;
  tri   \e_tx[1][0][18] ;
  tri   \e_tx[1][0][17] ;
  tri   \e_tx[1][0][16] ;
  tri   \e_tx[1][0][15] ;
  tri   \e_tx[1][0][14] ;
  tri   \e_tx[1][0][13] ;
  tri   \e_tx[1][0][12] ;
  tri   \e_tx[1][0][11] ;
  tri   \e_tx[1][0][10] ;
  tri   \e_tx[1][0][9] ;
  tri   \e_tx[1][0][8] ;
  tri   \e_tx[1][0][7] ;
  tri   \e_tx[1][0][6] ;
  tri   \e_tx[1][0][5] ;
  tri   \e_tx[1][0][4] ;
  tri   \e_tx[1][0][3] ;
  tri   \e_tx[1][0][2] ;
  tri   \e_tx[1][0][1] ;
  tri   \e_tx[1][0][0] ;
  tri   \e_tx[1][1][36] ;
  tri   \e_tx[1][1][35] ;
  tri   \e_tx[1][1][34] ;
  tri   \e_tx[1][1][33] ;
  tri   \e_tx[1][1][32] ;
  tri   \e_tx[1][1][31] ;
  tri   \e_tx[1][1][30] ;
  tri   \e_tx[1][1][29] ;
  tri   \e_tx[1][1][28] ;
  tri   \e_tx[1][1][27] ;
  tri   \e_tx[1][1][26] ;
  tri   \e_tx[1][1][25] ;
  tri   \e_tx[1][1][24] ;
  tri   \e_tx[1][1][23] ;
  tri   \e_tx[1][1][22] ;
  tri   \e_tx[1][1][21] ;
  tri   \e_tx[1][1][20] ;
  tri   \e_tx[1][1][19] ;
  tri   \e_tx[1][1][18] ;
  tri   \e_tx[1][1][17] ;
  tri   \e_tx[1][1][16] ;
  tri   \e_tx[1][1][15] ;
  tri   \e_tx[1][1][14] ;
  tri   \e_tx[1][1][13] ;
  tri   \e_tx[1][1][12] ;
  tri   \e_tx[1][1][11] ;
  tri   \e_tx[1][1][10] ;
  tri   \e_tx[1][1][9] ;
  tri   \e_tx[1][1][8] ;
  tri   \e_tx[1][1][7] ;
  tri   \e_tx[1][1][6] ;
  tri   \e_tx[1][1][5] ;
  tri   \e_tx[1][1][4] ;
  tri   \e_tx[1][1][3] ;
  tri   \e_tx[1][1][2] ;
  tri   \e_tx[1][1][1] ;
  tri   \e_tx[1][1][0] ;
  tri   \e_tx[1][2][36] ;
  tri   \e_tx[1][2][35] ;
  tri   \e_tx[1][2][34] ;
  tri   \e_tx[1][2][33] ;
  tri   \e_tx[1][2][32] ;
  tri   \e_tx[1][2][31] ;
  tri   \e_tx[1][2][30] ;
  tri   \e_tx[1][2][29] ;
  tri   \e_tx[1][2][28] ;
  tri   \e_tx[1][2][27] ;
  tri   \e_tx[1][2][26] ;
  tri   \e_tx[1][2][25] ;
  tri   \e_tx[1][2][24] ;
  tri   \e_tx[1][2][23] ;
  tri   \e_tx[1][2][22] ;
  tri   \e_tx[1][2][21] ;
  tri   \e_tx[1][2][20] ;
  tri   \e_tx[1][2][19] ;
  tri   \e_tx[1][2][18] ;
  tri   \e_tx[1][2][17] ;
  tri   \e_tx[1][2][16] ;
  tri   \e_tx[1][2][15] ;
  tri   \e_tx[1][2][14] ;
  tri   \e_tx[1][2][13] ;
  tri   \e_tx[1][2][12] ;
  tri   \e_tx[1][2][11] ;
  tri   \e_tx[1][2][10] ;
  tri   \e_tx[1][2][9] ;
  tri   \e_tx[1][2][8] ;
  tri   \e_tx[1][2][7] ;
  tri   \e_tx[1][2][6] ;
  tri   \e_tx[1][2][5] ;
  tri   \e_tx[1][2][4] ;
  tri   \e_tx[1][2][3] ;
  tri   \e_tx[1][2][2] ;
  tri   \e_tx[1][2][1] ;
  tri   \e_tx[1][2][0] ;
  tri   \e_tx[1][3][36] ;
  tri   \e_tx[1][3][35] ;
  tri   \e_tx[1][3][34] ;
  tri   \e_tx[1][3][33] ;
  tri   \e_tx[1][3][32] ;
  tri   \e_tx[1][3][31] ;
  tri   \e_tx[1][3][30] ;
  tri   \e_tx[1][3][29] ;
  tri   \e_tx[1][3][28] ;
  tri   \e_tx[1][3][27] ;
  tri   \e_tx[1][3][26] ;
  tri   \e_tx[1][3][25] ;
  tri   \e_tx[1][3][24] ;
  tri   \e_tx[1][3][23] ;
  tri   \e_tx[1][3][22] ;
  tri   \e_tx[1][3][21] ;
  tri   \e_tx[1][3][20] ;
  tri   \e_tx[1][3][19] ;
  tri   \e_tx[1][3][18] ;
  tri   \e_tx[1][3][17] ;
  tri   \e_tx[1][3][16] ;
  tri   \e_tx[1][3][15] ;
  tri   \e_tx[1][3][14] ;
  tri   \e_tx[1][3][13] ;
  tri   \e_tx[1][3][12] ;
  tri   \e_tx[1][3][11] ;
  tri   \e_tx[1][3][10] ;
  tri   \e_tx[1][3][9] ;
  tri   \e_tx[1][3][8] ;
  tri   \e_tx[1][3][7] ;
  tri   \e_tx[1][3][6] ;
  tri   \e_tx[1][3][5] ;
  tri   \e_tx[1][3][4] ;
  tri   \e_tx[1][3][3] ;
  tri   \e_tx[1][3][2] ;
  tri   \e_tx[1][3][1] ;
  tri   \e_tx[1][3][0] ;
  tri   \e_tx[2][0][36] ;
  tri   \e_tx[2][0][35] ;
  tri   \e_tx[2][0][34] ;
  tri   \e_tx[2][0][33] ;
  tri   \e_tx[2][0][32] ;
  tri   \e_tx[2][0][31] ;
  tri   \e_tx[2][0][30] ;
  tri   \e_tx[2][0][29] ;
  tri   \e_tx[2][0][28] ;
  tri   \e_tx[2][0][27] ;
  tri   \e_tx[2][0][26] ;
  tri   \e_tx[2][0][25] ;
  tri   \e_tx[2][0][24] ;
  tri   \e_tx[2][0][23] ;
  tri   \e_tx[2][0][22] ;
  tri   \e_tx[2][0][21] ;
  tri   \e_tx[2][0][20] ;
  tri   \e_tx[2][0][19] ;
  tri   \e_tx[2][0][18] ;
  tri   \e_tx[2][0][17] ;
  tri   \e_tx[2][0][16] ;
  tri   \e_tx[2][0][15] ;
  tri   \e_tx[2][0][14] ;
  tri   \e_tx[2][0][13] ;
  tri   \e_tx[2][0][12] ;
  tri   \e_tx[2][0][11] ;
  tri   \e_tx[2][0][10] ;
  tri   \e_tx[2][0][9] ;
  tri   \e_tx[2][0][8] ;
  tri   \e_tx[2][0][7] ;
  tri   \e_tx[2][0][6] ;
  tri   \e_tx[2][0][5] ;
  tri   \e_tx[2][0][4] ;
  tri   \e_tx[2][0][3] ;
  tri   \e_tx[2][0][2] ;
  tri   \e_tx[2][0][1] ;
  tri   \e_tx[2][0][0] ;
  tri   \e_tx[2][1][36] ;
  tri   \e_tx[2][1][35] ;
  tri   \e_tx[2][1][34] ;
  tri   \e_tx[2][1][33] ;
  tri   \e_tx[2][1][32] ;
  tri   \e_tx[2][1][31] ;
  tri   \e_tx[2][1][30] ;
  tri   \e_tx[2][1][29] ;
  tri   \e_tx[2][1][28] ;
  tri   \e_tx[2][1][27] ;
  tri   \e_tx[2][1][26] ;
  tri   \e_tx[2][1][25] ;
  tri   \e_tx[2][1][24] ;
  tri   \e_tx[2][1][23] ;
  tri   \e_tx[2][1][22] ;
  tri   \e_tx[2][1][21] ;
  tri   \e_tx[2][1][20] ;
  tri   \e_tx[2][1][19] ;
  tri   \e_tx[2][1][18] ;
  tri   \e_tx[2][1][17] ;
  tri   \e_tx[2][1][16] ;
  tri   \e_tx[2][1][15] ;
  tri   \e_tx[2][1][14] ;
  tri   \e_tx[2][1][13] ;
  tri   \e_tx[2][1][12] ;
  tri   \e_tx[2][1][11] ;
  tri   \e_tx[2][1][10] ;
  tri   \e_tx[2][1][9] ;
  tri   \e_tx[2][1][8] ;
  tri   \e_tx[2][1][7] ;
  tri   \e_tx[2][1][6] ;
  tri   \e_tx[2][1][5] ;
  tri   \e_tx[2][1][4] ;
  tri   \e_tx[2][1][3] ;
  tri   \e_tx[2][1][2] ;
  tri   \e_tx[2][1][1] ;
  tri   \e_tx[2][1][0] ;
  tri   \e_tx[2][2][36] ;
  tri   \e_tx[2][2][35] ;
  tri   \e_tx[2][2][34] ;
  tri   \e_tx[2][2][33] ;
  tri   \e_tx[2][2][32] ;
  tri   \e_tx[2][2][31] ;
  tri   \e_tx[2][2][30] ;
  tri   \e_tx[2][2][29] ;
  tri   \e_tx[2][2][28] ;
  tri   \e_tx[2][2][27] ;
  tri   \e_tx[2][2][26] ;
  tri   \e_tx[2][2][25] ;
  tri   \e_tx[2][2][24] ;
  tri   \e_tx[2][2][23] ;
  tri   \e_tx[2][2][22] ;
  tri   \e_tx[2][2][21] ;
  tri   \e_tx[2][2][20] ;
  tri   \e_tx[2][2][19] ;
  tri   \e_tx[2][2][18] ;
  tri   \e_tx[2][2][17] ;
  tri   \e_tx[2][2][16] ;
  tri   \e_tx[2][2][15] ;
  tri   \e_tx[2][2][14] ;
  tri   \e_tx[2][2][13] ;
  tri   \e_tx[2][2][12] ;
  tri   \e_tx[2][2][11] ;
  tri   \e_tx[2][2][10] ;
  tri   \e_tx[2][2][9] ;
  tri   \e_tx[2][2][8] ;
  tri   \e_tx[2][2][7] ;
  tri   \e_tx[2][2][6] ;
  tri   \e_tx[2][2][5] ;
  tri   \e_tx[2][2][4] ;
  tri   \e_tx[2][2][3] ;
  tri   \e_tx[2][2][2] ;
  tri   \e_tx[2][2][1] ;
  tri   \e_tx[2][2][0] ;
  tri   \e_tx[2][3][36] ;
  tri   \e_tx[2][3][35] ;
  tri   \e_tx[2][3][34] ;
  tri   \e_tx[2][3][33] ;
  tri   \e_tx[2][3][32] ;
  tri   \e_tx[2][3][31] ;
  tri   \e_tx[2][3][30] ;
  tri   \e_tx[2][3][29] ;
  tri   \e_tx[2][3][28] ;
  tri   \e_tx[2][3][27] ;
  tri   \e_tx[2][3][26] ;
  tri   \e_tx[2][3][25] ;
  tri   \e_tx[2][3][24] ;
  tri   \e_tx[2][3][23] ;
  tri   \e_tx[2][3][22] ;
  tri   \e_tx[2][3][21] ;
  tri   \e_tx[2][3][20] ;
  tri   \e_tx[2][3][19] ;
  tri   \e_tx[2][3][18] ;
  tri   \e_tx[2][3][17] ;
  tri   \e_tx[2][3][16] ;
  tri   \e_tx[2][3][15] ;
  tri   \e_tx[2][3][14] ;
  tri   \e_tx[2][3][13] ;
  tri   \e_tx[2][3][12] ;
  tri   \e_tx[2][3][11] ;
  tri   \e_tx[2][3][10] ;
  tri   \e_tx[2][3][9] ;
  tri   \e_tx[2][3][8] ;
  tri   \e_tx[2][3][7] ;
  tri   \e_tx[2][3][6] ;
  tri   \e_tx[2][3][5] ;
  tri   \e_tx[2][3][4] ;
  tri   \e_tx[2][3][3] ;
  tri   \e_tx[2][3][2] ;
  tri   \e_tx[2][3][1] ;
  tri   \e_tx[2][3][0] ;
  tri   \e_tx[3][0][36] ;
  tri   \e_tx[3][0][35] ;
  tri   \e_tx[3][0][34] ;
  tri   \e_tx[3][0][33] ;
  tri   \e_tx[3][0][32] ;
  tri   \e_tx[3][0][31] ;
  tri   \e_tx[3][0][30] ;
  tri   \e_tx[3][0][29] ;
  tri   \e_tx[3][0][28] ;
  tri   \e_tx[3][0][27] ;
  tri   \e_tx[3][0][26] ;
  tri   \e_tx[3][0][25] ;
  tri   \e_tx[3][0][24] ;
  tri   \e_tx[3][0][23] ;
  tri   \e_tx[3][0][22] ;
  tri   \e_tx[3][0][21] ;
  tri   \e_tx[3][0][20] ;
  tri   \e_tx[3][0][19] ;
  tri   \e_tx[3][0][18] ;
  tri   \e_tx[3][0][17] ;
  tri   \e_tx[3][0][16] ;
  tri   \e_tx[3][0][15] ;
  tri   \e_tx[3][0][14] ;
  tri   \e_tx[3][0][13] ;
  tri   \e_tx[3][0][12] ;
  tri   \e_tx[3][0][11] ;
  tri   \e_tx[3][0][10] ;
  tri   \e_tx[3][0][9] ;
  tri   \e_tx[3][0][8] ;
  tri   \e_tx[3][0][7] ;
  tri   \e_tx[3][0][6] ;
  tri   \e_tx[3][0][5] ;
  tri   \e_tx[3][0][4] ;
  tri   \e_tx[3][0][3] ;
  tri   \e_tx[3][0][2] ;
  tri   \e_tx[3][0][1] ;
  tri   \e_tx[3][0][0] ;
  tri   \e_tx[3][1][36] ;
  tri   \e_tx[3][1][35] ;
  tri   \e_tx[3][1][34] ;
  tri   \e_tx[3][1][33] ;
  tri   \e_tx[3][1][32] ;
  tri   \e_tx[3][1][31] ;
  tri   \e_tx[3][1][30] ;
  tri   \e_tx[3][1][29] ;
  tri   \e_tx[3][1][28] ;
  tri   \e_tx[3][1][27] ;
  tri   \e_tx[3][1][26] ;
  tri   \e_tx[3][1][25] ;
  tri   \e_tx[3][1][24] ;
  tri   \e_tx[3][1][23] ;
  tri   \e_tx[3][1][22] ;
  tri   \e_tx[3][1][21] ;
  tri   \e_tx[3][1][20] ;
  tri   \e_tx[3][1][19] ;
  tri   \e_tx[3][1][18] ;
  tri   \e_tx[3][1][17] ;
  tri   \e_tx[3][1][16] ;
  tri   \e_tx[3][1][15] ;
  tri   \e_tx[3][1][14] ;
  tri   \e_tx[3][1][13] ;
  tri   \e_tx[3][1][12] ;
  tri   \e_tx[3][1][11] ;
  tri   \e_tx[3][1][10] ;
  tri   \e_tx[3][1][9] ;
  tri   \e_tx[3][1][8] ;
  tri   \e_tx[3][1][7] ;
  tri   \e_tx[3][1][6] ;
  tri   \e_tx[3][1][5] ;
  tri   \e_tx[3][1][4] ;
  tri   \e_tx[3][1][3] ;
  tri   \e_tx[3][1][2] ;
  tri   \e_tx[3][1][1] ;
  tri   \e_tx[3][1][0] ;
  tri   \e_tx[3][2][36] ;
  tri   \e_tx[3][2][35] ;
  tri   \e_tx[3][2][34] ;
  tri   \e_tx[3][2][33] ;
  tri   \e_tx[3][2][32] ;
  tri   \e_tx[3][2][31] ;
  tri   \e_tx[3][2][30] ;
  tri   \e_tx[3][2][29] ;
  tri   \e_tx[3][2][28] ;
  tri   \e_tx[3][2][27] ;
  tri   \e_tx[3][2][26] ;
  tri   \e_tx[3][2][25] ;
  tri   \e_tx[3][2][24] ;
  tri   \e_tx[3][2][23] ;
  tri   \e_tx[3][2][22] ;
  tri   \e_tx[3][2][21] ;
  tri   \e_tx[3][2][20] ;
  tri   \e_tx[3][2][19] ;
  tri   \e_tx[3][2][18] ;
  tri   \e_tx[3][2][17] ;
  tri   \e_tx[3][2][16] ;
  tri   \e_tx[3][2][15] ;
  tri   \e_tx[3][2][14] ;
  tri   \e_tx[3][2][13] ;
  tri   \e_tx[3][2][12] ;
  tri   \e_tx[3][2][11] ;
  tri   \e_tx[3][2][10] ;
  tri   \e_tx[3][2][9] ;
  tri   \e_tx[3][2][8] ;
  tri   \e_tx[3][2][7] ;
  tri   \e_tx[3][2][6] ;
  tri   \e_tx[3][2][5] ;
  tri   \e_tx[3][2][4] ;
  tri   \e_tx[3][2][3] ;
  tri   \e_tx[3][2][2] ;
  tri   \e_tx[3][2][1] ;
  tri   \e_tx[3][2][0] ;
  tri   \e_tx[3][3][36] ;
  tri   \e_tx[3][3][35] ;
  tri   \e_tx[3][3][34] ;
  tri   \e_tx[3][3][33] ;
  tri   \e_tx[3][3][32] ;
  tri   \e_tx[3][3][31] ;
  tri   \e_tx[3][3][30] ;
  tri   \e_tx[3][3][29] ;
  tri   \e_tx[3][3][28] ;
  tri   \e_tx[3][3][27] ;
  tri   \e_tx[3][3][26] ;
  tri   \e_tx[3][3][25] ;
  tri   \e_tx[3][3][24] ;
  tri   \e_tx[3][3][23] ;
  tri   \e_tx[3][3][22] ;
  tri   \e_tx[3][3][21] ;
  tri   \e_tx[3][3][20] ;
  tri   \e_tx[3][3][19] ;
  tri   \e_tx[3][3][18] ;
  tri   \e_tx[3][3][17] ;
  tri   \e_tx[3][3][16] ;
  tri   \e_tx[3][3][15] ;
  tri   \e_tx[3][3][14] ;
  tri   \e_tx[3][3][13] ;
  tri   \e_tx[3][3][12] ;
  tri   \e_tx[3][3][11] ;
  tri   \e_tx[3][3][10] ;
  tri   \e_tx[3][3][9] ;
  tri   \e_tx[3][3][8] ;
  tri   \e_tx[3][3][7] ;
  tri   \e_tx[3][3][6] ;
  tri   \e_tx[3][3][5] ;
  tri   \e_tx[3][3][4] ;
  tri   \e_tx[3][3][3] ;
  tri   \e_tx[3][3][2] ;
  tri   \e_tx[3][3][1] ;
  tri   \e_tx[3][3][0] ;

  low_swing_rx \ys[0].xs[0].msg_txrx[0].north_rx  ( .i(\s_tx[0][3][0] ), .o(
        \n[0][0][0] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[0].west_rx  ( .i(\e_tx[3][0][0] ), .o(
        \w[0][0][0] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[0].south_tx  ( .i(out[0]), .c(
        \s_tx[0][0][0] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[0].east_tx  ( .i(\e[0][0][0] ), .c(
        \e_tx[0][0][0] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[1].north_rx  ( .i(\s_tx[0][3][1] ), .o(
        \n[0][0][1] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[1].west_rx  ( .i(\e_tx[3][0][1] ), .o(
        \w[0][0][1] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[1].south_tx  ( .i(out[1]), .c(
        \s_tx[0][0][1] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[1].east_tx  ( .i(\e[0][0][1] ), .c(
        \e_tx[0][0][1] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[2].north_rx  ( .i(\s_tx[0][3][2] ), .o(
        \n[0][0][2] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[2].west_rx  ( .i(\e_tx[3][0][2] ), .o(
        \w[0][0][2] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[2].south_tx  ( .i(out[2]), .c(
        \s_tx[0][0][2] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[2].east_tx  ( .i(\e[0][0][2] ), .c(
        \e_tx[0][0][2] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[3].north_rx  ( .i(\s_tx[0][3][3] ), .o(
        \n[0][0][3] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[3].west_rx  ( .i(\e_tx[3][0][3] ), .o(
        \w[0][0][3] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[3].south_tx  ( .i(out[3]), .c(
        \s_tx[0][0][3] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[3].east_tx  ( .i(\e[0][0][3] ), .c(
        \e_tx[0][0][3] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[4].north_rx  ( .i(\s_tx[0][3][4] ), .o(
        \n[0][0][4] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[4].west_rx  ( .i(\e_tx[3][0][4] ), .o(
        \w[0][0][4] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[4].south_tx  ( .i(out[4]), .c(
        \s_tx[0][0][4] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[4].east_tx  ( .i(\e[0][0][4] ), .c(
        \e_tx[0][0][4] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[5].north_rx  ( .i(\s_tx[0][3][5] ), .o(
        \n[0][0][5] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[5].west_rx  ( .i(\e_tx[3][0][5] ), .o(
        \w[0][0][5] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[5].south_tx  ( .i(out[5]), .c(
        \s_tx[0][0][5] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[5].east_tx  ( .i(\e[0][0][5] ), .c(
        \e_tx[0][0][5] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[6].north_rx  ( .i(\s_tx[0][3][6] ), .o(
        \n[0][0][6] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[6].west_rx  ( .i(\e_tx[3][0][6] ), .o(
        \w[0][0][6] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[6].south_tx  ( .i(out[6]), .c(
        \s_tx[0][0][6] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[6].east_tx  ( .i(\e[0][0][6] ), .c(
        \e_tx[0][0][6] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[7].north_rx  ( .i(\s_tx[0][3][7] ), .o(
        \n[0][0][7] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[7].west_rx  ( .i(\e_tx[3][0][7] ), .o(
        \w[0][0][7] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[7].south_tx  ( .i(out[7]), .c(
        \s_tx[0][0][7] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[7].east_tx  ( .i(\e[0][0][7] ), .c(
        \e_tx[0][0][7] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[8].north_rx  ( .i(\s_tx[0][3][8] ), .o(
        \n[0][0][8] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[8].west_rx  ( .i(\e_tx[3][0][8] ), .o(
        \w[0][0][8] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[8].south_tx  ( .i(out[8]), .c(
        \s_tx[0][0][8] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[8].east_tx  ( .i(\e[0][0][8] ), .c(
        \e_tx[0][0][8] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[9].north_rx  ( .i(\s_tx[0][3][9] ), .o(
        \n[0][0][9] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[9].west_rx  ( .i(\e_tx[3][0][9] ), .o(
        \w[0][0][9] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[9].south_tx  ( .i(out[9]), .c(
        \s_tx[0][0][9] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[9].east_tx  ( .i(\e[0][0][9] ), .c(
        \e_tx[0][0][9] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[10].north_rx  ( .i(\s_tx[0][3][10] ), .o(
        \n[0][0][10] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[10].west_rx  ( .i(\e_tx[3][0][10] ), .o(
        \w[0][0][10] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[10].south_tx  ( .i(out[10]), .c(
        \s_tx[0][0][10] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[10].east_tx  ( .i(\e[0][0][10] ), .c(
        \e_tx[0][0][10] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[11].north_rx  ( .i(\s_tx[0][3][11] ), .o(
        \n[0][0][11] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[11].west_rx  ( .i(\e_tx[3][0][11] ), .o(
        \w[0][0][11] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[11].south_tx  ( .i(out[11]), .c(
        \s_tx[0][0][11] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[11].east_tx  ( .i(\e[0][0][11] ), .c(
        \e_tx[0][0][11] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[12].north_rx  ( .i(\s_tx[0][3][12] ), .o(
        \n[0][0][12] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[12].west_rx  ( .i(\e_tx[3][0][12] ), .o(
        \w[0][0][12] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[12].south_tx  ( .i(out[12]), .c(
        \s_tx[0][0][12] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[12].east_tx  ( .i(\e[0][0][12] ), .c(
        \e_tx[0][0][12] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[13].north_rx  ( .i(\s_tx[0][3][13] ), .o(
        \n[0][0][13] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[13].west_rx  ( .i(\e_tx[3][0][13] ), .o(
        \w[0][0][13] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[13].south_tx  ( .i(out[13]), .c(
        \s_tx[0][0][13] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[13].east_tx  ( .i(\e[0][0][13] ), .c(
        \e_tx[0][0][13] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[14].north_rx  ( .i(\s_tx[0][3][14] ), .o(
        \n[0][0][14] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[14].west_rx  ( .i(\e_tx[3][0][14] ), .o(
        \w[0][0][14] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[14].south_tx  ( .i(out[14]), .c(
        \s_tx[0][0][14] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[14].east_tx  ( .i(\e[0][0][14] ), .c(
        \e_tx[0][0][14] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[15].north_rx  ( .i(\s_tx[0][3][15] ), .o(
        \n[0][0][15] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[15].west_rx  ( .i(\e_tx[3][0][15] ), .o(
        \w[0][0][15] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[15].south_tx  ( .i(out[15]), .c(
        \s_tx[0][0][15] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[15].east_tx  ( .i(\e[0][0][15] ), .c(
        \e_tx[0][0][15] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[16].north_rx  ( .i(\s_tx[0][3][16] ), .o(
        \n[0][0][16] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[16].west_rx  ( .i(\e_tx[3][0][16] ), .o(
        \w[0][0][16] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[16].south_tx  ( .i(out[16]), .c(
        \s_tx[0][0][16] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[16].east_tx  ( .i(\e[0][0][16] ), .c(
        \e_tx[0][0][16] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[17].north_rx  ( .i(\s_tx[0][3][17] ), .o(
        \n[0][0][17] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[17].west_rx  ( .i(\e_tx[3][0][17] ), .o(
        \w[0][0][17] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[17].south_tx  ( .i(out[17]), .c(
        \s_tx[0][0][17] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[17].east_tx  ( .i(\e[0][0][17] ), .c(
        \e_tx[0][0][17] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[18].north_rx  ( .i(\s_tx[0][3][18] ), .o(
        \n[0][0][18] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[18].west_rx  ( .i(\e_tx[3][0][18] ), .o(
        \w[0][0][18] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[18].south_tx  ( .i(out[18]), .c(
        \s_tx[0][0][18] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[18].east_tx  ( .i(\e[0][0][18] ), .c(
        \e_tx[0][0][18] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[19].north_rx  ( .i(\s_tx[0][3][19] ), .o(
        \n[0][0][19] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[19].west_rx  ( .i(\e_tx[3][0][19] ), .o(
        \w[0][0][19] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[19].south_tx  ( .i(out[19]), .c(
        \s_tx[0][0][19] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[19].east_tx  ( .i(\e[0][0][19] ), .c(
        \e_tx[0][0][19] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[20].north_rx  ( .i(\s_tx[0][3][20] ), .o(
        \n[0][0][20] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[20].west_rx  ( .i(\e_tx[3][0][20] ), .o(
        \w[0][0][20] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[20].south_tx  ( .i(out[20]), .c(
        \s_tx[0][0][20] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[20].east_tx  ( .i(\e[0][0][20] ), .c(
        \e_tx[0][0][20] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[21].north_rx  ( .i(\s_tx[0][3][21] ), .o(
        \n[0][0][21] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[21].west_rx  ( .i(\e_tx[3][0][21] ), .o(
        \w[0][0][21] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[21].south_tx  ( .i(out[21]), .c(
        \s_tx[0][0][21] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[21].east_tx  ( .i(\e[0][0][21] ), .c(
        \e_tx[0][0][21] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[22].north_rx  ( .i(\s_tx[0][3][22] ), .o(
        \n[0][0][22] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[22].west_rx  ( .i(\e_tx[3][0][22] ), .o(
        \w[0][0][22] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[22].south_tx  ( .i(out[22]), .c(
        \s_tx[0][0][22] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[22].east_tx  ( .i(\e[0][0][22] ), .c(
        \e_tx[0][0][22] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[23].north_rx  ( .i(\s_tx[0][3][23] ), .o(
        \n[0][0][23] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[23].west_rx  ( .i(\e_tx[3][0][23] ), .o(
        \w[0][0][23] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[23].south_tx  ( .i(out[23]), .c(
        \s_tx[0][0][23] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[23].east_tx  ( .i(\e[0][0][23] ), .c(
        \e_tx[0][0][23] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[24].north_rx  ( .i(\s_tx[0][3][24] ), .o(
        \n[0][0][24] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[24].west_rx  ( .i(\e_tx[3][0][24] ), .o(
        \w[0][0][24] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[24].south_tx  ( .i(out[24]), .c(
        \s_tx[0][0][24] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[24].east_tx  ( .i(\e[0][0][24] ), .c(
        \e_tx[0][0][24] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[25].north_rx  ( .i(\s_tx[0][3][25] ), .o(
        \n[0][0][25] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[25].west_rx  ( .i(\e_tx[3][0][25] ), .o(
        \w[0][0][25] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[25].south_tx  ( .i(out[25]), .c(
        \s_tx[0][0][25] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[25].east_tx  ( .i(\e[0][0][25] ), .c(
        \e_tx[0][0][25] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[26].north_rx  ( .i(\s_tx[0][3][26] ), .o(
        \n[0][0][26] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[26].west_rx  ( .i(\e_tx[3][0][26] ), .o(
        \w[0][0][26] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[26].south_tx  ( .i(out[26]), .c(
        \s_tx[0][0][26] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[26].east_tx  ( .i(\e[0][0][26] ), .c(
        \e_tx[0][0][26] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[27].north_rx  ( .i(\s_tx[0][3][27] ), .o(
        \n[0][0][27] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[27].west_rx  ( .i(\e_tx[3][0][27] ), .o(
        \w[0][0][27] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[27].south_tx  ( .i(out[27]), .c(
        \s_tx[0][0][27] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[27].east_tx  ( .i(\e[0][0][27] ), .c(
        \e_tx[0][0][27] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[28].north_rx  ( .i(\s_tx[0][3][28] ), .o(
        \n[0][0][28] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[28].west_rx  ( .i(\e_tx[3][0][28] ), .o(
        \w[0][0][28] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[28].south_tx  ( .i(out[28]), .c(
        \s_tx[0][0][28] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[28].east_tx  ( .i(\e[0][0][28] ), .c(
        \e_tx[0][0][28] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[29].north_rx  ( .i(\s_tx[0][3][29] ), .o(
        \n[0][0][29] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[29].west_rx  ( .i(\e_tx[3][0][29] ), .o(
        \w[0][0][29] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[29].south_tx  ( .i(out[29]), .c(
        \s_tx[0][0][29] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[29].east_tx  ( .i(\e[0][0][29] ), .c(
        \e_tx[0][0][29] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[30].north_rx  ( .i(\s_tx[0][3][30] ), .o(
        \n[0][0][30] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[30].west_rx  ( .i(\e_tx[3][0][30] ), .o(
        \w[0][0][30] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[30].south_tx  ( .i(out[30]), .c(
        \s_tx[0][0][30] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[30].east_tx  ( .i(\e[0][0][30] ), .c(
        \e_tx[0][0][30] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[31].north_rx  ( .i(\s_tx[0][3][31] ), .o(
        \n[0][0][31] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[31].west_rx  ( .i(\e_tx[3][0][31] ), .o(
        \w[0][0][31] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[31].south_tx  ( .i(out[31]), .c(
        \s_tx[0][0][31] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[31].east_tx  ( .i(\e[0][0][31] ), .c(
        \e_tx[0][0][31] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[32].north_rx  ( .i(\s_tx[0][3][32] ), .o(
        \n[0][0][32] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[32].west_rx  ( .i(\e_tx[3][0][32] ), .o(
        \w[0][0][32] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[32].south_tx  ( .i(\s[0][0][32] ), .c(
        \s_tx[0][0][32] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[32].east_tx  ( .i(\e[0][0][32] ), .c(
        \e_tx[0][0][32] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[33].north_rx  ( .i(\s_tx[0][3][33] ), .o(
        \n[0][0][33] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[33].west_rx  ( .i(\e_tx[3][0][33] ), .o(
        \w[0][0][33] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[33].south_tx  ( .i(\s[0][0][33] ), .c(
        \s_tx[0][0][33] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[33].east_tx  ( .i(\e[0][0][33] ), .c(
        \e_tx[0][0][33] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[34].north_rx  ( .i(\s_tx[0][3][34] ), .o(
        \n[0][0][34] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[34].west_rx  ( .i(\e_tx[3][0][34] ), .o(
        \w[0][0][34] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[34].south_tx  ( .i(\s[0][0][34] ), .c(
        \s_tx[0][0][34] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[34].east_tx  ( .i(\e[0][0][34] ), .c(
        \e_tx[0][0][34] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[35].north_rx  ( .i(\s_tx[0][3][35] ), .o(
        \n[0][0][35] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[35].west_rx  ( .i(\e_tx[3][0][35] ), .o(
        \w[0][0][35] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[35].south_tx  ( .i(\s[0][0][35] ), .c(
        \s_tx[0][0][35] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[35].east_tx  ( .i(\e[0][0][35] ), .c(
        \e_tx[0][0][35] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[36].north_rx  ( .i(\s_tx[0][3][36] ), .o(
        \n[0][0][36] ) );
  low_swing_rx \ys[0].xs[0].msg_txrx[36].west_rx  ( .i(\e_tx[3][0][36] ), .o(
        \w[0][0][36] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[36].south_tx  ( .i(\s[0][0][36] ), .c(
        \s_tx[0][0][36] ) );
  low_swing_tx \ys[0].xs[0].msg_txrx[36].east_tx  ( .i(\e[0][0][36] ), .c(
        \e_tx[0][0][36] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[0].north_rx  ( .i(\s_tx[1][3][0] ), .o(
        \n[1][0][0] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[0].west_rx  ( .i(\e_tx[0][0][0] ), .o(
        \w[1][0][0] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[0].south_tx  ( .i(\s[1][0][0] ), .c(
        \s_tx[1][0][0] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[0].east_tx  ( .i(\e[1][0][0] ), .c(
        \e_tx[1][0][0] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[1].north_rx  ( .i(\s_tx[1][3][1] ), .o(
        \n[1][0][1] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[1].west_rx  ( .i(\e_tx[0][0][1] ), .o(
        \w[1][0][1] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[1].south_tx  ( .i(\s[1][0][1] ), .c(
        \s_tx[1][0][1] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[1].east_tx  ( .i(\e[1][0][1] ), .c(
        \e_tx[1][0][1] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[2].north_rx  ( .i(\s_tx[1][3][2] ), .o(
        \n[1][0][2] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[2].west_rx  ( .i(\e_tx[0][0][2] ), .o(
        \w[1][0][2] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[2].south_tx  ( .i(\s[1][0][2] ), .c(
        \s_tx[1][0][2] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[2].east_tx  ( .i(\e[1][0][2] ), .c(
        \e_tx[1][0][2] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[3].north_rx  ( .i(\s_tx[1][3][3] ), .o(
        \n[1][0][3] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[3].west_rx  ( .i(\e_tx[0][0][3] ), .o(
        \w[1][0][3] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[3].south_tx  ( .i(\s[1][0][3] ), .c(
        \s_tx[1][0][3] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[3].east_tx  ( .i(\e[1][0][3] ), .c(
        \e_tx[1][0][3] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[4].north_rx  ( .i(\s_tx[1][3][4] ), .o(
        \n[1][0][4] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[4].west_rx  ( .i(\e_tx[0][0][4] ), .o(
        \w[1][0][4] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[4].south_tx  ( .i(\s[1][0][4] ), .c(
        \s_tx[1][0][4] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[4].east_tx  ( .i(\e[1][0][4] ), .c(
        \e_tx[1][0][4] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[5].north_rx  ( .i(\s_tx[1][3][5] ), .o(
        \n[1][0][5] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[5].west_rx  ( .i(\e_tx[0][0][5] ), .o(
        \w[1][0][5] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[5].south_tx  ( .i(\s[1][0][5] ), .c(
        \s_tx[1][0][5] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[5].east_tx  ( .i(\e[1][0][5] ), .c(
        \e_tx[1][0][5] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[6].north_rx  ( .i(\s_tx[1][3][6] ), .o(
        \n[1][0][6] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[6].west_rx  ( .i(\e_tx[0][0][6] ), .o(
        \w[1][0][6] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[6].south_tx  ( .i(\s[1][0][6] ), .c(
        \s_tx[1][0][6] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[6].east_tx  ( .i(\e[1][0][6] ), .c(
        \e_tx[1][0][6] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[7].north_rx  ( .i(\s_tx[1][3][7] ), .o(
        \n[1][0][7] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[7].west_rx  ( .i(\e_tx[0][0][7] ), .o(
        \w[1][0][7] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[7].south_tx  ( .i(\s[1][0][7] ), .c(
        \s_tx[1][0][7] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[7].east_tx  ( .i(\e[1][0][7] ), .c(
        \e_tx[1][0][7] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[8].north_rx  ( .i(\s_tx[1][3][8] ), .o(
        \n[1][0][8] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[8].west_rx  ( .i(\e_tx[0][0][8] ), .o(
        \w[1][0][8] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[8].south_tx  ( .i(\s[1][0][8] ), .c(
        \s_tx[1][0][8] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[8].east_tx  ( .i(\e[1][0][8] ), .c(
        \e_tx[1][0][8] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[9].north_rx  ( .i(\s_tx[1][3][9] ), .o(
        \n[1][0][9] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[9].west_rx  ( .i(\e_tx[0][0][9] ), .o(
        \w[1][0][9] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[9].south_tx  ( .i(\s[1][0][9] ), .c(
        \s_tx[1][0][9] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[9].east_tx  ( .i(\e[1][0][9] ), .c(
        \e_tx[1][0][9] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[10].north_rx  ( .i(\s_tx[1][3][10] ), .o(
        \n[1][0][10] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[10].west_rx  ( .i(\e_tx[0][0][10] ), .o(
        \w[1][0][10] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[10].south_tx  ( .i(\s[1][0][10] ), .c(
        \s_tx[1][0][10] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[10].east_tx  ( .i(\e[1][0][10] ), .c(
        \e_tx[1][0][10] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[11].north_rx  ( .i(\s_tx[1][3][11] ), .o(
        \n[1][0][11] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[11].west_rx  ( .i(\e_tx[0][0][11] ), .o(
        \w[1][0][11] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[11].south_tx  ( .i(\s[1][0][11] ), .c(
        \s_tx[1][0][11] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[11].east_tx  ( .i(\e[1][0][11] ), .c(
        \e_tx[1][0][11] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[12].north_rx  ( .i(\s_tx[1][3][12] ), .o(
        \n[1][0][12] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[12].west_rx  ( .i(\e_tx[0][0][12] ), .o(
        \w[1][0][12] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[12].south_tx  ( .i(\s[1][0][12] ), .c(
        \s_tx[1][0][12] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[12].east_tx  ( .i(\e[1][0][12] ), .c(
        \e_tx[1][0][12] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[13].north_rx  ( .i(\s_tx[1][3][13] ), .o(
        \n[1][0][13] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[13].west_rx  ( .i(\e_tx[0][0][13] ), .o(
        \w[1][0][13] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[13].south_tx  ( .i(\s[1][0][13] ), .c(
        \s_tx[1][0][13] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[13].east_tx  ( .i(\e[1][0][13] ), .c(
        \e_tx[1][0][13] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[14].north_rx  ( .i(\s_tx[1][3][14] ), .o(
        \n[1][0][14] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[14].west_rx  ( .i(\e_tx[0][0][14] ), .o(
        \w[1][0][14] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[14].south_tx  ( .i(\s[1][0][14] ), .c(
        \s_tx[1][0][14] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[14].east_tx  ( .i(\e[1][0][14] ), .c(
        \e_tx[1][0][14] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[15].north_rx  ( .i(\s_tx[1][3][15] ), .o(
        \n[1][0][15] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[15].west_rx  ( .i(\e_tx[0][0][15] ), .o(
        \w[1][0][15] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[15].south_tx  ( .i(\s[1][0][15] ), .c(
        \s_tx[1][0][15] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[15].east_tx  ( .i(\e[1][0][15] ), .c(
        \e_tx[1][0][15] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[16].north_rx  ( .i(\s_tx[1][3][16] ), .o(
        \n[1][0][16] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[16].west_rx  ( .i(\e_tx[0][0][16] ), .o(
        \w[1][0][16] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[16].south_tx  ( .i(\s[1][0][16] ), .c(
        \s_tx[1][0][16] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[16].east_tx  ( .i(\e[1][0][16] ), .c(
        \e_tx[1][0][16] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[17].north_rx  ( .i(\s_tx[1][3][17] ), .o(
        \n[1][0][17] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[17].west_rx  ( .i(\e_tx[0][0][17] ), .o(
        \w[1][0][17] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[17].south_tx  ( .i(\s[1][0][17] ), .c(
        \s_tx[1][0][17] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[17].east_tx  ( .i(\e[1][0][17] ), .c(
        \e_tx[1][0][17] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[18].north_rx  ( .i(\s_tx[1][3][18] ), .o(
        \n[1][0][18] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[18].west_rx  ( .i(\e_tx[0][0][18] ), .o(
        \w[1][0][18] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[18].south_tx  ( .i(\s[1][0][18] ), .c(
        \s_tx[1][0][18] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[18].east_tx  ( .i(\e[1][0][18] ), .c(
        \e_tx[1][0][18] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[19].north_rx  ( .i(\s_tx[1][3][19] ), .o(
        \n[1][0][19] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[19].west_rx  ( .i(\e_tx[0][0][19] ), .o(
        \w[1][0][19] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[19].south_tx  ( .i(\s[1][0][19] ), .c(
        \s_tx[1][0][19] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[19].east_tx  ( .i(\e[1][0][19] ), .c(
        \e_tx[1][0][19] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[20].north_rx  ( .i(\s_tx[1][3][20] ), .o(
        \n[1][0][20] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[20].west_rx  ( .i(\e_tx[0][0][20] ), .o(
        \w[1][0][20] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[20].south_tx  ( .i(\s[1][0][20] ), .c(
        \s_tx[1][0][20] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[20].east_tx  ( .i(\e[1][0][20] ), .c(
        \e_tx[1][0][20] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[21].north_rx  ( .i(\s_tx[1][3][21] ), .o(
        \n[1][0][21] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[21].west_rx  ( .i(\e_tx[0][0][21] ), .o(
        \w[1][0][21] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[21].south_tx  ( .i(\s[1][0][21] ), .c(
        \s_tx[1][0][21] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[21].east_tx  ( .i(\e[1][0][21] ), .c(
        \e_tx[1][0][21] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[22].north_rx  ( .i(\s_tx[1][3][22] ), .o(
        \n[1][0][22] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[22].west_rx  ( .i(\e_tx[0][0][22] ), .o(
        \w[1][0][22] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[22].south_tx  ( .i(\s[1][0][22] ), .c(
        \s_tx[1][0][22] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[22].east_tx  ( .i(\e[1][0][22] ), .c(
        \e_tx[1][0][22] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[23].north_rx  ( .i(\s_tx[1][3][23] ), .o(
        \n[1][0][23] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[23].west_rx  ( .i(\e_tx[0][0][23] ), .o(
        \w[1][0][23] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[23].south_tx  ( .i(\s[1][0][23] ), .c(
        \s_tx[1][0][23] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[23].east_tx  ( .i(\e[1][0][23] ), .c(
        \e_tx[1][0][23] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[24].north_rx  ( .i(\s_tx[1][3][24] ), .o(
        \n[1][0][24] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[24].west_rx  ( .i(\e_tx[0][0][24] ), .o(
        \w[1][0][24] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[24].south_tx  ( .i(\s[1][0][24] ), .c(
        \s_tx[1][0][24] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[24].east_tx  ( .i(\e[1][0][24] ), .c(
        \e_tx[1][0][24] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[25].north_rx  ( .i(\s_tx[1][3][25] ), .o(
        \n[1][0][25] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[25].west_rx  ( .i(\e_tx[0][0][25] ), .o(
        \w[1][0][25] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[25].south_tx  ( .i(\s[1][0][25] ), .c(
        \s_tx[1][0][25] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[25].east_tx  ( .i(\e[1][0][25] ), .c(
        \e_tx[1][0][25] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[26].north_rx  ( .i(\s_tx[1][3][26] ), .o(
        \n[1][0][26] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[26].west_rx  ( .i(\e_tx[0][0][26] ), .o(
        \w[1][0][26] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[26].south_tx  ( .i(\s[1][0][26] ), .c(
        \s_tx[1][0][26] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[26].east_tx  ( .i(\e[1][0][26] ), .c(
        \e_tx[1][0][26] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[27].north_rx  ( .i(\s_tx[1][3][27] ), .o(
        \n[1][0][27] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[27].west_rx  ( .i(\e_tx[0][0][27] ), .o(
        \w[1][0][27] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[27].south_tx  ( .i(\s[1][0][27] ), .c(
        \s_tx[1][0][27] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[27].east_tx  ( .i(\e[1][0][27] ), .c(
        \e_tx[1][0][27] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[28].north_rx  ( .i(\s_tx[1][3][28] ), .o(
        \n[1][0][28] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[28].west_rx  ( .i(\e_tx[0][0][28] ), .o(
        \w[1][0][28] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[28].south_tx  ( .i(\s[1][0][28] ), .c(
        \s_tx[1][0][28] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[28].east_tx  ( .i(\e[1][0][28] ), .c(
        \e_tx[1][0][28] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[29].north_rx  ( .i(\s_tx[1][3][29] ), .o(
        \n[1][0][29] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[29].west_rx  ( .i(\e_tx[0][0][29] ), .o(
        \w[1][0][29] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[29].south_tx  ( .i(\s[1][0][29] ), .c(
        \s_tx[1][0][29] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[29].east_tx  ( .i(\e[1][0][29] ), .c(
        \e_tx[1][0][29] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[30].north_rx  ( .i(\s_tx[1][3][30] ), .o(
        \n[1][0][30] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[30].west_rx  ( .i(\e_tx[0][0][30] ), .o(
        \w[1][0][30] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[30].south_tx  ( .i(\s[1][0][30] ), .c(
        \s_tx[1][0][30] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[30].east_tx  ( .i(\e[1][0][30] ), .c(
        \e_tx[1][0][30] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[31].north_rx  ( .i(\s_tx[1][3][31] ), .o(
        \n[1][0][31] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[31].west_rx  ( .i(\e_tx[0][0][31] ), .o(
        \w[1][0][31] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[31].south_tx  ( .i(\s[1][0][31] ), .c(
        \s_tx[1][0][31] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[31].east_tx  ( .i(\e[1][0][31] ), .c(
        \e_tx[1][0][31] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[32].north_rx  ( .i(\s_tx[1][3][32] ), .o(
        \n[1][0][32] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[32].west_rx  ( .i(\e_tx[0][0][32] ), .o(
        \w[1][0][32] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[32].south_tx  ( .i(\s[1][0][32] ), .c(
        \s_tx[1][0][32] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[32].east_tx  ( .i(\e[1][0][32] ), .c(
        \e_tx[1][0][32] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[33].north_rx  ( .i(\s_tx[1][3][33] ), .o(
        \n[1][0][33] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[33].west_rx  ( .i(\e_tx[0][0][33] ), .o(
        \w[1][0][33] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[33].south_tx  ( .i(\s[1][0][33] ), .c(
        \s_tx[1][0][33] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[33].east_tx  ( .i(\e[1][0][33] ), .c(
        \e_tx[1][0][33] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[34].north_rx  ( .i(\s_tx[1][3][34] ), .o(
        \n[1][0][34] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[34].west_rx  ( .i(\e_tx[0][0][34] ), .o(
        \w[1][0][34] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[34].south_tx  ( .i(\s[1][0][34] ), .c(
        \s_tx[1][0][34] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[34].east_tx  ( .i(\e[1][0][34] ), .c(
        \e_tx[1][0][34] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[35].north_rx  ( .i(\s_tx[1][3][35] ), .o(
        \n[1][0][35] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[35].west_rx  ( .i(\e_tx[0][0][35] ), .o(
        \w[1][0][35] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[35].south_tx  ( .i(\s[1][0][35] ), .c(
        \s_tx[1][0][35] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[35].east_tx  ( .i(\e[1][0][35] ), .c(
        \e_tx[1][0][35] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[36].north_rx  ( .i(\s_tx[1][3][36] ), .o(
        \n[1][0][36] ) );
  low_swing_rx \ys[0].xs[1].msg_txrx[36].west_rx  ( .i(\e_tx[0][0][36] ), .o(
        \w[1][0][36] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[36].south_tx  ( .i(\s[1][0][36] ), .c(
        \s_tx[1][0][36] ) );
  low_swing_tx \ys[0].xs[1].msg_txrx[36].east_tx  ( .i(\e[1][0][36] ), .c(
        \e_tx[1][0][36] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[0].north_rx  ( .i(\s_tx[2][3][0] ), .o(
        \n[2][0][0] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[0].west_rx  ( .i(\e_tx[1][0][0] ), .o(
        \w[2][0][0] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[0].south_tx  ( .i(\s[2][0][0] ), .c(
        \s_tx[2][0][0] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[0].east_tx  ( .i(\e[2][0][0] ), .c(
        \e_tx[2][0][0] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[1].north_rx  ( .i(\s_tx[2][3][1] ), .o(
        \n[2][0][1] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[1].west_rx  ( .i(\e_tx[1][0][1] ), .o(
        \w[2][0][1] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[1].south_tx  ( .i(\s[2][0][1] ), .c(
        \s_tx[2][0][1] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[1].east_tx  ( .i(\e[2][0][1] ), .c(
        \e_tx[2][0][1] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[2].north_rx  ( .i(\s_tx[2][3][2] ), .o(
        \n[2][0][2] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[2].west_rx  ( .i(\e_tx[1][0][2] ), .o(
        \w[2][0][2] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[2].south_tx  ( .i(\s[2][0][2] ), .c(
        \s_tx[2][0][2] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[2].east_tx  ( .i(\e[2][0][2] ), .c(
        \e_tx[2][0][2] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[3].north_rx  ( .i(\s_tx[2][3][3] ), .o(
        \n[2][0][3] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[3].west_rx  ( .i(\e_tx[1][0][3] ), .o(
        \w[2][0][3] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[3].south_tx  ( .i(\s[2][0][3] ), .c(
        \s_tx[2][0][3] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[3].east_tx  ( .i(\e[2][0][3] ), .c(
        \e_tx[2][0][3] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[4].north_rx  ( .i(\s_tx[2][3][4] ), .o(
        \n[2][0][4] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[4].west_rx  ( .i(\e_tx[1][0][4] ), .o(
        \w[2][0][4] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[4].south_tx  ( .i(\s[2][0][4] ), .c(
        \s_tx[2][0][4] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[4].east_tx  ( .i(\e[2][0][4] ), .c(
        \e_tx[2][0][4] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[5].north_rx  ( .i(\s_tx[2][3][5] ), .o(
        \n[2][0][5] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[5].west_rx  ( .i(\e_tx[1][0][5] ), .o(
        \w[2][0][5] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[5].south_tx  ( .i(\s[2][0][5] ), .c(
        \s_tx[2][0][5] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[5].east_tx  ( .i(\e[2][0][5] ), .c(
        \e_tx[2][0][5] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[6].north_rx  ( .i(\s_tx[2][3][6] ), .o(
        \n[2][0][6] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[6].west_rx  ( .i(\e_tx[1][0][6] ), .o(
        \w[2][0][6] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[6].south_tx  ( .i(\s[2][0][6] ), .c(
        \s_tx[2][0][6] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[6].east_tx  ( .i(\e[2][0][6] ), .c(
        \e_tx[2][0][6] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[7].north_rx  ( .i(\s_tx[2][3][7] ), .o(
        \n[2][0][7] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[7].west_rx  ( .i(\e_tx[1][0][7] ), .o(
        \w[2][0][7] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[7].south_tx  ( .i(\s[2][0][7] ), .c(
        \s_tx[2][0][7] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[7].east_tx  ( .i(\e[2][0][7] ), .c(
        \e_tx[2][0][7] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[8].north_rx  ( .i(\s_tx[2][3][8] ), .o(
        \n[2][0][8] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[8].west_rx  ( .i(\e_tx[1][0][8] ), .o(
        \w[2][0][8] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[8].south_tx  ( .i(\s[2][0][8] ), .c(
        \s_tx[2][0][8] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[8].east_tx  ( .i(\e[2][0][8] ), .c(
        \e_tx[2][0][8] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[9].north_rx  ( .i(\s_tx[2][3][9] ), .o(
        \n[2][0][9] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[9].west_rx  ( .i(\e_tx[1][0][9] ), .o(
        \w[2][0][9] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[9].south_tx  ( .i(\s[2][0][9] ), .c(
        \s_tx[2][0][9] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[9].east_tx  ( .i(\e[2][0][9] ), .c(
        \e_tx[2][0][9] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[10].north_rx  ( .i(\s_tx[2][3][10] ), .o(
        \n[2][0][10] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[10].west_rx  ( .i(\e_tx[1][0][10] ), .o(
        \w[2][0][10] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[10].south_tx  ( .i(\s[2][0][10] ), .c(
        \s_tx[2][0][10] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[10].east_tx  ( .i(\e[2][0][10] ), .c(
        \e_tx[2][0][10] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[11].north_rx  ( .i(\s_tx[2][3][11] ), .o(
        \n[2][0][11] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[11].west_rx  ( .i(\e_tx[1][0][11] ), .o(
        \w[2][0][11] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[11].south_tx  ( .i(\s[2][0][11] ), .c(
        \s_tx[2][0][11] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[11].east_tx  ( .i(\e[2][0][11] ), .c(
        \e_tx[2][0][11] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[12].north_rx  ( .i(\s_tx[2][3][12] ), .o(
        \n[2][0][12] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[12].west_rx  ( .i(\e_tx[1][0][12] ), .o(
        \w[2][0][12] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[12].south_tx  ( .i(\s[2][0][12] ), .c(
        \s_tx[2][0][12] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[12].east_tx  ( .i(\e[2][0][12] ), .c(
        \e_tx[2][0][12] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[13].north_rx  ( .i(\s_tx[2][3][13] ), .o(
        \n[2][0][13] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[13].west_rx  ( .i(\e_tx[1][0][13] ), .o(
        \w[2][0][13] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[13].south_tx  ( .i(\s[2][0][13] ), .c(
        \s_tx[2][0][13] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[13].east_tx  ( .i(\e[2][0][13] ), .c(
        \e_tx[2][0][13] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[14].north_rx  ( .i(\s_tx[2][3][14] ), .o(
        \n[2][0][14] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[14].west_rx  ( .i(\e_tx[1][0][14] ), .o(
        \w[2][0][14] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[14].south_tx  ( .i(\s[2][0][14] ), .c(
        \s_tx[2][0][14] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[14].east_tx  ( .i(\e[2][0][14] ), .c(
        \e_tx[2][0][14] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[15].north_rx  ( .i(\s_tx[2][3][15] ), .o(
        \n[2][0][15] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[15].west_rx  ( .i(\e_tx[1][0][15] ), .o(
        \w[2][0][15] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[15].south_tx  ( .i(\s[2][0][15] ), .c(
        \s_tx[2][0][15] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[15].east_tx  ( .i(\e[2][0][15] ), .c(
        \e_tx[2][0][15] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[16].north_rx  ( .i(\s_tx[2][3][16] ), .o(
        \n[2][0][16] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[16].west_rx  ( .i(\e_tx[1][0][16] ), .o(
        \w[2][0][16] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[16].south_tx  ( .i(\s[2][0][16] ), .c(
        \s_tx[2][0][16] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[16].east_tx  ( .i(\e[2][0][16] ), .c(
        \e_tx[2][0][16] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[17].north_rx  ( .i(\s_tx[2][3][17] ), .o(
        \n[2][0][17] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[17].west_rx  ( .i(\e_tx[1][0][17] ), .o(
        \w[2][0][17] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[17].south_tx  ( .i(\s[2][0][17] ), .c(
        \s_tx[2][0][17] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[17].east_tx  ( .i(\e[2][0][17] ), .c(
        \e_tx[2][0][17] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[18].north_rx  ( .i(\s_tx[2][3][18] ), .o(
        \n[2][0][18] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[18].west_rx  ( .i(\e_tx[1][0][18] ), .o(
        \w[2][0][18] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[18].south_tx  ( .i(\s[2][0][18] ), .c(
        \s_tx[2][0][18] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[18].east_tx  ( .i(\e[2][0][18] ), .c(
        \e_tx[2][0][18] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[19].north_rx  ( .i(\s_tx[2][3][19] ), .o(
        \n[2][0][19] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[19].west_rx  ( .i(\e_tx[1][0][19] ), .o(
        \w[2][0][19] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[19].south_tx  ( .i(\s[2][0][19] ), .c(
        \s_tx[2][0][19] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[19].east_tx  ( .i(\e[2][0][19] ), .c(
        \e_tx[2][0][19] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[20].north_rx  ( .i(\s_tx[2][3][20] ), .o(
        \n[2][0][20] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[20].west_rx  ( .i(\e_tx[1][0][20] ), .o(
        \w[2][0][20] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[20].south_tx  ( .i(\s[2][0][20] ), .c(
        \s_tx[2][0][20] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[20].east_tx  ( .i(\e[2][0][20] ), .c(
        \e_tx[2][0][20] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[21].north_rx  ( .i(\s_tx[2][3][21] ), .o(
        \n[2][0][21] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[21].west_rx  ( .i(\e_tx[1][0][21] ), .o(
        \w[2][0][21] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[21].south_tx  ( .i(\s[2][0][21] ), .c(
        \s_tx[2][0][21] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[21].east_tx  ( .i(\e[2][0][21] ), .c(
        \e_tx[2][0][21] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[22].north_rx  ( .i(\s_tx[2][3][22] ), .o(
        \n[2][0][22] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[22].west_rx  ( .i(\e_tx[1][0][22] ), .o(
        \w[2][0][22] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[22].south_tx  ( .i(\s[2][0][22] ), .c(
        \s_tx[2][0][22] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[22].east_tx  ( .i(\e[2][0][22] ), .c(
        \e_tx[2][0][22] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[23].north_rx  ( .i(\s_tx[2][3][23] ), .o(
        \n[2][0][23] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[23].west_rx  ( .i(\e_tx[1][0][23] ), .o(
        \w[2][0][23] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[23].south_tx  ( .i(\s[2][0][23] ), .c(
        \s_tx[2][0][23] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[23].east_tx  ( .i(\e[2][0][23] ), .c(
        \e_tx[2][0][23] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[24].north_rx  ( .i(\s_tx[2][3][24] ), .o(
        \n[2][0][24] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[24].west_rx  ( .i(\e_tx[1][0][24] ), .o(
        \w[2][0][24] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[24].south_tx  ( .i(\s[2][0][24] ), .c(
        \s_tx[2][0][24] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[24].east_tx  ( .i(\e[2][0][24] ), .c(
        \e_tx[2][0][24] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[25].north_rx  ( .i(\s_tx[2][3][25] ), .o(
        \n[2][0][25] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[25].west_rx  ( .i(\e_tx[1][0][25] ), .o(
        \w[2][0][25] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[25].south_tx  ( .i(\s[2][0][25] ), .c(
        \s_tx[2][0][25] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[25].east_tx  ( .i(\e[2][0][25] ), .c(
        \e_tx[2][0][25] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[26].north_rx  ( .i(\s_tx[2][3][26] ), .o(
        \n[2][0][26] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[26].west_rx  ( .i(\e_tx[1][0][26] ), .o(
        \w[2][0][26] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[26].south_tx  ( .i(\s[2][0][26] ), .c(
        \s_tx[2][0][26] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[26].east_tx  ( .i(\e[2][0][26] ), .c(
        \e_tx[2][0][26] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[27].north_rx  ( .i(\s_tx[2][3][27] ), .o(
        \n[2][0][27] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[27].west_rx  ( .i(\e_tx[1][0][27] ), .o(
        \w[2][0][27] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[27].south_tx  ( .i(\s[2][0][27] ), .c(
        \s_tx[2][0][27] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[27].east_tx  ( .i(\e[2][0][27] ), .c(
        \e_tx[2][0][27] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[28].north_rx  ( .i(\s_tx[2][3][28] ), .o(
        \n[2][0][28] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[28].west_rx  ( .i(\e_tx[1][0][28] ), .o(
        \w[2][0][28] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[28].south_tx  ( .i(\s[2][0][28] ), .c(
        \s_tx[2][0][28] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[28].east_tx  ( .i(\e[2][0][28] ), .c(
        \e_tx[2][0][28] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[29].north_rx  ( .i(\s_tx[2][3][29] ), .o(
        \n[2][0][29] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[29].west_rx  ( .i(\e_tx[1][0][29] ), .o(
        \w[2][0][29] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[29].south_tx  ( .i(\s[2][0][29] ), .c(
        \s_tx[2][0][29] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[29].east_tx  ( .i(\e[2][0][29] ), .c(
        \e_tx[2][0][29] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[30].north_rx  ( .i(\s_tx[2][3][30] ), .o(
        \n[2][0][30] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[30].west_rx  ( .i(\e_tx[1][0][30] ), .o(
        \w[2][0][30] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[30].south_tx  ( .i(\s[2][0][30] ), .c(
        \s_tx[2][0][30] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[30].east_tx  ( .i(\e[2][0][30] ), .c(
        \e_tx[2][0][30] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[31].north_rx  ( .i(\s_tx[2][3][31] ), .o(
        \n[2][0][31] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[31].west_rx  ( .i(\e_tx[1][0][31] ), .o(
        \w[2][0][31] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[31].south_tx  ( .i(\s[2][0][31] ), .c(
        \s_tx[2][0][31] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[31].east_tx  ( .i(\e[2][0][31] ), .c(
        \e_tx[2][0][31] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[32].north_rx  ( .i(\s_tx[2][3][32] ), .o(
        \n[2][0][32] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[32].west_rx  ( .i(\e_tx[1][0][32] ), .o(
        \w[2][0][32] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[32].south_tx  ( .i(\s[2][0][32] ), .c(
        \s_tx[2][0][32] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[32].east_tx  ( .i(\e[2][0][32] ), .c(
        \e_tx[2][0][32] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[33].north_rx  ( .i(\s_tx[2][3][33] ), .o(
        \n[2][0][33] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[33].west_rx  ( .i(\e_tx[1][0][33] ), .o(
        \w[2][0][33] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[33].south_tx  ( .i(\s[2][0][33] ), .c(
        \s_tx[2][0][33] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[33].east_tx  ( .i(\e[2][0][33] ), .c(
        \e_tx[2][0][33] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[34].north_rx  ( .i(\s_tx[2][3][34] ), .o(
        \n[2][0][34] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[34].west_rx  ( .i(\e_tx[1][0][34] ), .o(
        \w[2][0][34] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[34].south_tx  ( .i(\s[2][0][34] ), .c(
        \s_tx[2][0][34] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[34].east_tx  ( .i(\e[2][0][34] ), .c(
        \e_tx[2][0][34] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[35].north_rx  ( .i(\s_tx[2][3][35] ), .o(
        \n[2][0][35] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[35].west_rx  ( .i(\e_tx[1][0][35] ), .o(
        \w[2][0][35] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[35].south_tx  ( .i(\s[2][0][35] ), .c(
        \s_tx[2][0][35] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[35].east_tx  ( .i(\e[2][0][35] ), .c(
        \e_tx[2][0][35] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[36].north_rx  ( .i(\s_tx[2][3][36] ), .o(
        \n[2][0][36] ) );
  low_swing_rx \ys[0].xs[2].msg_txrx[36].west_rx  ( .i(\e_tx[1][0][36] ), .o(
        \w[2][0][36] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[36].south_tx  ( .i(\s[2][0][36] ), .c(
        \s_tx[2][0][36] ) );
  low_swing_tx \ys[0].xs[2].msg_txrx[36].east_tx  ( .i(\e[2][0][36] ), .c(
        \e_tx[2][0][36] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[0].north_rx  ( .i(\s_tx[3][3][0] ), .o(
        \n[3][0][0] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[0].west_rx  ( .i(\e_tx[2][0][0] ), .o(
        \w[3][0][0] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[0].south_tx  ( .i(\s[3][0][0] ), .c(
        \s_tx[3][0][0] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[0].east_tx  ( .i(\e[3][0][0] ), .c(
        \e_tx[3][0][0] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[1].north_rx  ( .i(\s_tx[3][3][1] ), .o(
        \n[3][0][1] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[1].west_rx  ( .i(\e_tx[2][0][1] ), .o(
        \w[3][0][1] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[1].south_tx  ( .i(\s[3][0][1] ), .c(
        \s_tx[3][0][1] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[1].east_tx  ( .i(\e[3][0][1] ), .c(
        \e_tx[3][0][1] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[2].north_rx  ( .i(\s_tx[3][3][2] ), .o(
        \n[3][0][2] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[2].west_rx  ( .i(\e_tx[2][0][2] ), .o(
        \w[3][0][2] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[2].south_tx  ( .i(\s[3][0][2] ), .c(
        \s_tx[3][0][2] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[2].east_tx  ( .i(\e[3][0][2] ), .c(
        \e_tx[3][0][2] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[3].north_rx  ( .i(\s_tx[3][3][3] ), .o(
        \n[3][0][3] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[3].west_rx  ( .i(\e_tx[2][0][3] ), .o(
        \w[3][0][3] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[3].south_tx  ( .i(\s[3][0][3] ), .c(
        \s_tx[3][0][3] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[3].east_tx  ( .i(\e[3][0][3] ), .c(
        \e_tx[3][0][3] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[4].north_rx  ( .i(\s_tx[3][3][4] ), .o(
        \n[3][0][4] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[4].west_rx  ( .i(\e_tx[2][0][4] ), .o(
        \w[3][0][4] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[4].south_tx  ( .i(\s[3][0][4] ), .c(
        \s_tx[3][0][4] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[4].east_tx  ( .i(\e[3][0][4] ), .c(
        \e_tx[3][0][4] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[5].north_rx  ( .i(\s_tx[3][3][5] ), .o(
        \n[3][0][5] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[5].west_rx  ( .i(\e_tx[2][0][5] ), .o(
        \w[3][0][5] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[5].south_tx  ( .i(\s[3][0][5] ), .c(
        \s_tx[3][0][5] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[5].east_tx  ( .i(\e[3][0][5] ), .c(
        \e_tx[3][0][5] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[6].north_rx  ( .i(\s_tx[3][3][6] ), .o(
        \n[3][0][6] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[6].west_rx  ( .i(\e_tx[2][0][6] ), .o(
        \w[3][0][6] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[6].south_tx  ( .i(\s[3][0][6] ), .c(
        \s_tx[3][0][6] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[6].east_tx  ( .i(\e[3][0][6] ), .c(
        \e_tx[3][0][6] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[7].north_rx  ( .i(\s_tx[3][3][7] ), .o(
        \n[3][0][7] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[7].west_rx  ( .i(\e_tx[2][0][7] ), .o(
        \w[3][0][7] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[7].south_tx  ( .i(\s[3][0][7] ), .c(
        \s_tx[3][0][7] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[7].east_tx  ( .i(\e[3][0][7] ), .c(
        \e_tx[3][0][7] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[8].north_rx  ( .i(\s_tx[3][3][8] ), .o(
        \n[3][0][8] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[8].west_rx  ( .i(\e_tx[2][0][8] ), .o(
        \w[3][0][8] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[8].south_tx  ( .i(\s[3][0][8] ), .c(
        \s_tx[3][0][8] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[8].east_tx  ( .i(\e[3][0][8] ), .c(
        \e_tx[3][0][8] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[9].north_rx  ( .i(\s_tx[3][3][9] ), .o(
        \n[3][0][9] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[9].west_rx  ( .i(\e_tx[2][0][9] ), .o(
        \w[3][0][9] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[9].south_tx  ( .i(\s[3][0][9] ), .c(
        \s_tx[3][0][9] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[9].east_tx  ( .i(\e[3][0][9] ), .c(
        \e_tx[3][0][9] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[10].north_rx  ( .i(\s_tx[3][3][10] ), .o(
        \n[3][0][10] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[10].west_rx  ( .i(\e_tx[2][0][10] ), .o(
        \w[3][0][10] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[10].south_tx  ( .i(\s[3][0][10] ), .c(
        \s_tx[3][0][10] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[10].east_tx  ( .i(\e[3][0][10] ), .c(
        \e_tx[3][0][10] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[11].north_rx  ( .i(\s_tx[3][3][11] ), .o(
        \n[3][0][11] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[11].west_rx  ( .i(\e_tx[2][0][11] ), .o(
        \w[3][0][11] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[11].south_tx  ( .i(\s[3][0][11] ), .c(
        \s_tx[3][0][11] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[11].east_tx  ( .i(\e[3][0][11] ), .c(
        \e_tx[3][0][11] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[12].north_rx  ( .i(\s_tx[3][3][12] ), .o(
        \n[3][0][12] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[12].west_rx  ( .i(\e_tx[2][0][12] ), .o(
        \w[3][0][12] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[12].south_tx  ( .i(\s[3][0][12] ), .c(
        \s_tx[3][0][12] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[12].east_tx  ( .i(\e[3][0][12] ), .c(
        \e_tx[3][0][12] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[13].north_rx  ( .i(\s_tx[3][3][13] ), .o(
        \n[3][0][13] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[13].west_rx  ( .i(\e_tx[2][0][13] ), .o(
        \w[3][0][13] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[13].south_tx  ( .i(\s[3][0][13] ), .c(
        \s_tx[3][0][13] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[13].east_tx  ( .i(\e[3][0][13] ), .c(
        \e_tx[3][0][13] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[14].north_rx  ( .i(\s_tx[3][3][14] ), .o(
        \n[3][0][14] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[14].west_rx  ( .i(\e_tx[2][0][14] ), .o(
        \w[3][0][14] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[14].south_tx  ( .i(\s[3][0][14] ), .c(
        \s_tx[3][0][14] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[14].east_tx  ( .i(\e[3][0][14] ), .c(
        \e_tx[3][0][14] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[15].north_rx  ( .i(\s_tx[3][3][15] ), .o(
        \n[3][0][15] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[15].west_rx  ( .i(\e_tx[2][0][15] ), .o(
        \w[3][0][15] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[15].south_tx  ( .i(\s[3][0][15] ), .c(
        \s_tx[3][0][15] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[15].east_tx  ( .i(\e[3][0][15] ), .c(
        \e_tx[3][0][15] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[16].north_rx  ( .i(\s_tx[3][3][16] ), .o(
        \n[3][0][16] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[16].west_rx  ( .i(\e_tx[2][0][16] ), .o(
        \w[3][0][16] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[16].south_tx  ( .i(\s[3][0][16] ), .c(
        \s_tx[3][0][16] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[16].east_tx  ( .i(\e[3][0][16] ), .c(
        \e_tx[3][0][16] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[17].north_rx  ( .i(\s_tx[3][3][17] ), .o(
        \n[3][0][17] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[17].west_rx  ( .i(\e_tx[2][0][17] ), .o(
        \w[3][0][17] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[17].south_tx  ( .i(\s[3][0][17] ), .c(
        \s_tx[3][0][17] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[17].east_tx  ( .i(\e[3][0][17] ), .c(
        \e_tx[3][0][17] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[18].north_rx  ( .i(\s_tx[3][3][18] ), .o(
        \n[3][0][18] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[18].west_rx  ( .i(\e_tx[2][0][18] ), .o(
        \w[3][0][18] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[18].south_tx  ( .i(\s[3][0][18] ), .c(
        \s_tx[3][0][18] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[18].east_tx  ( .i(\e[3][0][18] ), .c(
        \e_tx[3][0][18] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[19].north_rx  ( .i(\s_tx[3][3][19] ), .o(
        \n[3][0][19] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[19].west_rx  ( .i(\e_tx[2][0][19] ), .o(
        \w[3][0][19] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[19].south_tx  ( .i(\s[3][0][19] ), .c(
        \s_tx[3][0][19] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[19].east_tx  ( .i(\e[3][0][19] ), .c(
        \e_tx[3][0][19] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[20].north_rx  ( .i(\s_tx[3][3][20] ), .o(
        \n[3][0][20] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[20].west_rx  ( .i(\e_tx[2][0][20] ), .o(
        \w[3][0][20] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[20].south_tx  ( .i(\s[3][0][20] ), .c(
        \s_tx[3][0][20] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[20].east_tx  ( .i(\e[3][0][20] ), .c(
        \e_tx[3][0][20] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[21].north_rx  ( .i(\s_tx[3][3][21] ), .o(
        \n[3][0][21] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[21].west_rx  ( .i(\e_tx[2][0][21] ), .o(
        \w[3][0][21] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[21].south_tx  ( .i(\s[3][0][21] ), .c(
        \s_tx[3][0][21] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[21].east_tx  ( .i(\e[3][0][21] ), .c(
        \e_tx[3][0][21] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[22].north_rx  ( .i(\s_tx[3][3][22] ), .o(
        \n[3][0][22] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[22].west_rx  ( .i(\e_tx[2][0][22] ), .o(
        \w[3][0][22] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[22].south_tx  ( .i(\s[3][0][22] ), .c(
        \s_tx[3][0][22] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[22].east_tx  ( .i(\e[3][0][22] ), .c(
        \e_tx[3][0][22] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[23].north_rx  ( .i(\s_tx[3][3][23] ), .o(
        \n[3][0][23] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[23].west_rx  ( .i(\e_tx[2][0][23] ), .o(
        \w[3][0][23] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[23].south_tx  ( .i(\s[3][0][23] ), .c(
        \s_tx[3][0][23] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[23].east_tx  ( .i(\e[3][0][23] ), .c(
        \e_tx[3][0][23] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[24].north_rx  ( .i(\s_tx[3][3][24] ), .o(
        \n[3][0][24] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[24].west_rx  ( .i(\e_tx[2][0][24] ), .o(
        \w[3][0][24] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[24].south_tx  ( .i(\s[3][0][24] ), .c(
        \s_tx[3][0][24] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[24].east_tx  ( .i(\e[3][0][24] ), .c(
        \e_tx[3][0][24] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[25].north_rx  ( .i(\s_tx[3][3][25] ), .o(
        \n[3][0][25] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[25].west_rx  ( .i(\e_tx[2][0][25] ), .o(
        \w[3][0][25] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[25].south_tx  ( .i(\s[3][0][25] ), .c(
        \s_tx[3][0][25] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[25].east_tx  ( .i(\e[3][0][25] ), .c(
        \e_tx[3][0][25] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[26].north_rx  ( .i(\s_tx[3][3][26] ), .o(
        \n[3][0][26] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[26].west_rx  ( .i(\e_tx[2][0][26] ), .o(
        \w[3][0][26] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[26].south_tx  ( .i(\s[3][0][26] ), .c(
        \s_tx[3][0][26] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[26].east_tx  ( .i(\e[3][0][26] ), .c(
        \e_tx[3][0][26] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[27].north_rx  ( .i(\s_tx[3][3][27] ), .o(
        \n[3][0][27] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[27].west_rx  ( .i(\e_tx[2][0][27] ), .o(
        \w[3][0][27] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[27].south_tx  ( .i(\s[3][0][27] ), .c(
        \s_tx[3][0][27] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[27].east_tx  ( .i(\e[3][0][27] ), .c(
        \e_tx[3][0][27] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[28].north_rx  ( .i(\s_tx[3][3][28] ), .o(
        \n[3][0][28] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[28].west_rx  ( .i(\e_tx[2][0][28] ), .o(
        \w[3][0][28] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[28].south_tx  ( .i(\s[3][0][28] ), .c(
        \s_tx[3][0][28] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[28].east_tx  ( .i(\e[3][0][28] ), .c(
        \e_tx[3][0][28] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[29].north_rx  ( .i(\s_tx[3][3][29] ), .o(
        \n[3][0][29] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[29].west_rx  ( .i(\e_tx[2][0][29] ), .o(
        \w[3][0][29] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[29].south_tx  ( .i(\s[3][0][29] ), .c(
        \s_tx[3][0][29] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[29].east_tx  ( .i(\e[3][0][29] ), .c(
        \e_tx[3][0][29] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[30].north_rx  ( .i(\s_tx[3][3][30] ), .o(
        \n[3][0][30] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[30].west_rx  ( .i(\e_tx[2][0][30] ), .o(
        \w[3][0][30] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[30].south_tx  ( .i(\s[3][0][30] ), .c(
        \s_tx[3][0][30] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[30].east_tx  ( .i(\e[3][0][30] ), .c(
        \e_tx[3][0][30] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[31].north_rx  ( .i(\s_tx[3][3][31] ), .o(
        \n[3][0][31] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[31].west_rx  ( .i(\e_tx[2][0][31] ), .o(
        \w[3][0][31] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[31].south_tx  ( .i(\s[3][0][31] ), .c(
        \s_tx[3][0][31] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[31].east_tx  ( .i(\e[3][0][31] ), .c(
        \e_tx[3][0][31] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[32].north_rx  ( .i(\s_tx[3][3][32] ), .o(
        \n[3][0][32] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[32].west_rx  ( .i(\e_tx[2][0][32] ), .o(
        \w[3][0][32] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[32].south_tx  ( .i(\s[3][0][32] ), .c(
        \s_tx[3][0][32] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[32].east_tx  ( .i(\e[3][0][32] ), .c(
        \e_tx[3][0][32] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[33].north_rx  ( .i(\s_tx[3][3][33] ), .o(
        \n[3][0][33] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[33].west_rx  ( .i(\e_tx[2][0][33] ), .o(
        \w[3][0][33] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[33].south_tx  ( .i(\s[3][0][33] ), .c(
        \s_tx[3][0][33] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[33].east_tx  ( .i(\e[3][0][33] ), .c(
        \e_tx[3][0][33] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[34].north_rx  ( .i(\s_tx[3][3][34] ), .o(
        \n[3][0][34] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[34].west_rx  ( .i(\e_tx[2][0][34] ), .o(
        \w[3][0][34] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[34].south_tx  ( .i(\s[3][0][34] ), .c(
        \s_tx[3][0][34] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[34].east_tx  ( .i(\e[3][0][34] ), .c(
        \e_tx[3][0][34] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[35].north_rx  ( .i(\s_tx[3][3][35] ), .o(
        \n[3][0][35] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[35].west_rx  ( .i(\e_tx[2][0][35] ), .o(
        \w[3][0][35] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[35].south_tx  ( .i(\s[3][0][35] ), .c(
        \s_tx[3][0][35] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[35].east_tx  ( .i(\e[3][0][35] ), .c(
        \e_tx[3][0][35] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[36].north_rx  ( .i(\s_tx[3][3][36] ), .o(
        \n[3][0][36] ) );
  low_swing_rx \ys[0].xs[3].msg_txrx[36].west_rx  ( .i(\e_tx[2][0][36] ), .o(
        \w[3][0][36] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[36].south_tx  ( .i(\s[3][0][36] ), .c(
        \s_tx[3][0][36] ) );
  low_swing_tx \ys[0].xs[3].msg_txrx[36].east_tx  ( .i(\e[3][0][36] ), .c(
        \e_tx[3][0][36] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[0].north_rx  ( .i(\s_tx[0][0][0] ), .o(
        \n[0][1][0] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[0].west_rx  ( .i(\e_tx[3][1][0] ), .o(
        \w[0][1][0] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[0].south_tx  ( .i(\s[0][1][0] ), .c(
        \s_tx[0][1][0] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[0].east_tx  ( .i(\e[0][1][0] ), .c(
        \e_tx[0][1][0] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[1].north_rx  ( .i(\s_tx[0][0][1] ), .o(
        \n[0][1][1] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[1].west_rx  ( .i(\e_tx[3][1][1] ), .o(
        \w[0][1][1] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[1].south_tx  ( .i(\s[0][1][1] ), .c(
        \s_tx[0][1][1] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[1].east_tx  ( .i(\e[0][1][1] ), .c(
        \e_tx[0][1][1] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[2].north_rx  ( .i(\s_tx[0][0][2] ), .o(
        \n[0][1][2] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[2].west_rx  ( .i(\e_tx[3][1][2] ), .o(
        \w[0][1][2] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[2].south_tx  ( .i(\s[0][1][2] ), .c(
        \s_tx[0][1][2] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[2].east_tx  ( .i(\e[0][1][2] ), .c(
        \e_tx[0][1][2] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[3].north_rx  ( .i(\s_tx[0][0][3] ), .o(
        \n[0][1][3] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[3].west_rx  ( .i(\e_tx[3][1][3] ), .o(
        \w[0][1][3] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[3].south_tx  ( .i(\s[0][1][3] ), .c(
        \s_tx[0][1][3] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[3].east_tx  ( .i(\e[0][1][3] ), .c(
        \e_tx[0][1][3] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[4].north_rx  ( .i(\s_tx[0][0][4] ), .o(
        \n[0][1][4] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[4].west_rx  ( .i(\e_tx[3][1][4] ), .o(
        \w[0][1][4] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[4].south_tx  ( .i(\s[0][1][4] ), .c(
        \s_tx[0][1][4] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[4].east_tx  ( .i(\e[0][1][4] ), .c(
        \e_tx[0][1][4] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[5].north_rx  ( .i(\s_tx[0][0][5] ), .o(
        \n[0][1][5] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[5].west_rx  ( .i(\e_tx[3][1][5] ), .o(
        \w[0][1][5] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[5].south_tx  ( .i(\s[0][1][5] ), .c(
        \s_tx[0][1][5] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[5].east_tx  ( .i(\e[0][1][5] ), .c(
        \e_tx[0][1][5] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[6].north_rx  ( .i(\s_tx[0][0][6] ), .o(
        \n[0][1][6] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[6].west_rx  ( .i(\e_tx[3][1][6] ), .o(
        \w[0][1][6] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[6].south_tx  ( .i(\s[0][1][6] ), .c(
        \s_tx[0][1][6] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[6].east_tx  ( .i(\e[0][1][6] ), .c(
        \e_tx[0][1][6] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[7].north_rx  ( .i(\s_tx[0][0][7] ), .o(
        \n[0][1][7] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[7].west_rx  ( .i(\e_tx[3][1][7] ), .o(
        \w[0][1][7] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[7].south_tx  ( .i(\s[0][1][7] ), .c(
        \s_tx[0][1][7] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[7].east_tx  ( .i(\e[0][1][7] ), .c(
        \e_tx[0][1][7] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[8].north_rx  ( .i(\s_tx[0][0][8] ), .o(
        \n[0][1][8] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[8].west_rx  ( .i(\e_tx[3][1][8] ), .o(
        \w[0][1][8] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[8].south_tx  ( .i(\s[0][1][8] ), .c(
        \s_tx[0][1][8] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[8].east_tx  ( .i(\e[0][1][8] ), .c(
        \e_tx[0][1][8] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[9].north_rx  ( .i(\s_tx[0][0][9] ), .o(
        \n[0][1][9] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[9].west_rx  ( .i(\e_tx[3][1][9] ), .o(
        \w[0][1][9] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[9].south_tx  ( .i(\s[0][1][9] ), .c(
        \s_tx[0][1][9] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[9].east_tx  ( .i(\e[0][1][9] ), .c(
        \e_tx[0][1][9] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[10].north_rx  ( .i(\s_tx[0][0][10] ), .o(
        \n[0][1][10] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[10].west_rx  ( .i(\e_tx[3][1][10] ), .o(
        \w[0][1][10] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[10].south_tx  ( .i(\s[0][1][10] ), .c(
        \s_tx[0][1][10] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[10].east_tx  ( .i(\e[0][1][10] ), .c(
        \e_tx[0][1][10] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[11].north_rx  ( .i(\s_tx[0][0][11] ), .o(
        \n[0][1][11] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[11].west_rx  ( .i(\e_tx[3][1][11] ), .o(
        \w[0][1][11] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[11].south_tx  ( .i(\s[0][1][11] ), .c(
        \s_tx[0][1][11] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[11].east_tx  ( .i(\e[0][1][11] ), .c(
        \e_tx[0][1][11] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[12].north_rx  ( .i(\s_tx[0][0][12] ), .o(
        \n[0][1][12] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[12].west_rx  ( .i(\e_tx[3][1][12] ), .o(
        \w[0][1][12] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[12].south_tx  ( .i(\s[0][1][12] ), .c(
        \s_tx[0][1][12] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[12].east_tx  ( .i(\e[0][1][12] ), .c(
        \e_tx[0][1][12] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[13].north_rx  ( .i(\s_tx[0][0][13] ), .o(
        \n[0][1][13] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[13].west_rx  ( .i(\e_tx[3][1][13] ), .o(
        \w[0][1][13] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[13].south_tx  ( .i(\s[0][1][13] ), .c(
        \s_tx[0][1][13] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[13].east_tx  ( .i(\e[0][1][13] ), .c(
        \e_tx[0][1][13] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[14].north_rx  ( .i(\s_tx[0][0][14] ), .o(
        \n[0][1][14] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[14].west_rx  ( .i(\e_tx[3][1][14] ), .o(
        \w[0][1][14] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[14].south_tx  ( .i(\s[0][1][14] ), .c(
        \s_tx[0][1][14] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[14].east_tx  ( .i(\e[0][1][14] ), .c(
        \e_tx[0][1][14] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[15].north_rx  ( .i(\s_tx[0][0][15] ), .o(
        \n[0][1][15] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[15].west_rx  ( .i(\e_tx[3][1][15] ), .o(
        \w[0][1][15] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[15].south_tx  ( .i(\s[0][1][15] ), .c(
        \s_tx[0][1][15] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[15].east_tx  ( .i(\e[0][1][15] ), .c(
        \e_tx[0][1][15] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[16].north_rx  ( .i(\s_tx[0][0][16] ), .o(
        \n[0][1][16] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[16].west_rx  ( .i(\e_tx[3][1][16] ), .o(
        \w[0][1][16] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[16].south_tx  ( .i(\s[0][1][16] ), .c(
        \s_tx[0][1][16] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[16].east_tx  ( .i(\e[0][1][16] ), .c(
        \e_tx[0][1][16] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[17].north_rx  ( .i(\s_tx[0][0][17] ), .o(
        \n[0][1][17] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[17].west_rx  ( .i(\e_tx[3][1][17] ), .o(
        \w[0][1][17] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[17].south_tx  ( .i(\s[0][1][17] ), .c(
        \s_tx[0][1][17] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[17].east_tx  ( .i(\e[0][1][17] ), .c(
        \e_tx[0][1][17] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[18].north_rx  ( .i(\s_tx[0][0][18] ), .o(
        \n[0][1][18] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[18].west_rx  ( .i(\e_tx[3][1][18] ), .o(
        \w[0][1][18] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[18].south_tx  ( .i(\s[0][1][18] ), .c(
        \s_tx[0][1][18] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[18].east_tx  ( .i(\e[0][1][18] ), .c(
        \e_tx[0][1][18] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[19].north_rx  ( .i(\s_tx[0][0][19] ), .o(
        \n[0][1][19] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[19].west_rx  ( .i(\e_tx[3][1][19] ), .o(
        \w[0][1][19] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[19].south_tx  ( .i(\s[0][1][19] ), .c(
        \s_tx[0][1][19] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[19].east_tx  ( .i(\e[0][1][19] ), .c(
        \e_tx[0][1][19] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[20].north_rx  ( .i(\s_tx[0][0][20] ), .o(
        \n[0][1][20] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[20].west_rx  ( .i(\e_tx[3][1][20] ), .o(
        \w[0][1][20] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[20].south_tx  ( .i(\s[0][1][20] ), .c(
        \s_tx[0][1][20] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[20].east_tx  ( .i(\e[0][1][20] ), .c(
        \e_tx[0][1][20] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[21].north_rx  ( .i(\s_tx[0][0][21] ), .o(
        \n[0][1][21] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[21].west_rx  ( .i(\e_tx[3][1][21] ), .o(
        \w[0][1][21] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[21].south_tx  ( .i(\s[0][1][21] ), .c(
        \s_tx[0][1][21] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[21].east_tx  ( .i(\e[0][1][21] ), .c(
        \e_tx[0][1][21] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[22].north_rx  ( .i(\s_tx[0][0][22] ), .o(
        \n[0][1][22] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[22].west_rx  ( .i(\e_tx[3][1][22] ), .o(
        \w[0][1][22] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[22].south_tx  ( .i(\s[0][1][22] ), .c(
        \s_tx[0][1][22] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[22].east_tx  ( .i(\e[0][1][22] ), .c(
        \e_tx[0][1][22] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[23].north_rx  ( .i(\s_tx[0][0][23] ), .o(
        \n[0][1][23] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[23].west_rx  ( .i(\e_tx[3][1][23] ), .o(
        \w[0][1][23] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[23].south_tx  ( .i(\s[0][1][23] ), .c(
        \s_tx[0][1][23] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[23].east_tx  ( .i(\e[0][1][23] ), .c(
        \e_tx[0][1][23] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[24].north_rx  ( .i(\s_tx[0][0][24] ), .o(
        \n[0][1][24] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[24].west_rx  ( .i(\e_tx[3][1][24] ), .o(
        \w[0][1][24] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[24].south_tx  ( .i(\s[0][1][24] ), .c(
        \s_tx[0][1][24] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[24].east_tx  ( .i(\e[0][1][24] ), .c(
        \e_tx[0][1][24] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[25].north_rx  ( .i(\s_tx[0][0][25] ), .o(
        \n[0][1][25] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[25].west_rx  ( .i(\e_tx[3][1][25] ), .o(
        \w[0][1][25] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[25].south_tx  ( .i(\s[0][1][25] ), .c(
        \s_tx[0][1][25] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[25].east_tx  ( .i(\e[0][1][25] ), .c(
        \e_tx[0][1][25] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[26].north_rx  ( .i(\s_tx[0][0][26] ), .o(
        \n[0][1][26] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[26].west_rx  ( .i(\e_tx[3][1][26] ), .o(
        \w[0][1][26] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[26].south_tx  ( .i(\s[0][1][26] ), .c(
        \s_tx[0][1][26] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[26].east_tx  ( .i(\e[0][1][26] ), .c(
        \e_tx[0][1][26] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[27].north_rx  ( .i(\s_tx[0][0][27] ), .o(
        \n[0][1][27] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[27].west_rx  ( .i(\e_tx[3][1][27] ), .o(
        \w[0][1][27] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[27].south_tx  ( .i(\s[0][1][27] ), .c(
        \s_tx[0][1][27] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[27].east_tx  ( .i(\e[0][1][27] ), .c(
        \e_tx[0][1][27] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[28].north_rx  ( .i(\s_tx[0][0][28] ), .o(
        \n[0][1][28] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[28].west_rx  ( .i(\e_tx[3][1][28] ), .o(
        \w[0][1][28] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[28].south_tx  ( .i(\s[0][1][28] ), .c(
        \s_tx[0][1][28] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[28].east_tx  ( .i(\e[0][1][28] ), .c(
        \e_tx[0][1][28] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[29].north_rx  ( .i(\s_tx[0][0][29] ), .o(
        \n[0][1][29] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[29].west_rx  ( .i(\e_tx[3][1][29] ), .o(
        \w[0][1][29] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[29].south_tx  ( .i(\s[0][1][29] ), .c(
        \s_tx[0][1][29] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[29].east_tx  ( .i(\e[0][1][29] ), .c(
        \e_tx[0][1][29] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[30].north_rx  ( .i(\s_tx[0][0][30] ), .o(
        \n[0][1][30] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[30].west_rx  ( .i(\e_tx[3][1][30] ), .o(
        \w[0][1][30] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[30].south_tx  ( .i(\s[0][1][30] ), .c(
        \s_tx[0][1][30] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[30].east_tx  ( .i(\e[0][1][30] ), .c(
        \e_tx[0][1][30] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[31].north_rx  ( .i(\s_tx[0][0][31] ), .o(
        \n[0][1][31] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[31].west_rx  ( .i(\e_tx[3][1][31] ), .o(
        \w[0][1][31] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[31].south_tx  ( .i(\s[0][1][31] ), .c(
        \s_tx[0][1][31] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[31].east_tx  ( .i(\e[0][1][31] ), .c(
        \e_tx[0][1][31] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[32].north_rx  ( .i(\s_tx[0][0][32] ), .o(
        \n[0][1][32] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[32].west_rx  ( .i(\e_tx[3][1][32] ), .o(
        \w[0][1][32] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[32].south_tx  ( .i(\s[0][1][32] ), .c(
        \s_tx[0][1][32] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[32].east_tx  ( .i(\e[0][1][32] ), .c(
        \e_tx[0][1][32] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[33].north_rx  ( .i(\s_tx[0][0][33] ), .o(
        \n[0][1][33] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[33].west_rx  ( .i(\e_tx[3][1][33] ), .o(
        \w[0][1][33] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[33].south_tx  ( .i(\s[0][1][33] ), .c(
        \s_tx[0][1][33] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[33].east_tx  ( .i(\e[0][1][33] ), .c(
        \e_tx[0][1][33] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[34].north_rx  ( .i(\s_tx[0][0][34] ), .o(
        \n[0][1][34] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[34].west_rx  ( .i(\e_tx[3][1][34] ), .o(
        \w[0][1][34] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[34].south_tx  ( .i(\s[0][1][34] ), .c(
        \s_tx[0][1][34] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[34].east_tx  ( .i(\e[0][1][34] ), .c(
        \e_tx[0][1][34] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[35].north_rx  ( .i(\s_tx[0][0][35] ), .o(
        \n[0][1][35] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[35].west_rx  ( .i(\e_tx[3][1][35] ), .o(
        \w[0][1][35] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[35].south_tx  ( .i(\s[0][1][35] ), .c(
        \s_tx[0][1][35] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[35].east_tx  ( .i(\e[0][1][35] ), .c(
        \e_tx[0][1][35] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[36].north_rx  ( .i(\s_tx[0][0][36] ), .o(
        \n[0][1][36] ) );
  low_swing_rx \ys[1].xs[0].msg_txrx[36].west_rx  ( .i(\e_tx[3][1][36] ), .o(
        \w[0][1][36] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[36].south_tx  ( .i(\s[0][1][36] ), .c(
        \s_tx[0][1][36] ) );
  low_swing_tx \ys[1].xs[0].msg_txrx[36].east_tx  ( .i(\e[0][1][36] ), .c(
        \e_tx[0][1][36] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[0].north_rx  ( .i(\s_tx[1][0][0] ), .o(
        \n[1][1][0] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[0].west_rx  ( .i(\e_tx[0][1][0] ), .o(
        \w[1][1][0] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[0].south_tx  ( .i(\s[1][1][0] ), .c(
        \s_tx[1][1][0] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[0].east_tx  ( .i(\e[1][1][0] ), .c(
        \e_tx[1][1][0] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[1].north_rx  ( .i(\s_tx[1][0][1] ), .o(
        \n[1][1][1] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[1].west_rx  ( .i(\e_tx[0][1][1] ), .o(
        \w[1][1][1] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[1].south_tx  ( .i(\s[1][1][1] ), .c(
        \s_tx[1][1][1] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[1].east_tx  ( .i(\e[1][1][1] ), .c(
        \e_tx[1][1][1] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[2].north_rx  ( .i(\s_tx[1][0][2] ), .o(
        \n[1][1][2] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[2].west_rx  ( .i(\e_tx[0][1][2] ), .o(
        \w[1][1][2] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[2].south_tx  ( .i(\s[1][1][2] ), .c(
        \s_tx[1][1][2] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[2].east_tx  ( .i(\e[1][1][2] ), .c(
        \e_tx[1][1][2] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[3].north_rx  ( .i(\s_tx[1][0][3] ), .o(
        \n[1][1][3] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[3].west_rx  ( .i(\e_tx[0][1][3] ), .o(
        \w[1][1][3] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[3].south_tx  ( .i(\s[1][1][3] ), .c(
        \s_tx[1][1][3] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[3].east_tx  ( .i(\e[1][1][3] ), .c(
        \e_tx[1][1][3] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[4].north_rx  ( .i(\s_tx[1][0][4] ), .o(
        \n[1][1][4] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[4].west_rx  ( .i(\e_tx[0][1][4] ), .o(
        \w[1][1][4] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[4].south_tx  ( .i(\s[1][1][4] ), .c(
        \s_tx[1][1][4] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[4].east_tx  ( .i(\e[1][1][4] ), .c(
        \e_tx[1][1][4] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[5].north_rx  ( .i(\s_tx[1][0][5] ), .o(
        \n[1][1][5] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[5].west_rx  ( .i(\e_tx[0][1][5] ), .o(
        \w[1][1][5] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[5].south_tx  ( .i(\s[1][1][5] ), .c(
        \s_tx[1][1][5] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[5].east_tx  ( .i(\e[1][1][5] ), .c(
        \e_tx[1][1][5] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[6].north_rx  ( .i(\s_tx[1][0][6] ), .o(
        \n[1][1][6] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[6].west_rx  ( .i(\e_tx[0][1][6] ), .o(
        \w[1][1][6] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[6].south_tx  ( .i(\s[1][1][6] ), .c(
        \s_tx[1][1][6] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[6].east_tx  ( .i(\e[1][1][6] ), .c(
        \e_tx[1][1][6] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[7].north_rx  ( .i(\s_tx[1][0][7] ), .o(
        \n[1][1][7] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[7].west_rx  ( .i(\e_tx[0][1][7] ), .o(
        \w[1][1][7] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[7].south_tx  ( .i(\s[1][1][7] ), .c(
        \s_tx[1][1][7] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[7].east_tx  ( .i(\e[1][1][7] ), .c(
        \e_tx[1][1][7] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[8].north_rx  ( .i(\s_tx[1][0][8] ), .o(
        \n[1][1][8] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[8].west_rx  ( .i(\e_tx[0][1][8] ), .o(
        \w[1][1][8] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[8].south_tx  ( .i(\s[1][1][8] ), .c(
        \s_tx[1][1][8] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[8].east_tx  ( .i(\e[1][1][8] ), .c(
        \e_tx[1][1][8] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[9].north_rx  ( .i(\s_tx[1][0][9] ), .o(
        \n[1][1][9] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[9].west_rx  ( .i(\e_tx[0][1][9] ), .o(
        \w[1][1][9] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[9].south_tx  ( .i(\s[1][1][9] ), .c(
        \s_tx[1][1][9] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[9].east_tx  ( .i(\e[1][1][9] ), .c(
        \e_tx[1][1][9] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[10].north_rx  ( .i(\s_tx[1][0][10] ), .o(
        \n[1][1][10] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[10].west_rx  ( .i(\e_tx[0][1][10] ), .o(
        \w[1][1][10] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[10].south_tx  ( .i(\s[1][1][10] ), .c(
        \s_tx[1][1][10] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[10].east_tx  ( .i(\e[1][1][10] ), .c(
        \e_tx[1][1][10] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[11].north_rx  ( .i(\s_tx[1][0][11] ), .o(
        \n[1][1][11] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[11].west_rx  ( .i(\e_tx[0][1][11] ), .o(
        \w[1][1][11] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[11].south_tx  ( .i(\s[1][1][11] ), .c(
        \s_tx[1][1][11] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[11].east_tx  ( .i(\e[1][1][11] ), .c(
        \e_tx[1][1][11] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[12].north_rx  ( .i(\s_tx[1][0][12] ), .o(
        \n[1][1][12] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[12].west_rx  ( .i(\e_tx[0][1][12] ), .o(
        \w[1][1][12] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[12].south_tx  ( .i(\s[1][1][12] ), .c(
        \s_tx[1][1][12] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[12].east_tx  ( .i(\e[1][1][12] ), .c(
        \e_tx[1][1][12] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[13].north_rx  ( .i(\s_tx[1][0][13] ), .o(
        \n[1][1][13] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[13].west_rx  ( .i(\e_tx[0][1][13] ), .o(
        \w[1][1][13] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[13].south_tx  ( .i(\s[1][1][13] ), .c(
        \s_tx[1][1][13] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[13].east_tx  ( .i(\e[1][1][13] ), .c(
        \e_tx[1][1][13] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[14].north_rx  ( .i(\s_tx[1][0][14] ), .o(
        \n[1][1][14] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[14].west_rx  ( .i(\e_tx[0][1][14] ), .o(
        \w[1][1][14] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[14].south_tx  ( .i(\s[1][1][14] ), .c(
        \s_tx[1][1][14] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[14].east_tx  ( .i(\e[1][1][14] ), .c(
        \e_tx[1][1][14] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[15].north_rx  ( .i(\s_tx[1][0][15] ), .o(
        \n[1][1][15] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[15].west_rx  ( .i(\e_tx[0][1][15] ), .o(
        \w[1][1][15] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[15].south_tx  ( .i(\s[1][1][15] ), .c(
        \s_tx[1][1][15] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[15].east_tx  ( .i(\e[1][1][15] ), .c(
        \e_tx[1][1][15] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[16].north_rx  ( .i(\s_tx[1][0][16] ), .o(
        \n[1][1][16] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[16].west_rx  ( .i(\e_tx[0][1][16] ), .o(
        \w[1][1][16] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[16].south_tx  ( .i(\s[1][1][16] ), .c(
        \s_tx[1][1][16] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[16].east_tx  ( .i(\e[1][1][16] ), .c(
        \e_tx[1][1][16] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[17].north_rx  ( .i(\s_tx[1][0][17] ), .o(
        \n[1][1][17] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[17].west_rx  ( .i(\e_tx[0][1][17] ), .o(
        \w[1][1][17] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[17].south_tx  ( .i(\s[1][1][17] ), .c(
        \s_tx[1][1][17] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[17].east_tx  ( .i(\e[1][1][17] ), .c(
        \e_tx[1][1][17] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[18].north_rx  ( .i(\s_tx[1][0][18] ), .o(
        \n[1][1][18] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[18].west_rx  ( .i(\e_tx[0][1][18] ), .o(
        \w[1][1][18] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[18].south_tx  ( .i(\s[1][1][18] ), .c(
        \s_tx[1][1][18] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[18].east_tx  ( .i(\e[1][1][18] ), .c(
        \e_tx[1][1][18] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[19].north_rx  ( .i(\s_tx[1][0][19] ), .o(
        \n[1][1][19] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[19].west_rx  ( .i(\e_tx[0][1][19] ), .o(
        \w[1][1][19] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[19].south_tx  ( .i(\s[1][1][19] ), .c(
        \s_tx[1][1][19] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[19].east_tx  ( .i(\e[1][1][19] ), .c(
        \e_tx[1][1][19] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[20].north_rx  ( .i(\s_tx[1][0][20] ), .o(
        \n[1][1][20] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[20].west_rx  ( .i(\e_tx[0][1][20] ), .o(
        \w[1][1][20] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[20].south_tx  ( .i(\s[1][1][20] ), .c(
        \s_tx[1][1][20] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[20].east_tx  ( .i(\e[1][1][20] ), .c(
        \e_tx[1][1][20] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[21].north_rx  ( .i(\s_tx[1][0][21] ), .o(
        \n[1][1][21] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[21].west_rx  ( .i(\e_tx[0][1][21] ), .o(
        \w[1][1][21] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[21].south_tx  ( .i(\s[1][1][21] ), .c(
        \s_tx[1][1][21] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[21].east_tx  ( .i(\e[1][1][21] ), .c(
        \e_tx[1][1][21] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[22].north_rx  ( .i(\s_tx[1][0][22] ), .o(
        \n[1][1][22] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[22].west_rx  ( .i(\e_tx[0][1][22] ), .o(
        \w[1][1][22] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[22].south_tx  ( .i(\s[1][1][22] ), .c(
        \s_tx[1][1][22] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[22].east_tx  ( .i(\e[1][1][22] ), .c(
        \e_tx[1][1][22] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[23].north_rx  ( .i(\s_tx[1][0][23] ), .o(
        \n[1][1][23] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[23].west_rx  ( .i(\e_tx[0][1][23] ), .o(
        \w[1][1][23] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[23].south_tx  ( .i(\s[1][1][23] ), .c(
        \s_tx[1][1][23] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[23].east_tx  ( .i(\e[1][1][23] ), .c(
        \e_tx[1][1][23] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[24].north_rx  ( .i(\s_tx[1][0][24] ), .o(
        \n[1][1][24] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[24].west_rx  ( .i(\e_tx[0][1][24] ), .o(
        \w[1][1][24] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[24].south_tx  ( .i(\s[1][1][24] ), .c(
        \s_tx[1][1][24] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[24].east_tx  ( .i(\e[1][1][24] ), .c(
        \e_tx[1][1][24] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[25].north_rx  ( .i(\s_tx[1][0][25] ), .o(
        \n[1][1][25] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[25].west_rx  ( .i(\e_tx[0][1][25] ), .o(
        \w[1][1][25] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[25].south_tx  ( .i(\s[1][1][25] ), .c(
        \s_tx[1][1][25] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[25].east_tx  ( .i(\e[1][1][25] ), .c(
        \e_tx[1][1][25] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[26].north_rx  ( .i(\s_tx[1][0][26] ), .o(
        \n[1][1][26] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[26].west_rx  ( .i(\e_tx[0][1][26] ), .o(
        \w[1][1][26] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[26].south_tx  ( .i(\s[1][1][26] ), .c(
        \s_tx[1][1][26] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[26].east_tx  ( .i(\e[1][1][26] ), .c(
        \e_tx[1][1][26] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[27].north_rx  ( .i(\s_tx[1][0][27] ), .o(
        \n[1][1][27] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[27].west_rx  ( .i(\e_tx[0][1][27] ), .o(
        \w[1][1][27] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[27].south_tx  ( .i(\s[1][1][27] ), .c(
        \s_tx[1][1][27] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[27].east_tx  ( .i(\e[1][1][27] ), .c(
        \e_tx[1][1][27] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[28].north_rx  ( .i(\s_tx[1][0][28] ), .o(
        \n[1][1][28] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[28].west_rx  ( .i(\e_tx[0][1][28] ), .o(
        \w[1][1][28] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[28].south_tx  ( .i(\s[1][1][28] ), .c(
        \s_tx[1][1][28] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[28].east_tx  ( .i(\e[1][1][28] ), .c(
        \e_tx[1][1][28] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[29].north_rx  ( .i(\s_tx[1][0][29] ), .o(
        \n[1][1][29] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[29].west_rx  ( .i(\e_tx[0][1][29] ), .o(
        \w[1][1][29] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[29].south_tx  ( .i(\s[1][1][29] ), .c(
        \s_tx[1][1][29] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[29].east_tx  ( .i(\e[1][1][29] ), .c(
        \e_tx[1][1][29] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[30].north_rx  ( .i(\s_tx[1][0][30] ), .o(
        \n[1][1][30] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[30].west_rx  ( .i(\e_tx[0][1][30] ), .o(
        \w[1][1][30] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[30].south_tx  ( .i(\s[1][1][30] ), .c(
        \s_tx[1][1][30] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[30].east_tx  ( .i(\e[1][1][30] ), .c(
        \e_tx[1][1][30] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[31].north_rx  ( .i(\s_tx[1][0][31] ), .o(
        \n[1][1][31] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[31].west_rx  ( .i(\e_tx[0][1][31] ), .o(
        \w[1][1][31] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[31].south_tx  ( .i(\s[1][1][31] ), .c(
        \s_tx[1][1][31] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[31].east_tx  ( .i(\e[1][1][31] ), .c(
        \e_tx[1][1][31] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[32].north_rx  ( .i(\s_tx[1][0][32] ), .o(
        \n[1][1][32] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[32].west_rx  ( .i(\e_tx[0][1][32] ), .o(
        \w[1][1][32] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[32].south_tx  ( .i(\s[1][1][32] ), .c(
        \s_tx[1][1][32] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[32].east_tx  ( .i(\e[1][1][32] ), .c(
        \e_tx[1][1][32] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[33].north_rx  ( .i(\s_tx[1][0][33] ), .o(
        \n[1][1][33] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[33].west_rx  ( .i(\e_tx[0][1][33] ), .o(
        \w[1][1][33] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[33].south_tx  ( .i(\s[1][1][33] ), .c(
        \s_tx[1][1][33] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[33].east_tx  ( .i(\e[1][1][33] ), .c(
        \e_tx[1][1][33] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[34].north_rx  ( .i(\s_tx[1][0][34] ), .o(
        \n[1][1][34] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[34].west_rx  ( .i(\e_tx[0][1][34] ), .o(
        \w[1][1][34] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[34].south_tx  ( .i(\s[1][1][34] ), .c(
        \s_tx[1][1][34] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[34].east_tx  ( .i(\e[1][1][34] ), .c(
        \e_tx[1][1][34] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[35].north_rx  ( .i(\s_tx[1][0][35] ), .o(
        \n[1][1][35] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[35].west_rx  ( .i(\e_tx[0][1][35] ), .o(
        \w[1][1][35] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[35].south_tx  ( .i(\s[1][1][35] ), .c(
        \s_tx[1][1][35] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[35].east_tx  ( .i(\e[1][1][35] ), .c(
        \e_tx[1][1][35] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[36].north_rx  ( .i(\s_tx[1][0][36] ), .o(
        \n[1][1][36] ) );
  low_swing_rx \ys[1].xs[1].msg_txrx[36].west_rx  ( .i(\e_tx[0][1][36] ), .o(
        \w[1][1][36] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[36].south_tx  ( .i(\s[1][1][36] ), .c(
        \s_tx[1][1][36] ) );
  low_swing_tx \ys[1].xs[1].msg_txrx[36].east_tx  ( .i(\e[1][1][36] ), .c(
        \e_tx[1][1][36] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[0].north_rx  ( .i(\s_tx[2][0][0] ), .o(
        \n[2][1][0] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[0].west_rx  ( .i(\e_tx[1][1][0] ), .o(
        \w[2][1][0] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[0].south_tx  ( .i(\s[2][1][0] ), .c(
        \s_tx[2][1][0] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[0].east_tx  ( .i(\e[2][1][0] ), .c(
        \e_tx[2][1][0] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[1].north_rx  ( .i(\s_tx[2][0][1] ), .o(
        \n[2][1][1] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[1].west_rx  ( .i(\e_tx[1][1][1] ), .o(
        \w[2][1][1] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[1].south_tx  ( .i(\s[2][1][1] ), .c(
        \s_tx[2][1][1] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[1].east_tx  ( .i(\e[2][1][1] ), .c(
        \e_tx[2][1][1] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[2].north_rx  ( .i(\s_tx[2][0][2] ), .o(
        \n[2][1][2] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[2].west_rx  ( .i(\e_tx[1][1][2] ), .o(
        \w[2][1][2] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[2].south_tx  ( .i(\s[2][1][2] ), .c(
        \s_tx[2][1][2] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[2].east_tx  ( .i(\e[2][1][2] ), .c(
        \e_tx[2][1][2] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[3].north_rx  ( .i(\s_tx[2][0][3] ), .o(
        \n[2][1][3] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[3].west_rx  ( .i(\e_tx[1][1][3] ), .o(
        \w[2][1][3] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[3].south_tx  ( .i(\s[2][1][3] ), .c(
        \s_tx[2][1][3] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[3].east_tx  ( .i(\e[2][1][3] ), .c(
        \e_tx[2][1][3] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[4].north_rx  ( .i(\s_tx[2][0][4] ), .o(
        \n[2][1][4] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[4].west_rx  ( .i(\e_tx[1][1][4] ), .o(
        \w[2][1][4] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[4].south_tx  ( .i(\s[2][1][4] ), .c(
        \s_tx[2][1][4] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[4].east_tx  ( .i(\e[2][1][4] ), .c(
        \e_tx[2][1][4] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[5].north_rx  ( .i(\s_tx[2][0][5] ), .o(
        \n[2][1][5] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[5].west_rx  ( .i(\e_tx[1][1][5] ), .o(
        \w[2][1][5] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[5].south_tx  ( .i(\s[2][1][5] ), .c(
        \s_tx[2][1][5] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[5].east_tx  ( .i(\e[2][1][5] ), .c(
        \e_tx[2][1][5] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[6].north_rx  ( .i(\s_tx[2][0][6] ), .o(
        \n[2][1][6] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[6].west_rx  ( .i(\e_tx[1][1][6] ), .o(
        \w[2][1][6] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[6].south_tx  ( .i(\s[2][1][6] ), .c(
        \s_tx[2][1][6] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[6].east_tx  ( .i(\e[2][1][6] ), .c(
        \e_tx[2][1][6] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[7].north_rx  ( .i(\s_tx[2][0][7] ), .o(
        \n[2][1][7] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[7].west_rx  ( .i(\e_tx[1][1][7] ), .o(
        \w[2][1][7] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[7].south_tx  ( .i(\s[2][1][7] ), .c(
        \s_tx[2][1][7] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[7].east_tx  ( .i(\e[2][1][7] ), .c(
        \e_tx[2][1][7] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[8].north_rx  ( .i(\s_tx[2][0][8] ), .o(
        \n[2][1][8] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[8].west_rx  ( .i(\e_tx[1][1][8] ), .o(
        \w[2][1][8] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[8].south_tx  ( .i(\s[2][1][8] ), .c(
        \s_tx[2][1][8] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[8].east_tx  ( .i(\e[2][1][8] ), .c(
        \e_tx[2][1][8] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[9].north_rx  ( .i(\s_tx[2][0][9] ), .o(
        \n[2][1][9] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[9].west_rx  ( .i(\e_tx[1][1][9] ), .o(
        \w[2][1][9] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[9].south_tx  ( .i(\s[2][1][9] ), .c(
        \s_tx[2][1][9] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[9].east_tx  ( .i(\e[2][1][9] ), .c(
        \e_tx[2][1][9] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[10].north_rx  ( .i(\s_tx[2][0][10] ), .o(
        \n[2][1][10] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[10].west_rx  ( .i(\e_tx[1][1][10] ), .o(
        \w[2][1][10] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[10].south_tx  ( .i(\s[2][1][10] ), .c(
        \s_tx[2][1][10] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[10].east_tx  ( .i(\e[2][1][10] ), .c(
        \e_tx[2][1][10] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[11].north_rx  ( .i(\s_tx[2][0][11] ), .o(
        \n[2][1][11] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[11].west_rx  ( .i(\e_tx[1][1][11] ), .o(
        \w[2][1][11] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[11].south_tx  ( .i(\s[2][1][11] ), .c(
        \s_tx[2][1][11] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[11].east_tx  ( .i(\e[2][1][11] ), .c(
        \e_tx[2][1][11] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[12].north_rx  ( .i(\s_tx[2][0][12] ), .o(
        \n[2][1][12] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[12].west_rx  ( .i(\e_tx[1][1][12] ), .o(
        \w[2][1][12] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[12].south_tx  ( .i(\s[2][1][12] ), .c(
        \s_tx[2][1][12] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[12].east_tx  ( .i(\e[2][1][12] ), .c(
        \e_tx[2][1][12] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[13].north_rx  ( .i(\s_tx[2][0][13] ), .o(
        \n[2][1][13] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[13].west_rx  ( .i(\e_tx[1][1][13] ), .o(
        \w[2][1][13] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[13].south_tx  ( .i(\s[2][1][13] ), .c(
        \s_tx[2][1][13] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[13].east_tx  ( .i(\e[2][1][13] ), .c(
        \e_tx[2][1][13] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[14].north_rx  ( .i(\s_tx[2][0][14] ), .o(
        \n[2][1][14] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[14].west_rx  ( .i(\e_tx[1][1][14] ), .o(
        \w[2][1][14] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[14].south_tx  ( .i(\s[2][1][14] ), .c(
        \s_tx[2][1][14] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[14].east_tx  ( .i(\e[2][1][14] ), .c(
        \e_tx[2][1][14] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[15].north_rx  ( .i(\s_tx[2][0][15] ), .o(
        \n[2][1][15] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[15].west_rx  ( .i(\e_tx[1][1][15] ), .o(
        \w[2][1][15] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[15].south_tx  ( .i(\s[2][1][15] ), .c(
        \s_tx[2][1][15] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[15].east_tx  ( .i(\e[2][1][15] ), .c(
        \e_tx[2][1][15] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[16].north_rx  ( .i(\s_tx[2][0][16] ), .o(
        \n[2][1][16] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[16].west_rx  ( .i(\e_tx[1][1][16] ), .o(
        \w[2][1][16] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[16].south_tx  ( .i(\s[2][1][16] ), .c(
        \s_tx[2][1][16] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[16].east_tx  ( .i(\e[2][1][16] ), .c(
        \e_tx[2][1][16] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[17].north_rx  ( .i(\s_tx[2][0][17] ), .o(
        \n[2][1][17] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[17].west_rx  ( .i(\e_tx[1][1][17] ), .o(
        \w[2][1][17] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[17].south_tx  ( .i(\s[2][1][17] ), .c(
        \s_tx[2][1][17] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[17].east_tx  ( .i(\e[2][1][17] ), .c(
        \e_tx[2][1][17] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[18].north_rx  ( .i(\s_tx[2][0][18] ), .o(
        \n[2][1][18] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[18].west_rx  ( .i(\e_tx[1][1][18] ), .o(
        \w[2][1][18] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[18].south_tx  ( .i(\s[2][1][18] ), .c(
        \s_tx[2][1][18] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[18].east_tx  ( .i(\e[2][1][18] ), .c(
        \e_tx[2][1][18] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[19].north_rx  ( .i(\s_tx[2][0][19] ), .o(
        \n[2][1][19] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[19].west_rx  ( .i(\e_tx[1][1][19] ), .o(
        \w[2][1][19] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[19].south_tx  ( .i(\s[2][1][19] ), .c(
        \s_tx[2][1][19] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[19].east_tx  ( .i(\e[2][1][19] ), .c(
        \e_tx[2][1][19] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[20].north_rx  ( .i(\s_tx[2][0][20] ), .o(
        \n[2][1][20] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[20].west_rx  ( .i(\e_tx[1][1][20] ), .o(
        \w[2][1][20] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[20].south_tx  ( .i(\s[2][1][20] ), .c(
        \s_tx[2][1][20] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[20].east_tx  ( .i(\e[2][1][20] ), .c(
        \e_tx[2][1][20] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[21].north_rx  ( .i(\s_tx[2][0][21] ), .o(
        \n[2][1][21] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[21].west_rx  ( .i(\e_tx[1][1][21] ), .o(
        \w[2][1][21] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[21].south_tx  ( .i(\s[2][1][21] ), .c(
        \s_tx[2][1][21] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[21].east_tx  ( .i(\e[2][1][21] ), .c(
        \e_tx[2][1][21] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[22].north_rx  ( .i(\s_tx[2][0][22] ), .o(
        \n[2][1][22] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[22].west_rx  ( .i(\e_tx[1][1][22] ), .o(
        \w[2][1][22] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[22].south_tx  ( .i(\s[2][1][22] ), .c(
        \s_tx[2][1][22] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[22].east_tx  ( .i(\e[2][1][22] ), .c(
        \e_tx[2][1][22] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[23].north_rx  ( .i(\s_tx[2][0][23] ), .o(
        \n[2][1][23] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[23].west_rx  ( .i(\e_tx[1][1][23] ), .o(
        \w[2][1][23] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[23].south_tx  ( .i(\s[2][1][23] ), .c(
        \s_tx[2][1][23] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[23].east_tx  ( .i(\e[2][1][23] ), .c(
        \e_tx[2][1][23] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[24].north_rx  ( .i(\s_tx[2][0][24] ), .o(
        \n[2][1][24] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[24].west_rx  ( .i(\e_tx[1][1][24] ), .o(
        \w[2][1][24] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[24].south_tx  ( .i(\s[2][1][24] ), .c(
        \s_tx[2][1][24] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[24].east_tx  ( .i(\e[2][1][24] ), .c(
        \e_tx[2][1][24] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[25].north_rx  ( .i(\s_tx[2][0][25] ), .o(
        \n[2][1][25] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[25].west_rx  ( .i(\e_tx[1][1][25] ), .o(
        \w[2][1][25] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[25].south_tx  ( .i(\s[2][1][25] ), .c(
        \s_tx[2][1][25] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[25].east_tx  ( .i(\e[2][1][25] ), .c(
        \e_tx[2][1][25] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[26].north_rx  ( .i(\s_tx[2][0][26] ), .o(
        \n[2][1][26] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[26].west_rx  ( .i(\e_tx[1][1][26] ), .o(
        \w[2][1][26] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[26].south_tx  ( .i(\s[2][1][26] ), .c(
        \s_tx[2][1][26] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[26].east_tx  ( .i(\e[2][1][26] ), .c(
        \e_tx[2][1][26] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[27].north_rx  ( .i(\s_tx[2][0][27] ), .o(
        \n[2][1][27] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[27].west_rx  ( .i(\e_tx[1][1][27] ), .o(
        \w[2][1][27] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[27].south_tx  ( .i(\s[2][1][27] ), .c(
        \s_tx[2][1][27] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[27].east_tx  ( .i(\e[2][1][27] ), .c(
        \e_tx[2][1][27] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[28].north_rx  ( .i(\s_tx[2][0][28] ), .o(
        \n[2][1][28] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[28].west_rx  ( .i(\e_tx[1][1][28] ), .o(
        \w[2][1][28] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[28].south_tx  ( .i(\s[2][1][28] ), .c(
        \s_tx[2][1][28] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[28].east_tx  ( .i(\e[2][1][28] ), .c(
        \e_tx[2][1][28] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[29].north_rx  ( .i(\s_tx[2][0][29] ), .o(
        \n[2][1][29] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[29].west_rx  ( .i(\e_tx[1][1][29] ), .o(
        \w[2][1][29] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[29].south_tx  ( .i(\s[2][1][29] ), .c(
        \s_tx[2][1][29] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[29].east_tx  ( .i(\e[2][1][29] ), .c(
        \e_tx[2][1][29] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[30].north_rx  ( .i(\s_tx[2][0][30] ), .o(
        \n[2][1][30] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[30].west_rx  ( .i(\e_tx[1][1][30] ), .o(
        \w[2][1][30] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[30].south_tx  ( .i(\s[2][1][30] ), .c(
        \s_tx[2][1][30] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[30].east_tx  ( .i(\e[2][1][30] ), .c(
        \e_tx[2][1][30] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[31].north_rx  ( .i(\s_tx[2][0][31] ), .o(
        \n[2][1][31] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[31].west_rx  ( .i(\e_tx[1][1][31] ), .o(
        \w[2][1][31] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[31].south_tx  ( .i(\s[2][1][31] ), .c(
        \s_tx[2][1][31] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[31].east_tx  ( .i(\e[2][1][31] ), .c(
        \e_tx[2][1][31] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[32].north_rx  ( .i(\s_tx[2][0][32] ), .o(
        \n[2][1][32] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[32].west_rx  ( .i(\e_tx[1][1][32] ), .o(
        \w[2][1][32] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[32].south_tx  ( .i(\s[2][1][32] ), .c(
        \s_tx[2][1][32] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[32].east_tx  ( .i(\e[2][1][32] ), .c(
        \e_tx[2][1][32] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[33].north_rx  ( .i(\s_tx[2][0][33] ), .o(
        \n[2][1][33] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[33].west_rx  ( .i(\e_tx[1][1][33] ), .o(
        \w[2][1][33] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[33].south_tx  ( .i(\s[2][1][33] ), .c(
        \s_tx[2][1][33] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[33].east_tx  ( .i(\e[2][1][33] ), .c(
        \e_tx[2][1][33] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[34].north_rx  ( .i(\s_tx[2][0][34] ), .o(
        \n[2][1][34] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[34].west_rx  ( .i(\e_tx[1][1][34] ), .o(
        \w[2][1][34] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[34].south_tx  ( .i(\s[2][1][34] ), .c(
        \s_tx[2][1][34] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[34].east_tx  ( .i(\e[2][1][34] ), .c(
        \e_tx[2][1][34] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[35].north_rx  ( .i(\s_tx[2][0][35] ), .o(
        \n[2][1][35] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[35].west_rx  ( .i(\e_tx[1][1][35] ), .o(
        \w[2][1][35] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[35].south_tx  ( .i(\s[2][1][35] ), .c(
        \s_tx[2][1][35] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[35].east_tx  ( .i(\e[2][1][35] ), .c(
        \e_tx[2][1][35] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[36].north_rx  ( .i(\s_tx[2][0][36] ), .o(
        \n[2][1][36] ) );
  low_swing_rx \ys[1].xs[2].msg_txrx[36].west_rx  ( .i(\e_tx[1][1][36] ), .o(
        \w[2][1][36] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[36].south_tx  ( .i(\s[2][1][36] ), .c(
        \s_tx[2][1][36] ) );
  low_swing_tx \ys[1].xs[2].msg_txrx[36].east_tx  ( .i(\e[2][1][36] ), .c(
        \e_tx[2][1][36] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[0].north_rx  ( .i(\s_tx[3][0][0] ), .o(
        \n[3][1][0] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[0].west_rx  ( .i(\e_tx[2][1][0] ), .o(
        \w[3][1][0] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[0].south_tx  ( .i(\s[3][1][0] ), .c(
        \s_tx[3][1][0] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[0].east_tx  ( .i(\e[3][1][0] ), .c(
        \e_tx[3][1][0] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[1].north_rx  ( .i(\s_tx[3][0][1] ), .o(
        \n[3][1][1] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[1].west_rx  ( .i(\e_tx[2][1][1] ), .o(
        \w[3][1][1] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[1].south_tx  ( .i(\s[3][1][1] ), .c(
        \s_tx[3][1][1] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[1].east_tx  ( .i(\e[3][1][1] ), .c(
        \e_tx[3][1][1] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[2].north_rx  ( .i(\s_tx[3][0][2] ), .o(
        \n[3][1][2] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[2].west_rx  ( .i(\e_tx[2][1][2] ), .o(
        \w[3][1][2] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[2].south_tx  ( .i(\s[3][1][2] ), .c(
        \s_tx[3][1][2] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[2].east_tx  ( .i(\e[3][1][2] ), .c(
        \e_tx[3][1][2] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[3].north_rx  ( .i(\s_tx[3][0][3] ), .o(
        \n[3][1][3] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[3].west_rx  ( .i(\e_tx[2][1][3] ), .o(
        \w[3][1][3] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[3].south_tx  ( .i(\s[3][1][3] ), .c(
        \s_tx[3][1][3] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[3].east_tx  ( .i(\e[3][1][3] ), .c(
        \e_tx[3][1][3] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[4].north_rx  ( .i(\s_tx[3][0][4] ), .o(
        \n[3][1][4] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[4].west_rx  ( .i(\e_tx[2][1][4] ), .o(
        \w[3][1][4] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[4].south_tx  ( .i(\s[3][1][4] ), .c(
        \s_tx[3][1][4] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[4].east_tx  ( .i(\e[3][1][4] ), .c(
        \e_tx[3][1][4] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[5].north_rx  ( .i(\s_tx[3][0][5] ), .o(
        \n[3][1][5] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[5].west_rx  ( .i(\e_tx[2][1][5] ), .o(
        \w[3][1][5] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[5].south_tx  ( .i(\s[3][1][5] ), .c(
        \s_tx[3][1][5] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[5].east_tx  ( .i(\e[3][1][5] ), .c(
        \e_tx[3][1][5] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[6].north_rx  ( .i(\s_tx[3][0][6] ), .o(
        \n[3][1][6] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[6].west_rx  ( .i(\e_tx[2][1][6] ), .o(
        \w[3][1][6] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[6].south_tx  ( .i(\s[3][1][6] ), .c(
        \s_tx[3][1][6] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[6].east_tx  ( .i(\e[3][1][6] ), .c(
        \e_tx[3][1][6] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[7].north_rx  ( .i(\s_tx[3][0][7] ), .o(
        \n[3][1][7] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[7].west_rx  ( .i(\e_tx[2][1][7] ), .o(
        \w[3][1][7] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[7].south_tx  ( .i(\s[3][1][7] ), .c(
        \s_tx[3][1][7] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[7].east_tx  ( .i(\e[3][1][7] ), .c(
        \e_tx[3][1][7] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[8].north_rx  ( .i(\s_tx[3][0][8] ), .o(
        \n[3][1][8] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[8].west_rx  ( .i(\e_tx[2][1][8] ), .o(
        \w[3][1][8] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[8].south_tx  ( .i(\s[3][1][8] ), .c(
        \s_tx[3][1][8] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[8].east_tx  ( .i(\e[3][1][8] ), .c(
        \e_tx[3][1][8] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[9].north_rx  ( .i(\s_tx[3][0][9] ), .o(
        \n[3][1][9] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[9].west_rx  ( .i(\e_tx[2][1][9] ), .o(
        \w[3][1][9] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[9].south_tx  ( .i(\s[3][1][9] ), .c(
        \s_tx[3][1][9] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[9].east_tx  ( .i(\e[3][1][9] ), .c(
        \e_tx[3][1][9] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[10].north_rx  ( .i(\s_tx[3][0][10] ), .o(
        \n[3][1][10] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[10].west_rx  ( .i(\e_tx[2][1][10] ), .o(
        \w[3][1][10] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[10].south_tx  ( .i(\s[3][1][10] ), .c(
        \s_tx[3][1][10] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[10].east_tx  ( .i(\e[3][1][10] ), .c(
        \e_tx[3][1][10] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[11].north_rx  ( .i(\s_tx[3][0][11] ), .o(
        \n[3][1][11] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[11].west_rx  ( .i(\e_tx[2][1][11] ), .o(
        \w[3][1][11] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[11].south_tx  ( .i(\s[3][1][11] ), .c(
        \s_tx[3][1][11] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[11].east_tx  ( .i(\e[3][1][11] ), .c(
        \e_tx[3][1][11] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[12].north_rx  ( .i(\s_tx[3][0][12] ), .o(
        \n[3][1][12] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[12].west_rx  ( .i(\e_tx[2][1][12] ), .o(
        \w[3][1][12] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[12].south_tx  ( .i(\s[3][1][12] ), .c(
        \s_tx[3][1][12] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[12].east_tx  ( .i(\e[3][1][12] ), .c(
        \e_tx[3][1][12] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[13].north_rx  ( .i(\s_tx[3][0][13] ), .o(
        \n[3][1][13] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[13].west_rx  ( .i(\e_tx[2][1][13] ), .o(
        \w[3][1][13] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[13].south_tx  ( .i(\s[3][1][13] ), .c(
        \s_tx[3][1][13] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[13].east_tx  ( .i(\e[3][1][13] ), .c(
        \e_tx[3][1][13] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[14].north_rx  ( .i(\s_tx[3][0][14] ), .o(
        \n[3][1][14] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[14].west_rx  ( .i(\e_tx[2][1][14] ), .o(
        \w[3][1][14] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[14].south_tx  ( .i(\s[3][1][14] ), .c(
        \s_tx[3][1][14] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[14].east_tx  ( .i(\e[3][1][14] ), .c(
        \e_tx[3][1][14] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[15].north_rx  ( .i(\s_tx[3][0][15] ), .o(
        \n[3][1][15] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[15].west_rx  ( .i(\e_tx[2][1][15] ), .o(
        \w[3][1][15] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[15].south_tx  ( .i(\s[3][1][15] ), .c(
        \s_tx[3][1][15] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[15].east_tx  ( .i(\e[3][1][15] ), .c(
        \e_tx[3][1][15] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[16].north_rx  ( .i(\s_tx[3][0][16] ), .o(
        \n[3][1][16] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[16].west_rx  ( .i(\e_tx[2][1][16] ), .o(
        \w[3][1][16] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[16].south_tx  ( .i(\s[3][1][16] ), .c(
        \s_tx[3][1][16] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[16].east_tx  ( .i(\e[3][1][16] ), .c(
        \e_tx[3][1][16] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[17].north_rx  ( .i(\s_tx[3][0][17] ), .o(
        \n[3][1][17] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[17].west_rx  ( .i(\e_tx[2][1][17] ), .o(
        \w[3][1][17] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[17].south_tx  ( .i(\s[3][1][17] ), .c(
        \s_tx[3][1][17] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[17].east_tx  ( .i(\e[3][1][17] ), .c(
        \e_tx[3][1][17] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[18].north_rx  ( .i(\s_tx[3][0][18] ), .o(
        \n[3][1][18] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[18].west_rx  ( .i(\e_tx[2][1][18] ), .o(
        \w[3][1][18] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[18].south_tx  ( .i(\s[3][1][18] ), .c(
        \s_tx[3][1][18] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[18].east_tx  ( .i(\e[3][1][18] ), .c(
        \e_tx[3][1][18] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[19].north_rx  ( .i(\s_tx[3][0][19] ), .o(
        \n[3][1][19] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[19].west_rx  ( .i(\e_tx[2][1][19] ), .o(
        \w[3][1][19] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[19].south_tx  ( .i(\s[3][1][19] ), .c(
        \s_tx[3][1][19] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[19].east_tx  ( .i(\e[3][1][19] ), .c(
        \e_tx[3][1][19] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[20].north_rx  ( .i(\s_tx[3][0][20] ), .o(
        \n[3][1][20] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[20].west_rx  ( .i(\e_tx[2][1][20] ), .o(
        \w[3][1][20] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[20].south_tx  ( .i(\s[3][1][20] ), .c(
        \s_tx[3][1][20] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[20].east_tx  ( .i(\e[3][1][20] ), .c(
        \e_tx[3][1][20] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[21].north_rx  ( .i(\s_tx[3][0][21] ), .o(
        \n[3][1][21] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[21].west_rx  ( .i(\e_tx[2][1][21] ), .o(
        \w[3][1][21] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[21].south_tx  ( .i(\s[3][1][21] ), .c(
        \s_tx[3][1][21] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[21].east_tx  ( .i(\e[3][1][21] ), .c(
        \e_tx[3][1][21] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[22].north_rx  ( .i(\s_tx[3][0][22] ), .o(
        \n[3][1][22] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[22].west_rx  ( .i(\e_tx[2][1][22] ), .o(
        \w[3][1][22] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[22].south_tx  ( .i(\s[3][1][22] ), .c(
        \s_tx[3][1][22] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[22].east_tx  ( .i(\e[3][1][22] ), .c(
        \e_tx[3][1][22] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[23].north_rx  ( .i(\s_tx[3][0][23] ), .o(
        \n[3][1][23] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[23].west_rx  ( .i(\e_tx[2][1][23] ), .o(
        \w[3][1][23] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[23].south_tx  ( .i(\s[3][1][23] ), .c(
        \s_tx[3][1][23] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[23].east_tx  ( .i(\e[3][1][23] ), .c(
        \e_tx[3][1][23] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[24].north_rx  ( .i(\s_tx[3][0][24] ), .o(
        \n[3][1][24] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[24].west_rx  ( .i(\e_tx[2][1][24] ), .o(
        \w[3][1][24] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[24].south_tx  ( .i(\s[3][1][24] ), .c(
        \s_tx[3][1][24] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[24].east_tx  ( .i(\e[3][1][24] ), .c(
        \e_tx[3][1][24] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[25].north_rx  ( .i(\s_tx[3][0][25] ), .o(
        \n[3][1][25] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[25].west_rx  ( .i(\e_tx[2][1][25] ), .o(
        \w[3][1][25] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[25].south_tx  ( .i(\s[3][1][25] ), .c(
        \s_tx[3][1][25] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[25].east_tx  ( .i(\e[3][1][25] ), .c(
        \e_tx[3][1][25] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[26].north_rx  ( .i(\s_tx[3][0][26] ), .o(
        \n[3][1][26] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[26].west_rx  ( .i(\e_tx[2][1][26] ), .o(
        \w[3][1][26] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[26].south_tx  ( .i(\s[3][1][26] ), .c(
        \s_tx[3][1][26] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[26].east_tx  ( .i(\e[3][1][26] ), .c(
        \e_tx[3][1][26] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[27].north_rx  ( .i(\s_tx[3][0][27] ), .o(
        \n[3][1][27] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[27].west_rx  ( .i(\e_tx[2][1][27] ), .o(
        \w[3][1][27] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[27].south_tx  ( .i(\s[3][1][27] ), .c(
        \s_tx[3][1][27] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[27].east_tx  ( .i(\e[3][1][27] ), .c(
        \e_tx[3][1][27] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[28].north_rx  ( .i(\s_tx[3][0][28] ), .o(
        \n[3][1][28] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[28].west_rx  ( .i(\e_tx[2][1][28] ), .o(
        \w[3][1][28] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[28].south_tx  ( .i(\s[3][1][28] ), .c(
        \s_tx[3][1][28] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[28].east_tx  ( .i(\e[3][1][28] ), .c(
        \e_tx[3][1][28] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[29].north_rx  ( .i(\s_tx[3][0][29] ), .o(
        \n[3][1][29] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[29].west_rx  ( .i(\e_tx[2][1][29] ), .o(
        \w[3][1][29] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[29].south_tx  ( .i(\s[3][1][29] ), .c(
        \s_tx[3][1][29] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[29].east_tx  ( .i(\e[3][1][29] ), .c(
        \e_tx[3][1][29] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[30].north_rx  ( .i(\s_tx[3][0][30] ), .o(
        \n[3][1][30] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[30].west_rx  ( .i(\e_tx[2][1][30] ), .o(
        \w[3][1][30] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[30].south_tx  ( .i(\s[3][1][30] ), .c(
        \s_tx[3][1][30] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[30].east_tx  ( .i(\e[3][1][30] ), .c(
        \e_tx[3][1][30] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[31].north_rx  ( .i(\s_tx[3][0][31] ), .o(
        \n[3][1][31] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[31].west_rx  ( .i(\e_tx[2][1][31] ), .o(
        \w[3][1][31] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[31].south_tx  ( .i(\s[3][1][31] ), .c(
        \s_tx[3][1][31] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[31].east_tx  ( .i(\e[3][1][31] ), .c(
        \e_tx[3][1][31] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[32].north_rx  ( .i(\s_tx[3][0][32] ), .o(
        \n[3][1][32] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[32].west_rx  ( .i(\e_tx[2][1][32] ), .o(
        \w[3][1][32] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[32].south_tx  ( .i(\s[3][1][32] ), .c(
        \s_tx[3][1][32] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[32].east_tx  ( .i(\e[3][1][32] ), .c(
        \e_tx[3][1][32] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[33].north_rx  ( .i(\s_tx[3][0][33] ), .o(
        \n[3][1][33] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[33].west_rx  ( .i(\e_tx[2][1][33] ), .o(
        \w[3][1][33] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[33].south_tx  ( .i(\s[3][1][33] ), .c(
        \s_tx[3][1][33] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[33].east_tx  ( .i(\e[3][1][33] ), .c(
        \e_tx[3][1][33] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[34].north_rx  ( .i(\s_tx[3][0][34] ), .o(
        \n[3][1][34] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[34].west_rx  ( .i(\e_tx[2][1][34] ), .o(
        \w[3][1][34] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[34].south_tx  ( .i(\s[3][1][34] ), .c(
        \s_tx[3][1][34] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[34].east_tx  ( .i(\e[3][1][34] ), .c(
        \e_tx[3][1][34] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[35].north_rx  ( .i(\s_tx[3][0][35] ), .o(
        \n[3][1][35] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[35].west_rx  ( .i(\e_tx[2][1][35] ), .o(
        \w[3][1][35] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[35].south_tx  ( .i(\s[3][1][35] ), .c(
        \s_tx[3][1][35] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[35].east_tx  ( .i(\e[3][1][35] ), .c(
        \e_tx[3][1][35] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[36].north_rx  ( .i(\s_tx[3][0][36] ), .o(
        \n[3][1][36] ) );
  low_swing_rx \ys[1].xs[3].msg_txrx[36].west_rx  ( .i(\e_tx[2][1][36] ), .o(
        \w[3][1][36] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[36].south_tx  ( .i(\s[3][1][36] ), .c(
        \s_tx[3][1][36] ) );
  low_swing_tx \ys[1].xs[3].msg_txrx[36].east_tx  ( .i(\e[3][1][36] ), .c(
        \e_tx[3][1][36] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[0].north_rx  ( .i(\s_tx[0][1][0] ), .o(
        \n[0][2][0] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[0].west_rx  ( .i(\e_tx[3][2][0] ), .o(
        \w[0][2][0] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[0].south_tx  ( .i(\s[0][2][0] ), .c(
        \s_tx[0][2][0] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[0].east_tx  ( .i(\e[0][2][0] ), .c(
        \e_tx[0][2][0] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[1].north_rx  ( .i(\s_tx[0][1][1] ), .o(
        \n[0][2][1] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[1].west_rx  ( .i(\e_tx[3][2][1] ), .o(
        \w[0][2][1] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[1].south_tx  ( .i(\s[0][2][1] ), .c(
        \s_tx[0][2][1] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[1].east_tx  ( .i(\e[0][2][1] ), .c(
        \e_tx[0][2][1] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[2].north_rx  ( .i(\s_tx[0][1][2] ), .o(
        \n[0][2][2] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[2].west_rx  ( .i(\e_tx[3][2][2] ), .o(
        \w[0][2][2] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[2].south_tx  ( .i(\s[0][2][2] ), .c(
        \s_tx[0][2][2] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[2].east_tx  ( .i(\e[0][2][2] ), .c(
        \e_tx[0][2][2] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[3].north_rx  ( .i(\s_tx[0][1][3] ), .o(
        \n[0][2][3] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[3].west_rx  ( .i(\e_tx[3][2][3] ), .o(
        \w[0][2][3] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[3].south_tx  ( .i(\s[0][2][3] ), .c(
        \s_tx[0][2][3] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[3].east_tx  ( .i(\e[0][2][3] ), .c(
        \e_tx[0][2][3] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[4].north_rx  ( .i(\s_tx[0][1][4] ), .o(
        \n[0][2][4] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[4].west_rx  ( .i(\e_tx[3][2][4] ), .o(
        \w[0][2][4] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[4].south_tx  ( .i(\s[0][2][4] ), .c(
        \s_tx[0][2][4] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[4].east_tx  ( .i(\e[0][2][4] ), .c(
        \e_tx[0][2][4] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[5].north_rx  ( .i(\s_tx[0][1][5] ), .o(
        \n[0][2][5] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[5].west_rx  ( .i(\e_tx[3][2][5] ), .o(
        \w[0][2][5] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[5].south_tx  ( .i(\s[0][2][5] ), .c(
        \s_tx[0][2][5] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[5].east_tx  ( .i(\e[0][2][5] ), .c(
        \e_tx[0][2][5] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[6].north_rx  ( .i(\s_tx[0][1][6] ), .o(
        \n[0][2][6] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[6].west_rx  ( .i(\e_tx[3][2][6] ), .o(
        \w[0][2][6] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[6].south_tx  ( .i(\s[0][2][6] ), .c(
        \s_tx[0][2][6] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[6].east_tx  ( .i(\e[0][2][6] ), .c(
        \e_tx[0][2][6] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[7].north_rx  ( .i(\s_tx[0][1][7] ), .o(
        \n[0][2][7] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[7].west_rx  ( .i(\e_tx[3][2][7] ), .o(
        \w[0][2][7] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[7].south_tx  ( .i(\s[0][2][7] ), .c(
        \s_tx[0][2][7] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[7].east_tx  ( .i(\e[0][2][7] ), .c(
        \e_tx[0][2][7] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[8].north_rx  ( .i(\s_tx[0][1][8] ), .o(
        \n[0][2][8] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[8].west_rx  ( .i(\e_tx[3][2][8] ), .o(
        \w[0][2][8] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[8].south_tx  ( .i(\s[0][2][8] ), .c(
        \s_tx[0][2][8] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[8].east_tx  ( .i(\e[0][2][8] ), .c(
        \e_tx[0][2][8] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[9].north_rx  ( .i(\s_tx[0][1][9] ), .o(
        \n[0][2][9] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[9].west_rx  ( .i(\e_tx[3][2][9] ), .o(
        \w[0][2][9] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[9].south_tx  ( .i(\s[0][2][9] ), .c(
        \s_tx[0][2][9] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[9].east_tx  ( .i(\e[0][2][9] ), .c(
        \e_tx[0][2][9] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[10].north_rx  ( .i(\s_tx[0][1][10] ), .o(
        \n[0][2][10] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[10].west_rx  ( .i(\e_tx[3][2][10] ), .o(
        \w[0][2][10] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[10].south_tx  ( .i(\s[0][2][10] ), .c(
        \s_tx[0][2][10] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[10].east_tx  ( .i(\e[0][2][10] ), .c(
        \e_tx[0][2][10] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[11].north_rx  ( .i(\s_tx[0][1][11] ), .o(
        \n[0][2][11] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[11].west_rx  ( .i(\e_tx[3][2][11] ), .o(
        \w[0][2][11] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[11].south_tx  ( .i(\s[0][2][11] ), .c(
        \s_tx[0][2][11] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[11].east_tx  ( .i(\e[0][2][11] ), .c(
        \e_tx[0][2][11] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[12].north_rx  ( .i(\s_tx[0][1][12] ), .o(
        \n[0][2][12] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[12].west_rx  ( .i(\e_tx[3][2][12] ), .o(
        \w[0][2][12] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[12].south_tx  ( .i(\s[0][2][12] ), .c(
        \s_tx[0][2][12] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[12].east_tx  ( .i(\e[0][2][12] ), .c(
        \e_tx[0][2][12] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[13].north_rx  ( .i(\s_tx[0][1][13] ), .o(
        \n[0][2][13] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[13].west_rx  ( .i(\e_tx[3][2][13] ), .o(
        \w[0][2][13] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[13].south_tx  ( .i(\s[0][2][13] ), .c(
        \s_tx[0][2][13] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[13].east_tx  ( .i(\e[0][2][13] ), .c(
        \e_tx[0][2][13] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[14].north_rx  ( .i(\s_tx[0][1][14] ), .o(
        \n[0][2][14] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[14].west_rx  ( .i(\e_tx[3][2][14] ), .o(
        \w[0][2][14] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[14].south_tx  ( .i(\s[0][2][14] ), .c(
        \s_tx[0][2][14] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[14].east_tx  ( .i(\e[0][2][14] ), .c(
        \e_tx[0][2][14] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[15].north_rx  ( .i(\s_tx[0][1][15] ), .o(
        \n[0][2][15] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[15].west_rx  ( .i(\e_tx[3][2][15] ), .o(
        \w[0][2][15] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[15].south_tx  ( .i(\s[0][2][15] ), .c(
        \s_tx[0][2][15] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[15].east_tx  ( .i(\e[0][2][15] ), .c(
        \e_tx[0][2][15] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[16].north_rx  ( .i(\s_tx[0][1][16] ), .o(
        \n[0][2][16] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[16].west_rx  ( .i(\e_tx[3][2][16] ), .o(
        \w[0][2][16] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[16].south_tx  ( .i(\s[0][2][16] ), .c(
        \s_tx[0][2][16] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[16].east_tx  ( .i(\e[0][2][16] ), .c(
        \e_tx[0][2][16] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[17].north_rx  ( .i(\s_tx[0][1][17] ), .o(
        \n[0][2][17] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[17].west_rx  ( .i(\e_tx[3][2][17] ), .o(
        \w[0][2][17] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[17].south_tx  ( .i(\s[0][2][17] ), .c(
        \s_tx[0][2][17] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[17].east_tx  ( .i(\e[0][2][17] ), .c(
        \e_tx[0][2][17] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[18].north_rx  ( .i(\s_tx[0][1][18] ), .o(
        \n[0][2][18] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[18].west_rx  ( .i(\e_tx[3][2][18] ), .o(
        \w[0][2][18] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[18].south_tx  ( .i(\s[0][2][18] ), .c(
        \s_tx[0][2][18] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[18].east_tx  ( .i(\e[0][2][18] ), .c(
        \e_tx[0][2][18] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[19].north_rx  ( .i(\s_tx[0][1][19] ), .o(
        \n[0][2][19] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[19].west_rx  ( .i(\e_tx[3][2][19] ), .o(
        \w[0][2][19] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[19].south_tx  ( .i(\s[0][2][19] ), .c(
        \s_tx[0][2][19] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[19].east_tx  ( .i(\e[0][2][19] ), .c(
        \e_tx[0][2][19] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[20].north_rx  ( .i(\s_tx[0][1][20] ), .o(
        \n[0][2][20] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[20].west_rx  ( .i(\e_tx[3][2][20] ), .o(
        \w[0][2][20] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[20].south_tx  ( .i(\s[0][2][20] ), .c(
        \s_tx[0][2][20] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[20].east_tx  ( .i(\e[0][2][20] ), .c(
        \e_tx[0][2][20] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[21].north_rx  ( .i(\s_tx[0][1][21] ), .o(
        \n[0][2][21] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[21].west_rx  ( .i(\e_tx[3][2][21] ), .o(
        \w[0][2][21] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[21].south_tx  ( .i(\s[0][2][21] ), .c(
        \s_tx[0][2][21] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[21].east_tx  ( .i(\e[0][2][21] ), .c(
        \e_tx[0][2][21] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[22].north_rx  ( .i(\s_tx[0][1][22] ), .o(
        \n[0][2][22] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[22].west_rx  ( .i(\e_tx[3][2][22] ), .o(
        \w[0][2][22] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[22].south_tx  ( .i(\s[0][2][22] ), .c(
        \s_tx[0][2][22] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[22].east_tx  ( .i(\e[0][2][22] ), .c(
        \e_tx[0][2][22] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[23].north_rx  ( .i(\s_tx[0][1][23] ), .o(
        \n[0][2][23] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[23].west_rx  ( .i(\e_tx[3][2][23] ), .o(
        \w[0][2][23] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[23].south_tx  ( .i(\s[0][2][23] ), .c(
        \s_tx[0][2][23] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[23].east_tx  ( .i(\e[0][2][23] ), .c(
        \e_tx[0][2][23] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[24].north_rx  ( .i(\s_tx[0][1][24] ), .o(
        \n[0][2][24] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[24].west_rx  ( .i(\e_tx[3][2][24] ), .o(
        \w[0][2][24] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[24].south_tx  ( .i(\s[0][2][24] ), .c(
        \s_tx[0][2][24] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[24].east_tx  ( .i(\e[0][2][24] ), .c(
        \e_tx[0][2][24] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[25].north_rx  ( .i(\s_tx[0][1][25] ), .o(
        \n[0][2][25] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[25].west_rx  ( .i(\e_tx[3][2][25] ), .o(
        \w[0][2][25] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[25].south_tx  ( .i(\s[0][2][25] ), .c(
        \s_tx[0][2][25] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[25].east_tx  ( .i(\e[0][2][25] ), .c(
        \e_tx[0][2][25] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[26].north_rx  ( .i(\s_tx[0][1][26] ), .o(
        \n[0][2][26] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[26].west_rx  ( .i(\e_tx[3][2][26] ), .o(
        \w[0][2][26] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[26].south_tx  ( .i(\s[0][2][26] ), .c(
        \s_tx[0][2][26] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[26].east_tx  ( .i(\e[0][2][26] ), .c(
        \e_tx[0][2][26] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[27].north_rx  ( .i(\s_tx[0][1][27] ), .o(
        \n[0][2][27] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[27].west_rx  ( .i(\e_tx[3][2][27] ), .o(
        \w[0][2][27] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[27].south_tx  ( .i(\s[0][2][27] ), .c(
        \s_tx[0][2][27] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[27].east_tx  ( .i(\e[0][2][27] ), .c(
        \e_tx[0][2][27] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[28].north_rx  ( .i(\s_tx[0][1][28] ), .o(
        \n[0][2][28] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[28].west_rx  ( .i(\e_tx[3][2][28] ), .o(
        \w[0][2][28] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[28].south_tx  ( .i(\s[0][2][28] ), .c(
        \s_tx[0][2][28] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[28].east_tx  ( .i(\e[0][2][28] ), .c(
        \e_tx[0][2][28] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[29].north_rx  ( .i(\s_tx[0][1][29] ), .o(
        \n[0][2][29] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[29].west_rx  ( .i(\e_tx[3][2][29] ), .o(
        \w[0][2][29] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[29].south_tx  ( .i(\s[0][2][29] ), .c(
        \s_tx[0][2][29] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[29].east_tx  ( .i(\e[0][2][29] ), .c(
        \e_tx[0][2][29] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[30].north_rx  ( .i(\s_tx[0][1][30] ), .o(
        \n[0][2][30] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[30].west_rx  ( .i(\e_tx[3][2][30] ), .o(
        \w[0][2][30] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[30].south_tx  ( .i(\s[0][2][30] ), .c(
        \s_tx[0][2][30] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[30].east_tx  ( .i(\e[0][2][30] ), .c(
        \e_tx[0][2][30] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[31].north_rx  ( .i(\s_tx[0][1][31] ), .o(
        \n[0][2][31] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[31].west_rx  ( .i(\e_tx[3][2][31] ), .o(
        \w[0][2][31] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[31].south_tx  ( .i(\s[0][2][31] ), .c(
        \s_tx[0][2][31] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[31].east_tx  ( .i(\e[0][2][31] ), .c(
        \e_tx[0][2][31] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[32].north_rx  ( .i(\s_tx[0][1][32] ), .o(
        \n[0][2][32] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[32].west_rx  ( .i(\e_tx[3][2][32] ), .o(
        \w[0][2][32] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[32].south_tx  ( .i(\s[0][2][32] ), .c(
        \s_tx[0][2][32] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[32].east_tx  ( .i(\e[0][2][32] ), .c(
        \e_tx[0][2][32] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[33].north_rx  ( .i(\s_tx[0][1][33] ), .o(
        \n[0][2][33] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[33].west_rx  ( .i(\e_tx[3][2][33] ), .o(
        \w[0][2][33] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[33].south_tx  ( .i(\s[0][2][33] ), .c(
        \s_tx[0][2][33] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[33].east_tx  ( .i(\e[0][2][33] ), .c(
        \e_tx[0][2][33] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[34].north_rx  ( .i(\s_tx[0][1][34] ), .o(
        \n[0][2][34] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[34].west_rx  ( .i(\e_tx[3][2][34] ), .o(
        \w[0][2][34] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[34].south_tx  ( .i(\s[0][2][34] ), .c(
        \s_tx[0][2][34] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[34].east_tx  ( .i(\e[0][2][34] ), .c(
        \e_tx[0][2][34] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[35].north_rx  ( .i(\s_tx[0][1][35] ), .o(
        \n[0][2][35] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[35].west_rx  ( .i(\e_tx[3][2][35] ), .o(
        \w[0][2][35] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[35].south_tx  ( .i(\s[0][2][35] ), .c(
        \s_tx[0][2][35] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[35].east_tx  ( .i(\e[0][2][35] ), .c(
        \e_tx[0][2][35] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[36].north_rx  ( .i(\s_tx[0][1][36] ), .o(
        \n[0][2][36] ) );
  low_swing_rx \ys[2].xs[0].msg_txrx[36].west_rx  ( .i(\e_tx[3][2][36] ), .o(
        \w[0][2][36] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[36].south_tx  ( .i(\s[0][2][36] ), .c(
        \s_tx[0][2][36] ) );
  low_swing_tx \ys[2].xs[0].msg_txrx[36].east_tx  ( .i(\e[0][2][36] ), .c(
        \e_tx[0][2][36] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[0].north_rx  ( .i(\s_tx[1][1][0] ), .o(
        \n[1][2][0] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[0].west_rx  ( .i(\e_tx[0][2][0] ), .o(
        \w[1][2][0] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[0].south_tx  ( .i(\s[1][2][0] ), .c(
        \s_tx[1][2][0] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[0].east_tx  ( .i(\e[1][2][0] ), .c(
        \e_tx[1][2][0] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[1].north_rx  ( .i(\s_tx[1][1][1] ), .o(
        \n[1][2][1] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[1].west_rx  ( .i(\e_tx[0][2][1] ), .o(
        \w[1][2][1] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[1].south_tx  ( .i(\s[1][2][1] ), .c(
        \s_tx[1][2][1] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[1].east_tx  ( .i(\e[1][2][1] ), .c(
        \e_tx[1][2][1] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[2].north_rx  ( .i(\s_tx[1][1][2] ), .o(
        \n[1][2][2] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[2].west_rx  ( .i(\e_tx[0][2][2] ), .o(
        \w[1][2][2] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[2].south_tx  ( .i(\s[1][2][2] ), .c(
        \s_tx[1][2][2] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[2].east_tx  ( .i(\e[1][2][2] ), .c(
        \e_tx[1][2][2] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[3].north_rx  ( .i(\s_tx[1][1][3] ), .o(
        \n[1][2][3] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[3].west_rx  ( .i(\e_tx[0][2][3] ), .o(
        \w[1][2][3] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[3].south_tx  ( .i(\s[1][2][3] ), .c(
        \s_tx[1][2][3] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[3].east_tx  ( .i(\e[1][2][3] ), .c(
        \e_tx[1][2][3] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[4].north_rx  ( .i(\s_tx[1][1][4] ), .o(
        \n[1][2][4] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[4].west_rx  ( .i(\e_tx[0][2][4] ), .o(
        \w[1][2][4] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[4].south_tx  ( .i(\s[1][2][4] ), .c(
        \s_tx[1][2][4] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[4].east_tx  ( .i(\e[1][2][4] ), .c(
        \e_tx[1][2][4] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[5].north_rx  ( .i(\s_tx[1][1][5] ), .o(
        \n[1][2][5] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[5].west_rx  ( .i(\e_tx[0][2][5] ), .o(
        \w[1][2][5] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[5].south_tx  ( .i(\s[1][2][5] ), .c(
        \s_tx[1][2][5] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[5].east_tx  ( .i(\e[1][2][5] ), .c(
        \e_tx[1][2][5] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[6].north_rx  ( .i(\s_tx[1][1][6] ), .o(
        \n[1][2][6] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[6].west_rx  ( .i(\e_tx[0][2][6] ), .o(
        \w[1][2][6] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[6].south_tx  ( .i(\s[1][2][6] ), .c(
        \s_tx[1][2][6] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[6].east_tx  ( .i(\e[1][2][6] ), .c(
        \e_tx[1][2][6] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[7].north_rx  ( .i(\s_tx[1][1][7] ), .o(
        \n[1][2][7] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[7].west_rx  ( .i(\e_tx[0][2][7] ), .o(
        \w[1][2][7] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[7].south_tx  ( .i(\s[1][2][7] ), .c(
        \s_tx[1][2][7] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[7].east_tx  ( .i(\e[1][2][7] ), .c(
        \e_tx[1][2][7] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[8].north_rx  ( .i(\s_tx[1][1][8] ), .o(
        \n[1][2][8] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[8].west_rx  ( .i(\e_tx[0][2][8] ), .o(
        \w[1][2][8] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[8].south_tx  ( .i(\s[1][2][8] ), .c(
        \s_tx[1][2][8] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[8].east_tx  ( .i(\e[1][2][8] ), .c(
        \e_tx[1][2][8] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[9].north_rx  ( .i(\s_tx[1][1][9] ), .o(
        \n[1][2][9] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[9].west_rx  ( .i(\e_tx[0][2][9] ), .o(
        \w[1][2][9] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[9].south_tx  ( .i(\s[1][2][9] ), .c(
        \s_tx[1][2][9] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[9].east_tx  ( .i(\e[1][2][9] ), .c(
        \e_tx[1][2][9] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[10].north_rx  ( .i(\s_tx[1][1][10] ), .o(
        \n[1][2][10] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[10].west_rx  ( .i(\e_tx[0][2][10] ), .o(
        \w[1][2][10] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[10].south_tx  ( .i(\s[1][2][10] ), .c(
        \s_tx[1][2][10] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[10].east_tx  ( .i(\e[1][2][10] ), .c(
        \e_tx[1][2][10] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[11].north_rx  ( .i(\s_tx[1][1][11] ), .o(
        \n[1][2][11] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[11].west_rx  ( .i(\e_tx[0][2][11] ), .o(
        \w[1][2][11] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[11].south_tx  ( .i(\s[1][2][11] ), .c(
        \s_tx[1][2][11] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[11].east_tx  ( .i(\e[1][2][11] ), .c(
        \e_tx[1][2][11] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[12].north_rx  ( .i(\s_tx[1][1][12] ), .o(
        \n[1][2][12] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[12].west_rx  ( .i(\e_tx[0][2][12] ), .o(
        \w[1][2][12] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[12].south_tx  ( .i(\s[1][2][12] ), .c(
        \s_tx[1][2][12] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[12].east_tx  ( .i(\e[1][2][12] ), .c(
        \e_tx[1][2][12] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[13].north_rx  ( .i(\s_tx[1][1][13] ), .o(
        \n[1][2][13] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[13].west_rx  ( .i(\e_tx[0][2][13] ), .o(
        \w[1][2][13] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[13].south_tx  ( .i(\s[1][2][13] ), .c(
        \s_tx[1][2][13] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[13].east_tx  ( .i(\e[1][2][13] ), .c(
        \e_tx[1][2][13] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[14].north_rx  ( .i(\s_tx[1][1][14] ), .o(
        \n[1][2][14] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[14].west_rx  ( .i(\e_tx[0][2][14] ), .o(
        \w[1][2][14] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[14].south_tx  ( .i(\s[1][2][14] ), .c(
        \s_tx[1][2][14] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[14].east_tx  ( .i(\e[1][2][14] ), .c(
        \e_tx[1][2][14] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[15].north_rx  ( .i(\s_tx[1][1][15] ), .o(
        \n[1][2][15] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[15].west_rx  ( .i(\e_tx[0][2][15] ), .o(
        \w[1][2][15] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[15].south_tx  ( .i(\s[1][2][15] ), .c(
        \s_tx[1][2][15] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[15].east_tx  ( .i(\e[1][2][15] ), .c(
        \e_tx[1][2][15] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[16].north_rx  ( .i(\s_tx[1][1][16] ), .o(
        \n[1][2][16] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[16].west_rx  ( .i(\e_tx[0][2][16] ), .o(
        \w[1][2][16] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[16].south_tx  ( .i(\s[1][2][16] ), .c(
        \s_tx[1][2][16] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[16].east_tx  ( .i(\e[1][2][16] ), .c(
        \e_tx[1][2][16] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[17].north_rx  ( .i(\s_tx[1][1][17] ), .o(
        \n[1][2][17] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[17].west_rx  ( .i(\e_tx[0][2][17] ), .o(
        \w[1][2][17] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[17].south_tx  ( .i(\s[1][2][17] ), .c(
        \s_tx[1][2][17] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[17].east_tx  ( .i(\e[1][2][17] ), .c(
        \e_tx[1][2][17] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[18].north_rx  ( .i(\s_tx[1][1][18] ), .o(
        \n[1][2][18] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[18].west_rx  ( .i(\e_tx[0][2][18] ), .o(
        \w[1][2][18] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[18].south_tx  ( .i(\s[1][2][18] ), .c(
        \s_tx[1][2][18] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[18].east_tx  ( .i(\e[1][2][18] ), .c(
        \e_tx[1][2][18] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[19].north_rx  ( .i(\s_tx[1][1][19] ), .o(
        \n[1][2][19] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[19].west_rx  ( .i(\e_tx[0][2][19] ), .o(
        \w[1][2][19] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[19].south_tx  ( .i(\s[1][2][19] ), .c(
        \s_tx[1][2][19] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[19].east_tx  ( .i(\e[1][2][19] ), .c(
        \e_tx[1][2][19] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[20].north_rx  ( .i(\s_tx[1][1][20] ), .o(
        \n[1][2][20] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[20].west_rx  ( .i(\e_tx[0][2][20] ), .o(
        \w[1][2][20] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[20].south_tx  ( .i(\s[1][2][20] ), .c(
        \s_tx[1][2][20] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[20].east_tx  ( .i(\e[1][2][20] ), .c(
        \e_tx[1][2][20] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[21].north_rx  ( .i(\s_tx[1][1][21] ), .o(
        \n[1][2][21] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[21].west_rx  ( .i(\e_tx[0][2][21] ), .o(
        \w[1][2][21] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[21].south_tx  ( .i(\s[1][2][21] ), .c(
        \s_tx[1][2][21] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[21].east_tx  ( .i(\e[1][2][21] ), .c(
        \e_tx[1][2][21] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[22].north_rx  ( .i(\s_tx[1][1][22] ), .o(
        \n[1][2][22] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[22].west_rx  ( .i(\e_tx[0][2][22] ), .o(
        \w[1][2][22] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[22].south_tx  ( .i(\s[1][2][22] ), .c(
        \s_tx[1][2][22] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[22].east_tx  ( .i(\e[1][2][22] ), .c(
        \e_tx[1][2][22] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[23].north_rx  ( .i(\s_tx[1][1][23] ), .o(
        \n[1][2][23] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[23].west_rx  ( .i(\e_tx[0][2][23] ), .o(
        \w[1][2][23] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[23].south_tx  ( .i(\s[1][2][23] ), .c(
        \s_tx[1][2][23] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[23].east_tx  ( .i(\e[1][2][23] ), .c(
        \e_tx[1][2][23] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[24].north_rx  ( .i(\s_tx[1][1][24] ), .o(
        \n[1][2][24] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[24].west_rx  ( .i(\e_tx[0][2][24] ), .o(
        \w[1][2][24] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[24].south_tx  ( .i(\s[1][2][24] ), .c(
        \s_tx[1][2][24] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[24].east_tx  ( .i(\e[1][2][24] ), .c(
        \e_tx[1][2][24] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[25].north_rx  ( .i(\s_tx[1][1][25] ), .o(
        \n[1][2][25] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[25].west_rx  ( .i(\e_tx[0][2][25] ), .o(
        \w[1][2][25] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[25].south_tx  ( .i(\s[1][2][25] ), .c(
        \s_tx[1][2][25] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[25].east_tx  ( .i(\e[1][2][25] ), .c(
        \e_tx[1][2][25] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[26].north_rx  ( .i(\s_tx[1][1][26] ), .o(
        \n[1][2][26] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[26].west_rx  ( .i(\e_tx[0][2][26] ), .o(
        \w[1][2][26] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[26].south_tx  ( .i(\s[1][2][26] ), .c(
        \s_tx[1][2][26] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[26].east_tx  ( .i(\e[1][2][26] ), .c(
        \e_tx[1][2][26] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[27].north_rx  ( .i(\s_tx[1][1][27] ), .o(
        \n[1][2][27] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[27].west_rx  ( .i(\e_tx[0][2][27] ), .o(
        \w[1][2][27] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[27].south_tx  ( .i(\s[1][2][27] ), .c(
        \s_tx[1][2][27] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[27].east_tx  ( .i(\e[1][2][27] ), .c(
        \e_tx[1][2][27] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[28].north_rx  ( .i(\s_tx[1][1][28] ), .o(
        \n[1][2][28] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[28].west_rx  ( .i(\e_tx[0][2][28] ), .o(
        \w[1][2][28] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[28].south_tx  ( .i(\s[1][2][28] ), .c(
        \s_tx[1][2][28] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[28].east_tx  ( .i(\e[1][2][28] ), .c(
        \e_tx[1][2][28] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[29].north_rx  ( .i(\s_tx[1][1][29] ), .o(
        \n[1][2][29] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[29].west_rx  ( .i(\e_tx[0][2][29] ), .o(
        \w[1][2][29] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[29].south_tx  ( .i(\s[1][2][29] ), .c(
        \s_tx[1][2][29] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[29].east_tx  ( .i(\e[1][2][29] ), .c(
        \e_tx[1][2][29] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[30].north_rx  ( .i(\s_tx[1][1][30] ), .o(
        \n[1][2][30] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[30].west_rx  ( .i(\e_tx[0][2][30] ), .o(
        \w[1][2][30] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[30].south_tx  ( .i(\s[1][2][30] ), .c(
        \s_tx[1][2][30] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[30].east_tx  ( .i(\e[1][2][30] ), .c(
        \e_tx[1][2][30] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[31].north_rx  ( .i(\s_tx[1][1][31] ), .o(
        \n[1][2][31] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[31].west_rx  ( .i(\e_tx[0][2][31] ), .o(
        \w[1][2][31] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[31].south_tx  ( .i(\s[1][2][31] ), .c(
        \s_tx[1][2][31] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[31].east_tx  ( .i(\e[1][2][31] ), .c(
        \e_tx[1][2][31] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[32].north_rx  ( .i(\s_tx[1][1][32] ), .o(
        \n[1][2][32] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[32].west_rx  ( .i(\e_tx[0][2][32] ), .o(
        \w[1][2][32] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[32].south_tx  ( .i(\s[1][2][32] ), .c(
        \s_tx[1][2][32] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[32].east_tx  ( .i(\e[1][2][32] ), .c(
        \e_tx[1][2][32] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[33].north_rx  ( .i(\s_tx[1][1][33] ), .o(
        \n[1][2][33] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[33].west_rx  ( .i(\e_tx[0][2][33] ), .o(
        \w[1][2][33] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[33].south_tx  ( .i(\s[1][2][33] ), .c(
        \s_tx[1][2][33] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[33].east_tx  ( .i(\e[1][2][33] ), .c(
        \e_tx[1][2][33] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[34].north_rx  ( .i(\s_tx[1][1][34] ), .o(
        \n[1][2][34] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[34].west_rx  ( .i(\e_tx[0][2][34] ), .o(
        \w[1][2][34] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[34].south_tx  ( .i(\s[1][2][34] ), .c(
        \s_tx[1][2][34] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[34].east_tx  ( .i(\e[1][2][34] ), .c(
        \e_tx[1][2][34] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[35].north_rx  ( .i(\s_tx[1][1][35] ), .o(
        \n[1][2][35] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[35].west_rx  ( .i(\e_tx[0][2][35] ), .o(
        \w[1][2][35] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[35].south_tx  ( .i(\s[1][2][35] ), .c(
        \s_tx[1][2][35] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[35].east_tx  ( .i(\e[1][2][35] ), .c(
        \e_tx[1][2][35] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[36].north_rx  ( .i(\s_tx[1][1][36] ), .o(
        \n[1][2][36] ) );
  low_swing_rx \ys[2].xs[1].msg_txrx[36].west_rx  ( .i(\e_tx[0][2][36] ), .o(
        \w[1][2][36] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[36].south_tx  ( .i(\s[1][2][36] ), .c(
        \s_tx[1][2][36] ) );
  low_swing_tx \ys[2].xs[1].msg_txrx[36].east_tx  ( .i(\e[1][2][36] ), .c(
        \e_tx[1][2][36] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[0].north_rx  ( .i(\s_tx[2][1][0] ), .o(
        \n[2][2][0] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[0].west_rx  ( .i(\e_tx[1][2][0] ), .o(
        \w[2][2][0] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[0].south_tx  ( .i(\s[2][2][0] ), .c(
        \s_tx[2][2][0] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[0].east_tx  ( .i(\e[2][2][0] ), .c(
        \e_tx[2][2][0] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[1].north_rx  ( .i(\s_tx[2][1][1] ), .o(
        \n[2][2][1] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[1].west_rx  ( .i(\e_tx[1][2][1] ), .o(
        \w[2][2][1] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[1].south_tx  ( .i(\s[2][2][1] ), .c(
        \s_tx[2][2][1] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[1].east_tx  ( .i(\e[2][2][1] ), .c(
        \e_tx[2][2][1] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[2].north_rx  ( .i(\s_tx[2][1][2] ), .o(
        \n[2][2][2] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[2].west_rx  ( .i(\e_tx[1][2][2] ), .o(
        \w[2][2][2] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[2].south_tx  ( .i(\s[2][2][2] ), .c(
        \s_tx[2][2][2] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[2].east_tx  ( .i(\e[2][2][2] ), .c(
        \e_tx[2][2][2] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[3].north_rx  ( .i(\s_tx[2][1][3] ), .o(
        \n[2][2][3] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[3].west_rx  ( .i(\e_tx[1][2][3] ), .o(
        \w[2][2][3] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[3].south_tx  ( .i(\s[2][2][3] ), .c(
        \s_tx[2][2][3] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[3].east_tx  ( .i(\e[2][2][3] ), .c(
        \e_tx[2][2][3] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[4].north_rx  ( .i(\s_tx[2][1][4] ), .o(
        \n[2][2][4] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[4].west_rx  ( .i(\e_tx[1][2][4] ), .o(
        \w[2][2][4] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[4].south_tx  ( .i(\s[2][2][4] ), .c(
        \s_tx[2][2][4] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[4].east_tx  ( .i(\e[2][2][4] ), .c(
        \e_tx[2][2][4] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[5].north_rx  ( .i(\s_tx[2][1][5] ), .o(
        \n[2][2][5] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[5].west_rx  ( .i(\e_tx[1][2][5] ), .o(
        \w[2][2][5] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[5].south_tx  ( .i(\s[2][2][5] ), .c(
        \s_tx[2][2][5] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[5].east_tx  ( .i(\e[2][2][5] ), .c(
        \e_tx[2][2][5] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[6].north_rx  ( .i(\s_tx[2][1][6] ), .o(
        \n[2][2][6] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[6].west_rx  ( .i(\e_tx[1][2][6] ), .o(
        \w[2][2][6] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[6].south_tx  ( .i(\s[2][2][6] ), .c(
        \s_tx[2][2][6] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[6].east_tx  ( .i(\e[2][2][6] ), .c(
        \e_tx[2][2][6] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[7].north_rx  ( .i(\s_tx[2][1][7] ), .o(
        \n[2][2][7] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[7].west_rx  ( .i(\e_tx[1][2][7] ), .o(
        \w[2][2][7] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[7].south_tx  ( .i(\s[2][2][7] ), .c(
        \s_tx[2][2][7] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[7].east_tx  ( .i(\e[2][2][7] ), .c(
        \e_tx[2][2][7] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[8].north_rx  ( .i(\s_tx[2][1][8] ), .o(
        \n[2][2][8] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[8].west_rx  ( .i(\e_tx[1][2][8] ), .o(
        \w[2][2][8] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[8].south_tx  ( .i(\s[2][2][8] ), .c(
        \s_tx[2][2][8] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[8].east_tx  ( .i(\e[2][2][8] ), .c(
        \e_tx[2][2][8] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[9].north_rx  ( .i(\s_tx[2][1][9] ), .o(
        \n[2][2][9] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[9].west_rx  ( .i(\e_tx[1][2][9] ), .o(
        \w[2][2][9] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[9].south_tx  ( .i(\s[2][2][9] ), .c(
        \s_tx[2][2][9] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[9].east_tx  ( .i(\e[2][2][9] ), .c(
        \e_tx[2][2][9] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[10].north_rx  ( .i(\s_tx[2][1][10] ), .o(
        \n[2][2][10] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[10].west_rx  ( .i(\e_tx[1][2][10] ), .o(
        \w[2][2][10] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[10].south_tx  ( .i(\s[2][2][10] ), .c(
        \s_tx[2][2][10] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[10].east_tx  ( .i(\e[2][2][10] ), .c(
        \e_tx[2][2][10] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[11].north_rx  ( .i(\s_tx[2][1][11] ), .o(
        \n[2][2][11] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[11].west_rx  ( .i(\e_tx[1][2][11] ), .o(
        \w[2][2][11] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[11].south_tx  ( .i(\s[2][2][11] ), .c(
        \s_tx[2][2][11] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[11].east_tx  ( .i(\e[2][2][11] ), .c(
        \e_tx[2][2][11] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[12].north_rx  ( .i(\s_tx[2][1][12] ), .o(
        \n[2][2][12] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[12].west_rx  ( .i(\e_tx[1][2][12] ), .o(
        \w[2][2][12] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[12].south_tx  ( .i(\s[2][2][12] ), .c(
        \s_tx[2][2][12] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[12].east_tx  ( .i(\e[2][2][12] ), .c(
        \e_tx[2][2][12] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[13].north_rx  ( .i(\s_tx[2][1][13] ), .o(
        \n[2][2][13] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[13].west_rx  ( .i(\e_tx[1][2][13] ), .o(
        \w[2][2][13] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[13].south_tx  ( .i(\s[2][2][13] ), .c(
        \s_tx[2][2][13] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[13].east_tx  ( .i(\e[2][2][13] ), .c(
        \e_tx[2][2][13] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[14].north_rx  ( .i(\s_tx[2][1][14] ), .o(
        \n[2][2][14] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[14].west_rx  ( .i(\e_tx[1][2][14] ), .o(
        \w[2][2][14] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[14].south_tx  ( .i(\s[2][2][14] ), .c(
        \s_tx[2][2][14] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[14].east_tx  ( .i(\e[2][2][14] ), .c(
        \e_tx[2][2][14] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[15].north_rx  ( .i(\s_tx[2][1][15] ), .o(
        \n[2][2][15] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[15].west_rx  ( .i(\e_tx[1][2][15] ), .o(
        \w[2][2][15] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[15].south_tx  ( .i(\s[2][2][15] ), .c(
        \s_tx[2][2][15] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[15].east_tx  ( .i(\e[2][2][15] ), .c(
        \e_tx[2][2][15] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[16].north_rx  ( .i(\s_tx[2][1][16] ), .o(
        \n[2][2][16] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[16].west_rx  ( .i(\e_tx[1][2][16] ), .o(
        \w[2][2][16] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[16].south_tx  ( .i(\s[2][2][16] ), .c(
        \s_tx[2][2][16] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[16].east_tx  ( .i(\e[2][2][16] ), .c(
        \e_tx[2][2][16] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[17].north_rx  ( .i(\s_tx[2][1][17] ), .o(
        \n[2][2][17] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[17].west_rx  ( .i(\e_tx[1][2][17] ), .o(
        \w[2][2][17] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[17].south_tx  ( .i(\s[2][2][17] ), .c(
        \s_tx[2][2][17] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[17].east_tx  ( .i(\e[2][2][17] ), .c(
        \e_tx[2][2][17] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[18].north_rx  ( .i(\s_tx[2][1][18] ), .o(
        \n[2][2][18] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[18].west_rx  ( .i(\e_tx[1][2][18] ), .o(
        \w[2][2][18] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[18].south_tx  ( .i(\s[2][2][18] ), .c(
        \s_tx[2][2][18] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[18].east_tx  ( .i(\e[2][2][18] ), .c(
        \e_tx[2][2][18] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[19].north_rx  ( .i(\s_tx[2][1][19] ), .o(
        \n[2][2][19] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[19].west_rx  ( .i(\e_tx[1][2][19] ), .o(
        \w[2][2][19] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[19].south_tx  ( .i(\s[2][2][19] ), .c(
        \s_tx[2][2][19] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[19].east_tx  ( .i(\e[2][2][19] ), .c(
        \e_tx[2][2][19] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[20].north_rx  ( .i(\s_tx[2][1][20] ), .o(
        \n[2][2][20] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[20].west_rx  ( .i(\e_tx[1][2][20] ), .o(
        \w[2][2][20] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[20].south_tx  ( .i(\s[2][2][20] ), .c(
        \s_tx[2][2][20] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[20].east_tx  ( .i(\e[2][2][20] ), .c(
        \e_tx[2][2][20] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[21].north_rx  ( .i(\s_tx[2][1][21] ), .o(
        \n[2][2][21] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[21].west_rx  ( .i(\e_tx[1][2][21] ), .o(
        \w[2][2][21] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[21].south_tx  ( .i(\s[2][2][21] ), .c(
        \s_tx[2][2][21] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[21].east_tx  ( .i(\e[2][2][21] ), .c(
        \e_tx[2][2][21] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[22].north_rx  ( .i(\s_tx[2][1][22] ), .o(
        \n[2][2][22] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[22].west_rx  ( .i(\e_tx[1][2][22] ), .o(
        \w[2][2][22] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[22].south_tx  ( .i(\s[2][2][22] ), .c(
        \s_tx[2][2][22] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[22].east_tx  ( .i(\e[2][2][22] ), .c(
        \e_tx[2][2][22] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[23].north_rx  ( .i(\s_tx[2][1][23] ), .o(
        \n[2][2][23] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[23].west_rx  ( .i(\e_tx[1][2][23] ), .o(
        \w[2][2][23] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[23].south_tx  ( .i(\s[2][2][23] ), .c(
        \s_tx[2][2][23] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[23].east_tx  ( .i(\e[2][2][23] ), .c(
        \e_tx[2][2][23] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[24].north_rx  ( .i(\s_tx[2][1][24] ), .o(
        \n[2][2][24] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[24].west_rx  ( .i(\e_tx[1][2][24] ), .o(
        \w[2][2][24] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[24].south_tx  ( .i(\s[2][2][24] ), .c(
        \s_tx[2][2][24] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[24].east_tx  ( .i(\e[2][2][24] ), .c(
        \e_tx[2][2][24] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[25].north_rx  ( .i(\s_tx[2][1][25] ), .o(
        \n[2][2][25] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[25].west_rx  ( .i(\e_tx[1][2][25] ), .o(
        \w[2][2][25] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[25].south_tx  ( .i(\s[2][2][25] ), .c(
        \s_tx[2][2][25] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[25].east_tx  ( .i(\e[2][2][25] ), .c(
        \e_tx[2][2][25] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[26].north_rx  ( .i(\s_tx[2][1][26] ), .o(
        \n[2][2][26] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[26].west_rx  ( .i(\e_tx[1][2][26] ), .o(
        \w[2][2][26] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[26].south_tx  ( .i(\s[2][2][26] ), .c(
        \s_tx[2][2][26] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[26].east_tx  ( .i(\e[2][2][26] ), .c(
        \e_tx[2][2][26] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[27].north_rx  ( .i(\s_tx[2][1][27] ), .o(
        \n[2][2][27] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[27].west_rx  ( .i(\e_tx[1][2][27] ), .o(
        \w[2][2][27] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[27].south_tx  ( .i(\s[2][2][27] ), .c(
        \s_tx[2][2][27] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[27].east_tx  ( .i(\e[2][2][27] ), .c(
        \e_tx[2][2][27] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[28].north_rx  ( .i(\s_tx[2][1][28] ), .o(
        \n[2][2][28] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[28].west_rx  ( .i(\e_tx[1][2][28] ), .o(
        \w[2][2][28] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[28].south_tx  ( .i(\s[2][2][28] ), .c(
        \s_tx[2][2][28] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[28].east_tx  ( .i(\e[2][2][28] ), .c(
        \e_tx[2][2][28] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[29].north_rx  ( .i(\s_tx[2][1][29] ), .o(
        \n[2][2][29] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[29].west_rx  ( .i(\e_tx[1][2][29] ), .o(
        \w[2][2][29] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[29].south_tx  ( .i(\s[2][2][29] ), .c(
        \s_tx[2][2][29] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[29].east_tx  ( .i(\e[2][2][29] ), .c(
        \e_tx[2][2][29] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[30].north_rx  ( .i(\s_tx[2][1][30] ), .o(
        \n[2][2][30] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[30].west_rx  ( .i(\e_tx[1][2][30] ), .o(
        \w[2][2][30] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[30].south_tx  ( .i(\s[2][2][30] ), .c(
        \s_tx[2][2][30] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[30].east_tx  ( .i(\e[2][2][30] ), .c(
        \e_tx[2][2][30] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[31].north_rx  ( .i(\s_tx[2][1][31] ), .o(
        \n[2][2][31] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[31].west_rx  ( .i(\e_tx[1][2][31] ), .o(
        \w[2][2][31] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[31].south_tx  ( .i(\s[2][2][31] ), .c(
        \s_tx[2][2][31] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[31].east_tx  ( .i(\e[2][2][31] ), .c(
        \e_tx[2][2][31] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[32].north_rx  ( .i(\s_tx[2][1][32] ), .o(
        \n[2][2][32] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[32].west_rx  ( .i(\e_tx[1][2][32] ), .o(
        \w[2][2][32] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[32].south_tx  ( .i(\s[2][2][32] ), .c(
        \s_tx[2][2][32] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[32].east_tx  ( .i(\e[2][2][32] ), .c(
        \e_tx[2][2][32] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[33].north_rx  ( .i(\s_tx[2][1][33] ), .o(
        \n[2][2][33] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[33].west_rx  ( .i(\e_tx[1][2][33] ), .o(
        \w[2][2][33] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[33].south_tx  ( .i(\s[2][2][33] ), .c(
        \s_tx[2][2][33] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[33].east_tx  ( .i(\e[2][2][33] ), .c(
        \e_tx[2][2][33] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[34].north_rx  ( .i(\s_tx[2][1][34] ), .o(
        \n[2][2][34] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[34].west_rx  ( .i(\e_tx[1][2][34] ), .o(
        \w[2][2][34] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[34].south_tx  ( .i(\s[2][2][34] ), .c(
        \s_tx[2][2][34] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[34].east_tx  ( .i(\e[2][2][34] ), .c(
        \e_tx[2][2][34] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[35].north_rx  ( .i(\s_tx[2][1][35] ), .o(
        \n[2][2][35] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[35].west_rx  ( .i(\e_tx[1][2][35] ), .o(
        \w[2][2][35] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[35].south_tx  ( .i(\s[2][2][35] ), .c(
        \s_tx[2][2][35] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[35].east_tx  ( .i(\e[2][2][35] ), .c(
        \e_tx[2][2][35] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[36].north_rx  ( .i(\s_tx[2][1][36] ), .o(
        \n[2][2][36] ) );
  low_swing_rx \ys[2].xs[2].msg_txrx[36].west_rx  ( .i(\e_tx[1][2][36] ), .o(
        \w[2][2][36] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[36].south_tx  ( .i(\s[2][2][36] ), .c(
        \s_tx[2][2][36] ) );
  low_swing_tx \ys[2].xs[2].msg_txrx[36].east_tx  ( .i(\e[2][2][36] ), .c(
        \e_tx[2][2][36] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[0].north_rx  ( .i(\s_tx[3][1][0] ), .o(
        \n[3][2][0] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[0].west_rx  ( .i(\e_tx[2][2][0] ), .o(
        \w[3][2][0] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[0].south_tx  ( .i(\s[3][2][0] ), .c(
        \s_tx[3][2][0] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[0].east_tx  ( .i(\e[3][2][0] ), .c(
        \e_tx[3][2][0] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[1].north_rx  ( .i(\s_tx[3][1][1] ), .o(
        \n[3][2][1] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[1].west_rx  ( .i(\e_tx[2][2][1] ), .o(
        \w[3][2][1] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[1].south_tx  ( .i(\s[3][2][1] ), .c(
        \s_tx[3][2][1] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[1].east_tx  ( .i(\e[3][2][1] ), .c(
        \e_tx[3][2][1] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[2].north_rx  ( .i(\s_tx[3][1][2] ), .o(
        \n[3][2][2] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[2].west_rx  ( .i(\e_tx[2][2][2] ), .o(
        \w[3][2][2] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[2].south_tx  ( .i(\s[3][2][2] ), .c(
        \s_tx[3][2][2] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[2].east_tx  ( .i(\e[3][2][2] ), .c(
        \e_tx[3][2][2] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[3].north_rx  ( .i(\s_tx[3][1][3] ), .o(
        \n[3][2][3] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[3].west_rx  ( .i(\e_tx[2][2][3] ), .o(
        \w[3][2][3] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[3].south_tx  ( .i(\s[3][2][3] ), .c(
        \s_tx[3][2][3] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[3].east_tx  ( .i(\e[3][2][3] ), .c(
        \e_tx[3][2][3] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[4].north_rx  ( .i(\s_tx[3][1][4] ), .o(
        \n[3][2][4] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[4].west_rx  ( .i(\e_tx[2][2][4] ), .o(
        \w[3][2][4] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[4].south_tx  ( .i(\s[3][2][4] ), .c(
        \s_tx[3][2][4] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[4].east_tx  ( .i(\e[3][2][4] ), .c(
        \e_tx[3][2][4] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[5].north_rx  ( .i(\s_tx[3][1][5] ), .o(
        \n[3][2][5] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[5].west_rx  ( .i(\e_tx[2][2][5] ), .o(
        \w[3][2][5] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[5].south_tx  ( .i(\s[3][2][5] ), .c(
        \s_tx[3][2][5] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[5].east_tx  ( .i(\e[3][2][5] ), .c(
        \e_tx[3][2][5] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[6].north_rx  ( .i(\s_tx[3][1][6] ), .o(
        \n[3][2][6] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[6].west_rx  ( .i(\e_tx[2][2][6] ), .o(
        \w[3][2][6] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[6].south_tx  ( .i(\s[3][2][6] ), .c(
        \s_tx[3][2][6] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[6].east_tx  ( .i(\e[3][2][6] ), .c(
        \e_tx[3][2][6] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[7].north_rx  ( .i(\s_tx[3][1][7] ), .o(
        \n[3][2][7] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[7].west_rx  ( .i(\e_tx[2][2][7] ), .o(
        \w[3][2][7] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[7].south_tx  ( .i(\s[3][2][7] ), .c(
        \s_tx[3][2][7] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[7].east_tx  ( .i(\e[3][2][7] ), .c(
        \e_tx[3][2][7] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[8].north_rx  ( .i(\s_tx[3][1][8] ), .o(
        \n[3][2][8] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[8].west_rx  ( .i(\e_tx[2][2][8] ), .o(
        \w[3][2][8] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[8].south_tx  ( .i(\s[3][2][8] ), .c(
        \s_tx[3][2][8] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[8].east_tx  ( .i(\e[3][2][8] ), .c(
        \e_tx[3][2][8] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[9].north_rx  ( .i(\s_tx[3][1][9] ), .o(
        \n[3][2][9] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[9].west_rx  ( .i(\e_tx[2][2][9] ), .o(
        \w[3][2][9] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[9].south_tx  ( .i(\s[3][2][9] ), .c(
        \s_tx[3][2][9] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[9].east_tx  ( .i(\e[3][2][9] ), .c(
        \e_tx[3][2][9] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[10].north_rx  ( .i(\s_tx[3][1][10] ), .o(
        \n[3][2][10] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[10].west_rx  ( .i(\e_tx[2][2][10] ), .o(
        \w[3][2][10] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[10].south_tx  ( .i(\s[3][2][10] ), .c(
        \s_tx[3][2][10] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[10].east_tx  ( .i(\e[3][2][10] ), .c(
        \e_tx[3][2][10] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[11].north_rx  ( .i(\s_tx[3][1][11] ), .o(
        \n[3][2][11] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[11].west_rx  ( .i(\e_tx[2][2][11] ), .o(
        \w[3][2][11] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[11].south_tx  ( .i(\s[3][2][11] ), .c(
        \s_tx[3][2][11] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[11].east_tx  ( .i(\e[3][2][11] ), .c(
        \e_tx[3][2][11] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[12].north_rx  ( .i(\s_tx[3][1][12] ), .o(
        \n[3][2][12] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[12].west_rx  ( .i(\e_tx[2][2][12] ), .o(
        \w[3][2][12] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[12].south_tx  ( .i(\s[3][2][12] ), .c(
        \s_tx[3][2][12] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[12].east_tx  ( .i(\e[3][2][12] ), .c(
        \e_tx[3][2][12] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[13].north_rx  ( .i(\s_tx[3][1][13] ), .o(
        \n[3][2][13] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[13].west_rx  ( .i(\e_tx[2][2][13] ), .o(
        \w[3][2][13] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[13].south_tx  ( .i(\s[3][2][13] ), .c(
        \s_tx[3][2][13] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[13].east_tx  ( .i(\e[3][2][13] ), .c(
        \e_tx[3][2][13] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[14].north_rx  ( .i(\s_tx[3][1][14] ), .o(
        \n[3][2][14] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[14].west_rx  ( .i(\e_tx[2][2][14] ), .o(
        \w[3][2][14] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[14].south_tx  ( .i(\s[3][2][14] ), .c(
        \s_tx[3][2][14] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[14].east_tx  ( .i(\e[3][2][14] ), .c(
        \e_tx[3][2][14] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[15].north_rx  ( .i(\s_tx[3][1][15] ), .o(
        \n[3][2][15] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[15].west_rx  ( .i(\e_tx[2][2][15] ), .o(
        \w[3][2][15] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[15].south_tx  ( .i(\s[3][2][15] ), .c(
        \s_tx[3][2][15] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[15].east_tx  ( .i(\e[3][2][15] ), .c(
        \e_tx[3][2][15] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[16].north_rx  ( .i(\s_tx[3][1][16] ), .o(
        \n[3][2][16] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[16].west_rx  ( .i(\e_tx[2][2][16] ), .o(
        \w[3][2][16] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[16].south_tx  ( .i(\s[3][2][16] ), .c(
        \s_tx[3][2][16] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[16].east_tx  ( .i(\e[3][2][16] ), .c(
        \e_tx[3][2][16] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[17].north_rx  ( .i(\s_tx[3][1][17] ), .o(
        \n[3][2][17] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[17].west_rx  ( .i(\e_tx[2][2][17] ), .o(
        \w[3][2][17] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[17].south_tx  ( .i(\s[3][2][17] ), .c(
        \s_tx[3][2][17] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[17].east_tx  ( .i(\e[3][2][17] ), .c(
        \e_tx[3][2][17] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[18].north_rx  ( .i(\s_tx[3][1][18] ), .o(
        \n[3][2][18] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[18].west_rx  ( .i(\e_tx[2][2][18] ), .o(
        \w[3][2][18] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[18].south_tx  ( .i(\s[3][2][18] ), .c(
        \s_tx[3][2][18] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[18].east_tx  ( .i(\e[3][2][18] ), .c(
        \e_tx[3][2][18] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[19].north_rx  ( .i(\s_tx[3][1][19] ), .o(
        \n[3][2][19] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[19].west_rx  ( .i(\e_tx[2][2][19] ), .o(
        \w[3][2][19] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[19].south_tx  ( .i(\s[3][2][19] ), .c(
        \s_tx[3][2][19] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[19].east_tx  ( .i(\e[3][2][19] ), .c(
        \e_tx[3][2][19] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[20].north_rx  ( .i(\s_tx[3][1][20] ), .o(
        \n[3][2][20] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[20].west_rx  ( .i(\e_tx[2][2][20] ), .o(
        \w[3][2][20] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[20].south_tx  ( .i(\s[3][2][20] ), .c(
        \s_tx[3][2][20] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[20].east_tx  ( .i(\e[3][2][20] ), .c(
        \e_tx[3][2][20] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[21].north_rx  ( .i(\s_tx[3][1][21] ), .o(
        \n[3][2][21] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[21].west_rx  ( .i(\e_tx[2][2][21] ), .o(
        \w[3][2][21] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[21].south_tx  ( .i(\s[3][2][21] ), .c(
        \s_tx[3][2][21] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[21].east_tx  ( .i(\e[3][2][21] ), .c(
        \e_tx[3][2][21] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[22].north_rx  ( .i(\s_tx[3][1][22] ), .o(
        \n[3][2][22] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[22].west_rx  ( .i(\e_tx[2][2][22] ), .o(
        \w[3][2][22] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[22].south_tx  ( .i(\s[3][2][22] ), .c(
        \s_tx[3][2][22] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[22].east_tx  ( .i(\e[3][2][22] ), .c(
        \e_tx[3][2][22] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[23].north_rx  ( .i(\s_tx[3][1][23] ), .o(
        \n[3][2][23] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[23].west_rx  ( .i(\e_tx[2][2][23] ), .o(
        \w[3][2][23] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[23].south_tx  ( .i(\s[3][2][23] ), .c(
        \s_tx[3][2][23] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[23].east_tx  ( .i(\e[3][2][23] ), .c(
        \e_tx[3][2][23] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[24].north_rx  ( .i(\s_tx[3][1][24] ), .o(
        \n[3][2][24] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[24].west_rx  ( .i(\e_tx[2][2][24] ), .o(
        \w[3][2][24] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[24].south_tx  ( .i(\s[3][2][24] ), .c(
        \s_tx[3][2][24] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[24].east_tx  ( .i(\e[3][2][24] ), .c(
        \e_tx[3][2][24] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[25].north_rx  ( .i(\s_tx[3][1][25] ), .o(
        \n[3][2][25] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[25].west_rx  ( .i(\e_tx[2][2][25] ), .o(
        \w[3][2][25] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[25].south_tx  ( .i(\s[3][2][25] ), .c(
        \s_tx[3][2][25] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[25].east_tx  ( .i(\e[3][2][25] ), .c(
        \e_tx[3][2][25] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[26].north_rx  ( .i(\s_tx[3][1][26] ), .o(
        \n[3][2][26] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[26].west_rx  ( .i(\e_tx[2][2][26] ), .o(
        \w[3][2][26] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[26].south_tx  ( .i(\s[3][2][26] ), .c(
        \s_tx[3][2][26] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[26].east_tx  ( .i(\e[3][2][26] ), .c(
        \e_tx[3][2][26] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[27].north_rx  ( .i(\s_tx[3][1][27] ), .o(
        \n[3][2][27] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[27].west_rx  ( .i(\e_tx[2][2][27] ), .o(
        \w[3][2][27] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[27].south_tx  ( .i(\s[3][2][27] ), .c(
        \s_tx[3][2][27] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[27].east_tx  ( .i(\e[3][2][27] ), .c(
        \e_tx[3][2][27] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[28].north_rx  ( .i(\s_tx[3][1][28] ), .o(
        \n[3][2][28] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[28].west_rx  ( .i(\e_tx[2][2][28] ), .o(
        \w[3][2][28] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[28].south_tx  ( .i(\s[3][2][28] ), .c(
        \s_tx[3][2][28] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[28].east_tx  ( .i(\e[3][2][28] ), .c(
        \e_tx[3][2][28] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[29].north_rx  ( .i(\s_tx[3][1][29] ), .o(
        \n[3][2][29] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[29].west_rx  ( .i(\e_tx[2][2][29] ), .o(
        \w[3][2][29] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[29].south_tx  ( .i(\s[3][2][29] ), .c(
        \s_tx[3][2][29] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[29].east_tx  ( .i(\e[3][2][29] ), .c(
        \e_tx[3][2][29] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[30].north_rx  ( .i(\s_tx[3][1][30] ), .o(
        \n[3][2][30] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[30].west_rx  ( .i(\e_tx[2][2][30] ), .o(
        \w[3][2][30] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[30].south_tx  ( .i(\s[3][2][30] ), .c(
        \s_tx[3][2][30] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[30].east_tx  ( .i(\e[3][2][30] ), .c(
        \e_tx[3][2][30] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[31].north_rx  ( .i(\s_tx[3][1][31] ), .o(
        \n[3][2][31] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[31].west_rx  ( .i(\e_tx[2][2][31] ), .o(
        \w[3][2][31] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[31].south_tx  ( .i(\s[3][2][31] ), .c(
        \s_tx[3][2][31] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[31].east_tx  ( .i(\e[3][2][31] ), .c(
        \e_tx[3][2][31] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[32].north_rx  ( .i(\s_tx[3][1][32] ), .o(
        \n[3][2][32] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[32].west_rx  ( .i(\e_tx[2][2][32] ), .o(
        \w[3][2][32] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[32].south_tx  ( .i(\s[3][2][32] ), .c(
        \s_tx[3][2][32] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[32].east_tx  ( .i(\e[3][2][32] ), .c(
        \e_tx[3][2][32] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[33].north_rx  ( .i(\s_tx[3][1][33] ), .o(
        \n[3][2][33] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[33].west_rx  ( .i(\e_tx[2][2][33] ), .o(
        \w[3][2][33] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[33].south_tx  ( .i(\s[3][2][33] ), .c(
        \s_tx[3][2][33] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[33].east_tx  ( .i(\e[3][2][33] ), .c(
        \e_tx[3][2][33] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[34].north_rx  ( .i(\s_tx[3][1][34] ), .o(
        \n[3][2][34] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[34].west_rx  ( .i(\e_tx[2][2][34] ), .o(
        \w[3][2][34] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[34].south_tx  ( .i(\s[3][2][34] ), .c(
        \s_tx[3][2][34] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[34].east_tx  ( .i(\e[3][2][34] ), .c(
        \e_tx[3][2][34] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[35].north_rx  ( .i(\s_tx[3][1][35] ), .o(
        \n[3][2][35] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[35].west_rx  ( .i(\e_tx[2][2][35] ), .o(
        \w[3][2][35] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[35].south_tx  ( .i(\s[3][2][35] ), .c(
        \s_tx[3][2][35] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[35].east_tx  ( .i(\e[3][2][35] ), .c(
        \e_tx[3][2][35] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[36].north_rx  ( .i(\s_tx[3][1][36] ), .o(
        \n[3][2][36] ) );
  low_swing_rx \ys[2].xs[3].msg_txrx[36].west_rx  ( .i(\e_tx[2][2][36] ), .o(
        \w[3][2][36] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[36].south_tx  ( .i(\s[3][2][36] ), .c(
        \s_tx[3][2][36] ) );
  low_swing_tx \ys[2].xs[3].msg_txrx[36].east_tx  ( .i(\e[3][2][36] ), .c(
        \e_tx[3][2][36] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[0].north_rx  ( .i(\s_tx[0][2][0] ), .o(
        \n[0][3][0] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[0].west_rx  ( .i(\e_tx[3][3][0] ), .o(
        \w[0][3][0] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[0].south_tx  ( .i(\s[0][3][0] ), .c(
        \s_tx[0][3][0] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[0].east_tx  ( .i(\e[0][3][0] ), .c(
        \e_tx[0][3][0] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[1].north_rx  ( .i(\s_tx[0][2][1] ), .o(
        \n[0][3][1] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[1].west_rx  ( .i(\e_tx[3][3][1] ), .o(
        \w[0][3][1] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[1].south_tx  ( .i(\s[0][3][1] ), .c(
        \s_tx[0][3][1] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[1].east_tx  ( .i(\e[0][3][1] ), .c(
        \e_tx[0][3][1] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[2].north_rx  ( .i(\s_tx[0][2][2] ), .o(
        \n[0][3][2] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[2].west_rx  ( .i(\e_tx[3][3][2] ), .o(
        \w[0][3][2] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[2].south_tx  ( .i(\s[0][3][2] ), .c(
        \s_tx[0][3][2] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[2].east_tx  ( .i(\e[0][3][2] ), .c(
        \e_tx[0][3][2] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[3].north_rx  ( .i(\s_tx[0][2][3] ), .o(
        \n[0][3][3] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[3].west_rx  ( .i(\e_tx[3][3][3] ), .o(
        \w[0][3][3] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[3].south_tx  ( .i(\s[0][3][3] ), .c(
        \s_tx[0][3][3] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[3].east_tx  ( .i(\e[0][3][3] ), .c(
        \e_tx[0][3][3] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[4].north_rx  ( .i(\s_tx[0][2][4] ), .o(
        \n[0][3][4] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[4].west_rx  ( .i(\e_tx[3][3][4] ), .o(
        \w[0][3][4] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[4].south_tx  ( .i(\s[0][3][4] ), .c(
        \s_tx[0][3][4] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[4].east_tx  ( .i(\e[0][3][4] ), .c(
        \e_tx[0][3][4] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[5].north_rx  ( .i(\s_tx[0][2][5] ), .o(
        \n[0][3][5] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[5].west_rx  ( .i(\e_tx[3][3][5] ), .o(
        \w[0][3][5] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[5].south_tx  ( .i(\s[0][3][5] ), .c(
        \s_tx[0][3][5] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[5].east_tx  ( .i(\e[0][3][5] ), .c(
        \e_tx[0][3][5] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[6].north_rx  ( .i(\s_tx[0][2][6] ), .o(
        \n[0][3][6] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[6].west_rx  ( .i(\e_tx[3][3][6] ), .o(
        \w[0][3][6] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[6].south_tx  ( .i(\s[0][3][6] ), .c(
        \s_tx[0][3][6] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[6].east_tx  ( .i(\e[0][3][6] ), .c(
        \e_tx[0][3][6] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[7].north_rx  ( .i(\s_tx[0][2][7] ), .o(
        \n[0][3][7] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[7].west_rx  ( .i(\e_tx[3][3][7] ), .o(
        \w[0][3][7] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[7].south_tx  ( .i(\s[0][3][7] ), .c(
        \s_tx[0][3][7] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[7].east_tx  ( .i(\e[0][3][7] ), .c(
        \e_tx[0][3][7] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[8].north_rx  ( .i(\s_tx[0][2][8] ), .o(
        \n[0][3][8] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[8].west_rx  ( .i(\e_tx[3][3][8] ), .o(
        \w[0][3][8] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[8].south_tx  ( .i(\s[0][3][8] ), .c(
        \s_tx[0][3][8] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[8].east_tx  ( .i(\e[0][3][8] ), .c(
        \e_tx[0][3][8] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[9].north_rx  ( .i(\s_tx[0][2][9] ), .o(
        \n[0][3][9] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[9].west_rx  ( .i(\e_tx[3][3][9] ), .o(
        \w[0][3][9] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[9].south_tx  ( .i(\s[0][3][9] ), .c(
        \s_tx[0][3][9] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[9].east_tx  ( .i(\e[0][3][9] ), .c(
        \e_tx[0][3][9] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[10].north_rx  ( .i(\s_tx[0][2][10] ), .o(
        \n[0][3][10] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[10].west_rx  ( .i(\e_tx[3][3][10] ), .o(
        \w[0][3][10] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[10].south_tx  ( .i(\s[0][3][10] ), .c(
        \s_tx[0][3][10] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[10].east_tx  ( .i(\e[0][3][10] ), .c(
        \e_tx[0][3][10] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[11].north_rx  ( .i(\s_tx[0][2][11] ), .o(
        \n[0][3][11] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[11].west_rx  ( .i(\e_tx[3][3][11] ), .o(
        \w[0][3][11] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[11].south_tx  ( .i(\s[0][3][11] ), .c(
        \s_tx[0][3][11] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[11].east_tx  ( .i(\e[0][3][11] ), .c(
        \e_tx[0][3][11] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[12].north_rx  ( .i(\s_tx[0][2][12] ), .o(
        \n[0][3][12] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[12].west_rx  ( .i(\e_tx[3][3][12] ), .o(
        \w[0][3][12] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[12].south_tx  ( .i(\s[0][3][12] ), .c(
        \s_tx[0][3][12] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[12].east_tx  ( .i(\e[0][3][12] ), .c(
        \e_tx[0][3][12] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[13].north_rx  ( .i(\s_tx[0][2][13] ), .o(
        \n[0][3][13] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[13].west_rx  ( .i(\e_tx[3][3][13] ), .o(
        \w[0][3][13] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[13].south_tx  ( .i(\s[0][3][13] ), .c(
        \s_tx[0][3][13] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[13].east_tx  ( .i(\e[0][3][13] ), .c(
        \e_tx[0][3][13] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[14].north_rx  ( .i(\s_tx[0][2][14] ), .o(
        \n[0][3][14] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[14].west_rx  ( .i(\e_tx[3][3][14] ), .o(
        \w[0][3][14] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[14].south_tx  ( .i(\s[0][3][14] ), .c(
        \s_tx[0][3][14] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[14].east_tx  ( .i(\e[0][3][14] ), .c(
        \e_tx[0][3][14] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[15].north_rx  ( .i(\s_tx[0][2][15] ), .o(
        \n[0][3][15] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[15].west_rx  ( .i(\e_tx[3][3][15] ), .o(
        \w[0][3][15] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[15].south_tx  ( .i(\s[0][3][15] ), .c(
        \s_tx[0][3][15] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[15].east_tx  ( .i(\e[0][3][15] ), .c(
        \e_tx[0][3][15] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[16].north_rx  ( .i(\s_tx[0][2][16] ), .o(
        \n[0][3][16] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[16].west_rx  ( .i(\e_tx[3][3][16] ), .o(
        \w[0][3][16] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[16].south_tx  ( .i(\s[0][3][16] ), .c(
        \s_tx[0][3][16] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[16].east_tx  ( .i(\e[0][3][16] ), .c(
        \e_tx[0][3][16] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[17].north_rx  ( .i(\s_tx[0][2][17] ), .o(
        \n[0][3][17] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[17].west_rx  ( .i(\e_tx[3][3][17] ), .o(
        \w[0][3][17] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[17].south_tx  ( .i(\s[0][3][17] ), .c(
        \s_tx[0][3][17] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[17].east_tx  ( .i(\e[0][3][17] ), .c(
        \e_tx[0][3][17] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[18].north_rx  ( .i(\s_tx[0][2][18] ), .o(
        \n[0][3][18] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[18].west_rx  ( .i(\e_tx[3][3][18] ), .o(
        \w[0][3][18] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[18].south_tx  ( .i(\s[0][3][18] ), .c(
        \s_tx[0][3][18] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[18].east_tx  ( .i(\e[0][3][18] ), .c(
        \e_tx[0][3][18] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[19].north_rx  ( .i(\s_tx[0][2][19] ), .o(
        \n[0][3][19] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[19].west_rx  ( .i(\e_tx[3][3][19] ), .o(
        \w[0][3][19] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[19].south_tx  ( .i(\s[0][3][19] ), .c(
        \s_tx[0][3][19] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[19].east_tx  ( .i(\e[0][3][19] ), .c(
        \e_tx[0][3][19] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[20].north_rx  ( .i(\s_tx[0][2][20] ), .o(
        \n[0][3][20] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[20].west_rx  ( .i(\e_tx[3][3][20] ), .o(
        \w[0][3][20] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[20].south_tx  ( .i(\s[0][3][20] ), .c(
        \s_tx[0][3][20] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[20].east_tx  ( .i(\e[0][3][20] ), .c(
        \e_tx[0][3][20] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[21].north_rx  ( .i(\s_tx[0][2][21] ), .o(
        \n[0][3][21] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[21].west_rx  ( .i(\e_tx[3][3][21] ), .o(
        \w[0][3][21] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[21].south_tx  ( .i(\s[0][3][21] ), .c(
        \s_tx[0][3][21] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[21].east_tx  ( .i(\e[0][3][21] ), .c(
        \e_tx[0][3][21] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[22].north_rx  ( .i(\s_tx[0][2][22] ), .o(
        \n[0][3][22] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[22].west_rx  ( .i(\e_tx[3][3][22] ), .o(
        \w[0][3][22] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[22].south_tx  ( .i(\s[0][3][22] ), .c(
        \s_tx[0][3][22] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[22].east_tx  ( .i(\e[0][3][22] ), .c(
        \e_tx[0][3][22] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[23].north_rx  ( .i(\s_tx[0][2][23] ), .o(
        \n[0][3][23] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[23].west_rx  ( .i(\e_tx[3][3][23] ), .o(
        \w[0][3][23] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[23].south_tx  ( .i(\s[0][3][23] ), .c(
        \s_tx[0][3][23] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[23].east_tx  ( .i(\e[0][3][23] ), .c(
        \e_tx[0][3][23] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[24].north_rx  ( .i(\s_tx[0][2][24] ), .o(
        \n[0][3][24] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[24].west_rx  ( .i(\e_tx[3][3][24] ), .o(
        \w[0][3][24] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[24].south_tx  ( .i(\s[0][3][24] ), .c(
        \s_tx[0][3][24] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[24].east_tx  ( .i(\e[0][3][24] ), .c(
        \e_tx[0][3][24] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[25].north_rx  ( .i(\s_tx[0][2][25] ), .o(
        \n[0][3][25] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[25].west_rx  ( .i(\e_tx[3][3][25] ), .o(
        \w[0][3][25] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[25].south_tx  ( .i(\s[0][3][25] ), .c(
        \s_tx[0][3][25] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[25].east_tx  ( .i(\e[0][3][25] ), .c(
        \e_tx[0][3][25] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[26].north_rx  ( .i(\s_tx[0][2][26] ), .o(
        \n[0][3][26] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[26].west_rx  ( .i(\e_tx[3][3][26] ), .o(
        \w[0][3][26] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[26].south_tx  ( .i(\s[0][3][26] ), .c(
        \s_tx[0][3][26] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[26].east_tx  ( .i(\e[0][3][26] ), .c(
        \e_tx[0][3][26] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[27].north_rx  ( .i(\s_tx[0][2][27] ), .o(
        \n[0][3][27] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[27].west_rx  ( .i(\e_tx[3][3][27] ), .o(
        \w[0][3][27] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[27].south_tx  ( .i(\s[0][3][27] ), .c(
        \s_tx[0][3][27] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[27].east_tx  ( .i(\e[0][3][27] ), .c(
        \e_tx[0][3][27] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[28].north_rx  ( .i(\s_tx[0][2][28] ), .o(
        \n[0][3][28] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[28].west_rx  ( .i(\e_tx[3][3][28] ), .o(
        \w[0][3][28] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[28].south_tx  ( .i(\s[0][3][28] ), .c(
        \s_tx[0][3][28] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[28].east_tx  ( .i(\e[0][3][28] ), .c(
        \e_tx[0][3][28] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[29].north_rx  ( .i(\s_tx[0][2][29] ), .o(
        \n[0][3][29] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[29].west_rx  ( .i(\e_tx[3][3][29] ), .o(
        \w[0][3][29] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[29].south_tx  ( .i(\s[0][3][29] ), .c(
        \s_tx[0][3][29] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[29].east_tx  ( .i(\e[0][3][29] ), .c(
        \e_tx[0][3][29] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[30].north_rx  ( .i(\s_tx[0][2][30] ), .o(
        \n[0][3][30] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[30].west_rx  ( .i(\e_tx[3][3][30] ), .o(
        \w[0][3][30] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[30].south_tx  ( .i(\s[0][3][30] ), .c(
        \s_tx[0][3][30] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[30].east_tx  ( .i(\e[0][3][30] ), .c(
        \e_tx[0][3][30] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[31].north_rx  ( .i(\s_tx[0][2][31] ), .o(
        \n[0][3][31] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[31].west_rx  ( .i(\e_tx[3][3][31] ), .o(
        \w[0][3][31] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[31].south_tx  ( .i(\s[0][3][31] ), .c(
        \s_tx[0][3][31] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[31].east_tx  ( .i(\e[0][3][31] ), .c(
        \e_tx[0][3][31] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[32].north_rx  ( .i(\s_tx[0][2][32] ), .o(
        \n[0][3][32] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[32].west_rx  ( .i(\e_tx[3][3][32] ), .o(
        \w[0][3][32] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[32].south_tx  ( .i(\s[0][3][32] ), .c(
        \s_tx[0][3][32] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[32].east_tx  ( .i(\e[0][3][32] ), .c(
        \e_tx[0][3][32] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[33].north_rx  ( .i(\s_tx[0][2][33] ), .o(
        \n[0][3][33] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[33].west_rx  ( .i(\e_tx[3][3][33] ), .o(
        \w[0][3][33] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[33].south_tx  ( .i(\s[0][3][33] ), .c(
        \s_tx[0][3][33] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[33].east_tx  ( .i(\e[0][3][33] ), .c(
        \e_tx[0][3][33] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[34].north_rx  ( .i(\s_tx[0][2][34] ), .o(
        \n[0][3][34] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[34].west_rx  ( .i(\e_tx[3][3][34] ), .o(
        \w[0][3][34] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[34].south_tx  ( .i(\s[0][3][34] ), .c(
        \s_tx[0][3][34] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[34].east_tx  ( .i(\e[0][3][34] ), .c(
        \e_tx[0][3][34] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[35].north_rx  ( .i(\s_tx[0][2][35] ), .o(
        \n[0][3][35] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[35].west_rx  ( .i(\e_tx[3][3][35] ), .o(
        \w[0][3][35] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[35].south_tx  ( .i(\s[0][3][35] ), .c(
        \s_tx[0][3][35] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[35].east_tx  ( .i(\e[0][3][35] ), .c(
        \e_tx[0][3][35] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[36].north_rx  ( .i(\s_tx[0][2][36] ), .o(
        \n[0][3][36] ) );
  low_swing_rx \ys[3].xs[0].msg_txrx[36].west_rx  ( .i(\e_tx[3][3][36] ), .o(
        \w[0][3][36] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[36].south_tx  ( .i(\s[0][3][36] ), .c(
        \s_tx[0][3][36] ) );
  low_swing_tx \ys[3].xs[0].msg_txrx[36].east_tx  ( .i(\e[0][3][36] ), .c(
        \e_tx[0][3][36] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[0].north_rx  ( .i(\s_tx[1][2][0] ), .o(
        \n[1][3][0] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[0].west_rx  ( .i(\e_tx[0][3][0] ), .o(
        \w[1][3][0] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[0].south_tx  ( .i(\s[1][3][0] ), .c(
        \s_tx[1][3][0] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[0].east_tx  ( .i(\e[1][3][0] ), .c(
        \e_tx[1][3][0] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[1].north_rx  ( .i(\s_tx[1][2][1] ), .o(
        \n[1][3][1] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[1].west_rx  ( .i(\e_tx[0][3][1] ), .o(
        \w[1][3][1] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[1].south_tx  ( .i(\s[1][3][1] ), .c(
        \s_tx[1][3][1] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[1].east_tx  ( .i(\e[1][3][1] ), .c(
        \e_tx[1][3][1] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[2].north_rx  ( .i(\s_tx[1][2][2] ), .o(
        \n[1][3][2] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[2].west_rx  ( .i(\e_tx[0][3][2] ), .o(
        \w[1][3][2] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[2].south_tx  ( .i(\s[1][3][2] ), .c(
        \s_tx[1][3][2] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[2].east_tx  ( .i(\e[1][3][2] ), .c(
        \e_tx[1][3][2] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[3].north_rx  ( .i(\s_tx[1][2][3] ), .o(
        \n[1][3][3] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[3].west_rx  ( .i(\e_tx[0][3][3] ), .o(
        \w[1][3][3] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[3].south_tx  ( .i(\s[1][3][3] ), .c(
        \s_tx[1][3][3] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[3].east_tx  ( .i(\e[1][3][3] ), .c(
        \e_tx[1][3][3] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[4].north_rx  ( .i(\s_tx[1][2][4] ), .o(
        \n[1][3][4] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[4].west_rx  ( .i(\e_tx[0][3][4] ), .o(
        \w[1][3][4] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[4].south_tx  ( .i(\s[1][3][4] ), .c(
        \s_tx[1][3][4] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[4].east_tx  ( .i(\e[1][3][4] ), .c(
        \e_tx[1][3][4] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[5].north_rx  ( .i(\s_tx[1][2][5] ), .o(
        \n[1][3][5] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[5].west_rx  ( .i(\e_tx[0][3][5] ), .o(
        \w[1][3][5] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[5].south_tx  ( .i(\s[1][3][5] ), .c(
        \s_tx[1][3][5] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[5].east_tx  ( .i(\e[1][3][5] ), .c(
        \e_tx[1][3][5] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[6].north_rx  ( .i(\s_tx[1][2][6] ), .o(
        \n[1][3][6] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[6].west_rx  ( .i(\e_tx[0][3][6] ), .o(
        \w[1][3][6] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[6].south_tx  ( .i(\s[1][3][6] ), .c(
        \s_tx[1][3][6] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[6].east_tx  ( .i(\e[1][3][6] ), .c(
        \e_tx[1][3][6] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[7].north_rx  ( .i(\s_tx[1][2][7] ), .o(
        \n[1][3][7] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[7].west_rx  ( .i(\e_tx[0][3][7] ), .o(
        \w[1][3][7] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[7].south_tx  ( .i(\s[1][3][7] ), .c(
        \s_tx[1][3][7] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[7].east_tx  ( .i(\e[1][3][7] ), .c(
        \e_tx[1][3][7] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[8].north_rx  ( .i(\s_tx[1][2][8] ), .o(
        \n[1][3][8] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[8].west_rx  ( .i(\e_tx[0][3][8] ), .o(
        \w[1][3][8] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[8].south_tx  ( .i(\s[1][3][8] ), .c(
        \s_tx[1][3][8] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[8].east_tx  ( .i(\e[1][3][8] ), .c(
        \e_tx[1][3][8] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[9].north_rx  ( .i(\s_tx[1][2][9] ), .o(
        \n[1][3][9] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[9].west_rx  ( .i(\e_tx[0][3][9] ), .o(
        \w[1][3][9] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[9].south_tx  ( .i(\s[1][3][9] ), .c(
        \s_tx[1][3][9] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[9].east_tx  ( .i(\e[1][3][9] ), .c(
        \e_tx[1][3][9] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[10].north_rx  ( .i(\s_tx[1][2][10] ), .o(
        \n[1][3][10] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[10].west_rx  ( .i(\e_tx[0][3][10] ), .o(
        \w[1][3][10] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[10].south_tx  ( .i(\s[1][3][10] ), .c(
        \s_tx[1][3][10] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[10].east_tx  ( .i(\e[1][3][10] ), .c(
        \e_tx[1][3][10] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[11].north_rx  ( .i(\s_tx[1][2][11] ), .o(
        \n[1][3][11] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[11].west_rx  ( .i(\e_tx[0][3][11] ), .o(
        \w[1][3][11] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[11].south_tx  ( .i(\s[1][3][11] ), .c(
        \s_tx[1][3][11] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[11].east_tx  ( .i(\e[1][3][11] ), .c(
        \e_tx[1][3][11] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[12].north_rx  ( .i(\s_tx[1][2][12] ), .o(
        \n[1][3][12] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[12].west_rx  ( .i(\e_tx[0][3][12] ), .o(
        \w[1][3][12] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[12].south_tx  ( .i(\s[1][3][12] ), .c(
        \s_tx[1][3][12] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[12].east_tx  ( .i(\e[1][3][12] ), .c(
        \e_tx[1][3][12] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[13].north_rx  ( .i(\s_tx[1][2][13] ), .o(
        \n[1][3][13] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[13].west_rx  ( .i(\e_tx[0][3][13] ), .o(
        \w[1][3][13] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[13].south_tx  ( .i(\s[1][3][13] ), .c(
        \s_tx[1][3][13] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[13].east_tx  ( .i(\e[1][3][13] ), .c(
        \e_tx[1][3][13] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[14].north_rx  ( .i(\s_tx[1][2][14] ), .o(
        \n[1][3][14] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[14].west_rx  ( .i(\e_tx[0][3][14] ), .o(
        \w[1][3][14] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[14].south_tx  ( .i(\s[1][3][14] ), .c(
        \s_tx[1][3][14] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[14].east_tx  ( .i(\e[1][3][14] ), .c(
        \e_tx[1][3][14] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[15].north_rx  ( .i(\s_tx[1][2][15] ), .o(
        \n[1][3][15] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[15].west_rx  ( .i(\e_tx[0][3][15] ), .o(
        \w[1][3][15] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[15].south_tx  ( .i(\s[1][3][15] ), .c(
        \s_tx[1][3][15] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[15].east_tx  ( .i(\e[1][3][15] ), .c(
        \e_tx[1][3][15] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[16].north_rx  ( .i(\s_tx[1][2][16] ), .o(
        \n[1][3][16] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[16].west_rx  ( .i(\e_tx[0][3][16] ), .o(
        \w[1][3][16] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[16].south_tx  ( .i(\s[1][3][16] ), .c(
        \s_tx[1][3][16] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[16].east_tx  ( .i(\e[1][3][16] ), .c(
        \e_tx[1][3][16] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[17].north_rx  ( .i(\s_tx[1][2][17] ), .o(
        \n[1][3][17] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[17].west_rx  ( .i(\e_tx[0][3][17] ), .o(
        \w[1][3][17] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[17].south_tx  ( .i(\s[1][3][17] ), .c(
        \s_tx[1][3][17] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[17].east_tx  ( .i(\e[1][3][17] ), .c(
        \e_tx[1][3][17] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[18].north_rx  ( .i(\s_tx[1][2][18] ), .o(
        \n[1][3][18] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[18].west_rx  ( .i(\e_tx[0][3][18] ), .o(
        \w[1][3][18] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[18].south_tx  ( .i(\s[1][3][18] ), .c(
        \s_tx[1][3][18] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[18].east_tx  ( .i(\e[1][3][18] ), .c(
        \e_tx[1][3][18] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[19].north_rx  ( .i(\s_tx[1][2][19] ), .o(
        \n[1][3][19] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[19].west_rx  ( .i(\e_tx[0][3][19] ), .o(
        \w[1][3][19] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[19].south_tx  ( .i(\s[1][3][19] ), .c(
        \s_tx[1][3][19] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[19].east_tx  ( .i(\e[1][3][19] ), .c(
        \e_tx[1][3][19] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[20].north_rx  ( .i(\s_tx[1][2][20] ), .o(
        \n[1][3][20] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[20].west_rx  ( .i(\e_tx[0][3][20] ), .o(
        \w[1][3][20] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[20].south_tx  ( .i(\s[1][3][20] ), .c(
        \s_tx[1][3][20] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[20].east_tx  ( .i(\e[1][3][20] ), .c(
        \e_tx[1][3][20] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[21].north_rx  ( .i(\s_tx[1][2][21] ), .o(
        \n[1][3][21] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[21].west_rx  ( .i(\e_tx[0][3][21] ), .o(
        \w[1][3][21] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[21].south_tx  ( .i(\s[1][3][21] ), .c(
        \s_tx[1][3][21] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[21].east_tx  ( .i(\e[1][3][21] ), .c(
        \e_tx[1][3][21] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[22].north_rx  ( .i(\s_tx[1][2][22] ), .o(
        \n[1][3][22] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[22].west_rx  ( .i(\e_tx[0][3][22] ), .o(
        \w[1][3][22] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[22].south_tx  ( .i(\s[1][3][22] ), .c(
        \s_tx[1][3][22] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[22].east_tx  ( .i(\e[1][3][22] ), .c(
        \e_tx[1][3][22] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[23].north_rx  ( .i(\s_tx[1][2][23] ), .o(
        \n[1][3][23] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[23].west_rx  ( .i(\e_tx[0][3][23] ), .o(
        \w[1][3][23] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[23].south_tx  ( .i(\s[1][3][23] ), .c(
        \s_tx[1][3][23] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[23].east_tx  ( .i(\e[1][3][23] ), .c(
        \e_tx[1][3][23] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[24].north_rx  ( .i(\s_tx[1][2][24] ), .o(
        \n[1][3][24] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[24].west_rx  ( .i(\e_tx[0][3][24] ), .o(
        \w[1][3][24] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[24].south_tx  ( .i(\s[1][3][24] ), .c(
        \s_tx[1][3][24] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[24].east_tx  ( .i(\e[1][3][24] ), .c(
        \e_tx[1][3][24] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[25].north_rx  ( .i(\s_tx[1][2][25] ), .o(
        \n[1][3][25] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[25].west_rx  ( .i(\e_tx[0][3][25] ), .o(
        \w[1][3][25] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[25].south_tx  ( .i(\s[1][3][25] ), .c(
        \s_tx[1][3][25] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[25].east_tx  ( .i(\e[1][3][25] ), .c(
        \e_tx[1][3][25] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[26].north_rx  ( .i(\s_tx[1][2][26] ), .o(
        \n[1][3][26] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[26].west_rx  ( .i(\e_tx[0][3][26] ), .o(
        \w[1][3][26] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[26].south_tx  ( .i(\s[1][3][26] ), .c(
        \s_tx[1][3][26] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[26].east_tx  ( .i(\e[1][3][26] ), .c(
        \e_tx[1][3][26] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[27].north_rx  ( .i(\s_tx[1][2][27] ), .o(
        \n[1][3][27] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[27].west_rx  ( .i(\e_tx[0][3][27] ), .o(
        \w[1][3][27] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[27].south_tx  ( .i(\s[1][3][27] ), .c(
        \s_tx[1][3][27] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[27].east_tx  ( .i(\e[1][3][27] ), .c(
        \e_tx[1][3][27] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[28].north_rx  ( .i(\s_tx[1][2][28] ), .o(
        \n[1][3][28] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[28].west_rx  ( .i(\e_tx[0][3][28] ), .o(
        \w[1][3][28] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[28].south_tx  ( .i(\s[1][3][28] ), .c(
        \s_tx[1][3][28] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[28].east_tx  ( .i(\e[1][3][28] ), .c(
        \e_tx[1][3][28] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[29].north_rx  ( .i(\s_tx[1][2][29] ), .o(
        \n[1][3][29] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[29].west_rx  ( .i(\e_tx[0][3][29] ), .o(
        \w[1][3][29] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[29].south_tx  ( .i(\s[1][3][29] ), .c(
        \s_tx[1][3][29] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[29].east_tx  ( .i(\e[1][3][29] ), .c(
        \e_tx[1][3][29] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[30].north_rx  ( .i(\s_tx[1][2][30] ), .o(
        \n[1][3][30] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[30].west_rx  ( .i(\e_tx[0][3][30] ), .o(
        \w[1][3][30] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[30].south_tx  ( .i(\s[1][3][30] ), .c(
        \s_tx[1][3][30] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[30].east_tx  ( .i(\e[1][3][30] ), .c(
        \e_tx[1][3][30] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[31].north_rx  ( .i(\s_tx[1][2][31] ), .o(
        \n[1][3][31] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[31].west_rx  ( .i(\e_tx[0][3][31] ), .o(
        \w[1][3][31] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[31].south_tx  ( .i(\s[1][3][31] ), .c(
        \s_tx[1][3][31] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[31].east_tx  ( .i(\e[1][3][31] ), .c(
        \e_tx[1][3][31] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[32].north_rx  ( .i(\s_tx[1][2][32] ), .o(
        \n[1][3][32] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[32].west_rx  ( .i(\e_tx[0][3][32] ), .o(
        \w[1][3][32] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[32].south_tx  ( .i(\s[1][3][32] ), .c(
        \s_tx[1][3][32] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[32].east_tx  ( .i(\e[1][3][32] ), .c(
        \e_tx[1][3][32] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[33].north_rx  ( .i(\s_tx[1][2][33] ), .o(
        \n[1][3][33] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[33].west_rx  ( .i(\e_tx[0][3][33] ), .o(
        \w[1][3][33] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[33].south_tx  ( .i(\s[1][3][33] ), .c(
        \s_tx[1][3][33] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[33].east_tx  ( .i(\e[1][3][33] ), .c(
        \e_tx[1][3][33] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[34].north_rx  ( .i(\s_tx[1][2][34] ), .o(
        \n[1][3][34] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[34].west_rx  ( .i(\e_tx[0][3][34] ), .o(
        \w[1][3][34] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[34].south_tx  ( .i(\s[1][3][34] ), .c(
        \s_tx[1][3][34] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[34].east_tx  ( .i(\e[1][3][34] ), .c(
        \e_tx[1][3][34] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[35].north_rx  ( .i(\s_tx[1][2][35] ), .o(
        \n[1][3][35] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[35].west_rx  ( .i(\e_tx[0][3][35] ), .o(
        \w[1][3][35] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[35].south_tx  ( .i(\s[1][3][35] ), .c(
        \s_tx[1][3][35] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[35].east_tx  ( .i(\e[1][3][35] ), .c(
        \e_tx[1][3][35] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[36].north_rx  ( .i(\s_tx[1][2][36] ), .o(
        \n[1][3][36] ) );
  low_swing_rx \ys[3].xs[1].msg_txrx[36].west_rx  ( .i(\e_tx[0][3][36] ), .o(
        \w[1][3][36] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[36].south_tx  ( .i(\s[1][3][36] ), .c(
        \s_tx[1][3][36] ) );
  low_swing_tx \ys[3].xs[1].msg_txrx[36].east_tx  ( .i(\e[1][3][36] ), .c(
        \e_tx[1][3][36] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[0].north_rx  ( .i(\s_tx[2][2][0] ), .o(
        \n[2][3][0] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[0].west_rx  ( .i(\e_tx[1][3][0] ), .o(
        \w[2][3][0] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[0].south_tx  ( .i(\s[2][3][0] ), .c(
        \s_tx[2][3][0] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[0].east_tx  ( .i(\e[2][3][0] ), .c(
        \e_tx[2][3][0] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[1].north_rx  ( .i(\s_tx[2][2][1] ), .o(
        \n[2][3][1] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[1].west_rx  ( .i(\e_tx[1][3][1] ), .o(
        \w[2][3][1] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[1].south_tx  ( .i(\s[2][3][1] ), .c(
        \s_tx[2][3][1] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[1].east_tx  ( .i(\e[2][3][1] ), .c(
        \e_tx[2][3][1] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[2].north_rx  ( .i(\s_tx[2][2][2] ), .o(
        \n[2][3][2] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[2].west_rx  ( .i(\e_tx[1][3][2] ), .o(
        \w[2][3][2] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[2].south_tx  ( .i(\s[2][3][2] ), .c(
        \s_tx[2][3][2] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[2].east_tx  ( .i(\e[2][3][2] ), .c(
        \e_tx[2][3][2] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[3].north_rx  ( .i(\s_tx[2][2][3] ), .o(
        \n[2][3][3] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[3].west_rx  ( .i(\e_tx[1][3][3] ), .o(
        \w[2][3][3] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[3].south_tx  ( .i(\s[2][3][3] ), .c(
        \s_tx[2][3][3] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[3].east_tx  ( .i(\e[2][3][3] ), .c(
        \e_tx[2][3][3] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[4].north_rx  ( .i(\s_tx[2][2][4] ), .o(
        \n[2][3][4] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[4].west_rx  ( .i(\e_tx[1][3][4] ), .o(
        \w[2][3][4] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[4].south_tx  ( .i(\s[2][3][4] ), .c(
        \s_tx[2][3][4] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[4].east_tx  ( .i(\e[2][3][4] ), .c(
        \e_tx[2][3][4] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[5].north_rx  ( .i(\s_tx[2][2][5] ), .o(
        \n[2][3][5] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[5].west_rx  ( .i(\e_tx[1][3][5] ), .o(
        \w[2][3][5] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[5].south_tx  ( .i(\s[2][3][5] ), .c(
        \s_tx[2][3][5] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[5].east_tx  ( .i(\e[2][3][5] ), .c(
        \e_tx[2][3][5] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[6].north_rx  ( .i(\s_tx[2][2][6] ), .o(
        \n[2][3][6] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[6].west_rx  ( .i(\e_tx[1][3][6] ), .o(
        \w[2][3][6] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[6].south_tx  ( .i(\s[2][3][6] ), .c(
        \s_tx[2][3][6] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[6].east_tx  ( .i(\e[2][3][6] ), .c(
        \e_tx[2][3][6] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[7].north_rx  ( .i(\s_tx[2][2][7] ), .o(
        \n[2][3][7] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[7].west_rx  ( .i(\e_tx[1][3][7] ), .o(
        \w[2][3][7] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[7].south_tx  ( .i(\s[2][3][7] ), .c(
        \s_tx[2][3][7] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[7].east_tx  ( .i(\e[2][3][7] ), .c(
        \e_tx[2][3][7] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[8].north_rx  ( .i(\s_tx[2][2][8] ), .o(
        \n[2][3][8] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[8].west_rx  ( .i(\e_tx[1][3][8] ), .o(
        \w[2][3][8] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[8].south_tx  ( .i(\s[2][3][8] ), .c(
        \s_tx[2][3][8] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[8].east_tx  ( .i(\e[2][3][8] ), .c(
        \e_tx[2][3][8] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[9].north_rx  ( .i(\s_tx[2][2][9] ), .o(
        \n[2][3][9] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[9].west_rx  ( .i(\e_tx[1][3][9] ), .o(
        \w[2][3][9] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[9].south_tx  ( .i(\s[2][3][9] ), .c(
        \s_tx[2][3][9] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[9].east_tx  ( .i(\e[2][3][9] ), .c(
        \e_tx[2][3][9] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[10].north_rx  ( .i(\s_tx[2][2][10] ), .o(
        \n[2][3][10] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[10].west_rx  ( .i(\e_tx[1][3][10] ), .o(
        \w[2][3][10] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[10].south_tx  ( .i(\s[2][3][10] ), .c(
        \s_tx[2][3][10] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[10].east_tx  ( .i(\e[2][3][10] ), .c(
        \e_tx[2][3][10] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[11].north_rx  ( .i(\s_tx[2][2][11] ), .o(
        \n[2][3][11] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[11].west_rx  ( .i(\e_tx[1][3][11] ), .o(
        \w[2][3][11] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[11].south_tx  ( .i(\s[2][3][11] ), .c(
        \s_tx[2][3][11] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[11].east_tx  ( .i(\e[2][3][11] ), .c(
        \e_tx[2][3][11] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[12].north_rx  ( .i(\s_tx[2][2][12] ), .o(
        \n[2][3][12] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[12].west_rx  ( .i(\e_tx[1][3][12] ), .o(
        \w[2][3][12] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[12].south_tx  ( .i(\s[2][3][12] ), .c(
        \s_tx[2][3][12] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[12].east_tx  ( .i(\e[2][3][12] ), .c(
        \e_tx[2][3][12] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[13].north_rx  ( .i(\s_tx[2][2][13] ), .o(
        \n[2][3][13] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[13].west_rx  ( .i(\e_tx[1][3][13] ), .o(
        \w[2][3][13] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[13].south_tx  ( .i(\s[2][3][13] ), .c(
        \s_tx[2][3][13] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[13].east_tx  ( .i(\e[2][3][13] ), .c(
        \e_tx[2][3][13] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[14].north_rx  ( .i(\s_tx[2][2][14] ), .o(
        \n[2][3][14] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[14].west_rx  ( .i(\e_tx[1][3][14] ), .o(
        \w[2][3][14] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[14].south_tx  ( .i(\s[2][3][14] ), .c(
        \s_tx[2][3][14] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[14].east_tx  ( .i(\e[2][3][14] ), .c(
        \e_tx[2][3][14] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[15].north_rx  ( .i(\s_tx[2][2][15] ), .o(
        \n[2][3][15] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[15].west_rx  ( .i(\e_tx[1][3][15] ), .o(
        \w[2][3][15] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[15].south_tx  ( .i(\s[2][3][15] ), .c(
        \s_tx[2][3][15] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[15].east_tx  ( .i(\e[2][3][15] ), .c(
        \e_tx[2][3][15] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[16].north_rx  ( .i(\s_tx[2][2][16] ), .o(
        \n[2][3][16] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[16].west_rx  ( .i(\e_tx[1][3][16] ), .o(
        \w[2][3][16] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[16].south_tx  ( .i(\s[2][3][16] ), .c(
        \s_tx[2][3][16] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[16].east_tx  ( .i(\e[2][3][16] ), .c(
        \e_tx[2][3][16] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[17].north_rx  ( .i(\s_tx[2][2][17] ), .o(
        \n[2][3][17] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[17].west_rx  ( .i(\e_tx[1][3][17] ), .o(
        \w[2][3][17] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[17].south_tx  ( .i(\s[2][3][17] ), .c(
        \s_tx[2][3][17] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[17].east_tx  ( .i(\e[2][3][17] ), .c(
        \e_tx[2][3][17] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[18].north_rx  ( .i(\s_tx[2][2][18] ), .o(
        \n[2][3][18] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[18].west_rx  ( .i(\e_tx[1][3][18] ), .o(
        \w[2][3][18] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[18].south_tx  ( .i(\s[2][3][18] ), .c(
        \s_tx[2][3][18] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[18].east_tx  ( .i(\e[2][3][18] ), .c(
        \e_tx[2][3][18] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[19].north_rx  ( .i(\s_tx[2][2][19] ), .o(
        \n[2][3][19] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[19].west_rx  ( .i(\e_tx[1][3][19] ), .o(
        \w[2][3][19] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[19].south_tx  ( .i(\s[2][3][19] ), .c(
        \s_tx[2][3][19] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[19].east_tx  ( .i(\e[2][3][19] ), .c(
        \e_tx[2][3][19] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[20].north_rx  ( .i(\s_tx[2][2][20] ), .o(
        \n[2][3][20] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[20].west_rx  ( .i(\e_tx[1][3][20] ), .o(
        \w[2][3][20] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[20].south_tx  ( .i(\s[2][3][20] ), .c(
        \s_tx[2][3][20] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[20].east_tx  ( .i(\e[2][3][20] ), .c(
        \e_tx[2][3][20] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[21].north_rx  ( .i(\s_tx[2][2][21] ), .o(
        \n[2][3][21] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[21].west_rx  ( .i(\e_tx[1][3][21] ), .o(
        \w[2][3][21] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[21].south_tx  ( .i(\s[2][3][21] ), .c(
        \s_tx[2][3][21] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[21].east_tx  ( .i(\e[2][3][21] ), .c(
        \e_tx[2][3][21] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[22].north_rx  ( .i(\s_tx[2][2][22] ), .o(
        \n[2][3][22] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[22].west_rx  ( .i(\e_tx[1][3][22] ), .o(
        \w[2][3][22] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[22].south_tx  ( .i(\s[2][3][22] ), .c(
        \s_tx[2][3][22] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[22].east_tx  ( .i(\e[2][3][22] ), .c(
        \e_tx[2][3][22] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[23].north_rx  ( .i(\s_tx[2][2][23] ), .o(
        \n[2][3][23] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[23].west_rx  ( .i(\e_tx[1][3][23] ), .o(
        \w[2][3][23] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[23].south_tx  ( .i(\s[2][3][23] ), .c(
        \s_tx[2][3][23] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[23].east_tx  ( .i(\e[2][3][23] ), .c(
        \e_tx[2][3][23] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[24].north_rx  ( .i(\s_tx[2][2][24] ), .o(
        \n[2][3][24] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[24].west_rx  ( .i(\e_tx[1][3][24] ), .o(
        \w[2][3][24] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[24].south_tx  ( .i(\s[2][3][24] ), .c(
        \s_tx[2][3][24] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[24].east_tx  ( .i(\e[2][3][24] ), .c(
        \e_tx[2][3][24] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[25].north_rx  ( .i(\s_tx[2][2][25] ), .o(
        \n[2][3][25] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[25].west_rx  ( .i(\e_tx[1][3][25] ), .o(
        \w[2][3][25] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[25].south_tx  ( .i(\s[2][3][25] ), .c(
        \s_tx[2][3][25] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[25].east_tx  ( .i(\e[2][3][25] ), .c(
        \e_tx[2][3][25] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[26].north_rx  ( .i(\s_tx[2][2][26] ), .o(
        \n[2][3][26] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[26].west_rx  ( .i(\e_tx[1][3][26] ), .o(
        \w[2][3][26] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[26].south_tx  ( .i(\s[2][3][26] ), .c(
        \s_tx[2][3][26] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[26].east_tx  ( .i(\e[2][3][26] ), .c(
        \e_tx[2][3][26] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[27].north_rx  ( .i(\s_tx[2][2][27] ), .o(
        \n[2][3][27] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[27].west_rx  ( .i(\e_tx[1][3][27] ), .o(
        \w[2][3][27] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[27].south_tx  ( .i(\s[2][3][27] ), .c(
        \s_tx[2][3][27] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[27].east_tx  ( .i(\e[2][3][27] ), .c(
        \e_tx[2][3][27] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[28].north_rx  ( .i(\s_tx[2][2][28] ), .o(
        \n[2][3][28] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[28].west_rx  ( .i(\e_tx[1][3][28] ), .o(
        \w[2][3][28] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[28].south_tx  ( .i(\s[2][3][28] ), .c(
        \s_tx[2][3][28] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[28].east_tx  ( .i(\e[2][3][28] ), .c(
        \e_tx[2][3][28] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[29].north_rx  ( .i(\s_tx[2][2][29] ), .o(
        \n[2][3][29] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[29].west_rx  ( .i(\e_tx[1][3][29] ), .o(
        \w[2][3][29] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[29].south_tx  ( .i(\s[2][3][29] ), .c(
        \s_tx[2][3][29] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[29].east_tx  ( .i(\e[2][3][29] ), .c(
        \e_tx[2][3][29] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[30].north_rx  ( .i(\s_tx[2][2][30] ), .o(
        \n[2][3][30] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[30].west_rx  ( .i(\e_tx[1][3][30] ), .o(
        \w[2][3][30] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[30].south_tx  ( .i(\s[2][3][30] ), .c(
        \s_tx[2][3][30] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[30].east_tx  ( .i(\e[2][3][30] ), .c(
        \e_tx[2][3][30] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[31].north_rx  ( .i(\s_tx[2][2][31] ), .o(
        \n[2][3][31] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[31].west_rx  ( .i(\e_tx[1][3][31] ), .o(
        \w[2][3][31] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[31].south_tx  ( .i(\s[2][3][31] ), .c(
        \s_tx[2][3][31] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[31].east_tx  ( .i(\e[2][3][31] ), .c(
        \e_tx[2][3][31] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[32].north_rx  ( .i(\s_tx[2][2][32] ), .o(
        \n[2][3][32] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[32].west_rx  ( .i(\e_tx[1][3][32] ), .o(
        \w[2][3][32] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[32].south_tx  ( .i(\s[2][3][32] ), .c(
        \s_tx[2][3][32] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[32].east_tx  ( .i(\e[2][3][32] ), .c(
        \e_tx[2][3][32] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[33].north_rx  ( .i(\s_tx[2][2][33] ), .o(
        \n[2][3][33] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[33].west_rx  ( .i(\e_tx[1][3][33] ), .o(
        \w[2][3][33] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[33].south_tx  ( .i(\s[2][3][33] ), .c(
        \s_tx[2][3][33] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[33].east_tx  ( .i(\e[2][3][33] ), .c(
        \e_tx[2][3][33] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[34].north_rx  ( .i(\s_tx[2][2][34] ), .o(
        \n[2][3][34] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[34].west_rx  ( .i(\e_tx[1][3][34] ), .o(
        \w[2][3][34] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[34].south_tx  ( .i(\s[2][3][34] ), .c(
        \s_tx[2][3][34] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[34].east_tx  ( .i(\e[2][3][34] ), .c(
        \e_tx[2][3][34] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[35].north_rx  ( .i(\s_tx[2][2][35] ), .o(
        \n[2][3][35] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[35].west_rx  ( .i(\e_tx[1][3][35] ), .o(
        \w[2][3][35] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[35].south_tx  ( .i(\s[2][3][35] ), .c(
        \s_tx[2][3][35] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[35].east_tx  ( .i(\e[2][3][35] ), .c(
        \e_tx[2][3][35] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[36].north_rx  ( .i(\s_tx[2][2][36] ), .o(
        \n[2][3][36] ) );
  low_swing_rx \ys[3].xs[2].msg_txrx[36].west_rx  ( .i(\e_tx[1][3][36] ), .o(
        \w[2][3][36] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[36].south_tx  ( .i(\s[2][3][36] ), .c(
        \s_tx[2][3][36] ) );
  low_swing_tx \ys[3].xs[2].msg_txrx[36].east_tx  ( .i(\e[2][3][36] ), .c(
        \e_tx[2][3][36] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[0].north_rx  ( .i(\s_tx[3][2][0] ), .o(
        \n[3][3][0] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[0].west_rx  ( .i(\e_tx[2][3][0] ), .o(
        \w[3][3][0] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[0].south_tx  ( .i(\s[3][3][0] ), .c(
        \s_tx[3][3][0] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[0].east_tx  ( .i(\e[3][3][0] ), .c(
        \e_tx[3][3][0] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[1].north_rx  ( .i(\s_tx[3][2][1] ), .o(
        \n[3][3][1] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[1].west_rx  ( .i(\e_tx[2][3][1] ), .o(
        \w[3][3][1] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[1].south_tx  ( .i(\s[3][3][1] ), .c(
        \s_tx[3][3][1] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[1].east_tx  ( .i(\e[3][3][1] ), .c(
        \e_tx[3][3][1] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[2].north_rx  ( .i(\s_tx[3][2][2] ), .o(
        \n[3][3][2] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[2].west_rx  ( .i(\e_tx[2][3][2] ), .o(
        \w[3][3][2] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[2].south_tx  ( .i(\s[3][3][2] ), .c(
        \s_tx[3][3][2] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[2].east_tx  ( .i(\e[3][3][2] ), .c(
        \e_tx[3][3][2] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[3].north_rx  ( .i(\s_tx[3][2][3] ), .o(
        \n[3][3][3] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[3].west_rx  ( .i(\e_tx[2][3][3] ), .o(
        \w[3][3][3] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[3].south_tx  ( .i(\s[3][3][3] ), .c(
        \s_tx[3][3][3] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[3].east_tx  ( .i(\e[3][3][3] ), .c(
        \e_tx[3][3][3] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[4].north_rx  ( .i(\s_tx[3][2][4] ), .o(
        \n[3][3][4] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[4].west_rx  ( .i(\e_tx[2][3][4] ), .o(
        \w[3][3][4] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[4].south_tx  ( .i(\s[3][3][4] ), .c(
        \s_tx[3][3][4] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[4].east_tx  ( .i(\e[3][3][4] ), .c(
        \e_tx[3][3][4] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[5].north_rx  ( .i(\s_tx[3][2][5] ), .o(
        \n[3][3][5] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[5].west_rx  ( .i(\e_tx[2][3][5] ), .o(
        \w[3][3][5] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[5].south_tx  ( .i(\s[3][3][5] ), .c(
        \s_tx[3][3][5] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[5].east_tx  ( .i(\e[3][3][5] ), .c(
        \e_tx[3][3][5] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[6].north_rx  ( .i(\s_tx[3][2][6] ), .o(
        \n[3][3][6] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[6].west_rx  ( .i(\e_tx[2][3][6] ), .o(
        \w[3][3][6] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[6].south_tx  ( .i(\s[3][3][6] ), .c(
        \s_tx[3][3][6] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[6].east_tx  ( .i(\e[3][3][6] ), .c(
        \e_tx[3][3][6] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[7].north_rx  ( .i(\s_tx[3][2][7] ), .o(
        \n[3][3][7] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[7].west_rx  ( .i(\e_tx[2][3][7] ), .o(
        \w[3][3][7] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[7].south_tx  ( .i(\s[3][3][7] ), .c(
        \s_tx[3][3][7] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[7].east_tx  ( .i(\e[3][3][7] ), .c(
        \e_tx[3][3][7] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[8].north_rx  ( .i(\s_tx[3][2][8] ), .o(
        \n[3][3][8] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[8].west_rx  ( .i(\e_tx[2][3][8] ), .o(
        \w[3][3][8] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[8].south_tx  ( .i(\s[3][3][8] ), .c(
        \s_tx[3][3][8] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[8].east_tx  ( .i(\e[3][3][8] ), .c(
        \e_tx[3][3][8] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[9].north_rx  ( .i(\s_tx[3][2][9] ), .o(
        \n[3][3][9] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[9].west_rx  ( .i(\e_tx[2][3][9] ), .o(
        \w[3][3][9] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[9].south_tx  ( .i(\s[3][3][9] ), .c(
        \s_tx[3][3][9] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[9].east_tx  ( .i(\e[3][3][9] ), .c(
        \e_tx[3][3][9] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[10].north_rx  ( .i(\s_tx[3][2][10] ), .o(
        \n[3][3][10] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[10].west_rx  ( .i(\e_tx[2][3][10] ), .o(
        \w[3][3][10] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[10].south_tx  ( .i(\s[3][3][10] ), .c(
        \s_tx[3][3][10] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[10].east_tx  ( .i(\e[3][3][10] ), .c(
        \e_tx[3][3][10] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[11].north_rx  ( .i(\s_tx[3][2][11] ), .o(
        \n[3][3][11] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[11].west_rx  ( .i(\e_tx[2][3][11] ), .o(
        \w[3][3][11] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[11].south_tx  ( .i(\s[3][3][11] ), .c(
        \s_tx[3][3][11] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[11].east_tx  ( .i(\e[3][3][11] ), .c(
        \e_tx[3][3][11] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[12].north_rx  ( .i(\s_tx[3][2][12] ), .o(
        \n[3][3][12] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[12].west_rx  ( .i(\e_tx[2][3][12] ), .o(
        \w[3][3][12] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[12].south_tx  ( .i(\s[3][3][12] ), .c(
        \s_tx[3][3][12] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[12].east_tx  ( .i(\e[3][3][12] ), .c(
        \e_tx[3][3][12] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[13].north_rx  ( .i(\s_tx[3][2][13] ), .o(
        \n[3][3][13] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[13].west_rx  ( .i(\e_tx[2][3][13] ), .o(
        \w[3][3][13] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[13].south_tx  ( .i(\s[3][3][13] ), .c(
        \s_tx[3][3][13] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[13].east_tx  ( .i(\e[3][3][13] ), .c(
        \e_tx[3][3][13] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[14].north_rx  ( .i(\s_tx[3][2][14] ), .o(
        \n[3][3][14] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[14].west_rx  ( .i(\e_tx[2][3][14] ), .o(
        \w[3][3][14] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[14].south_tx  ( .i(\s[3][3][14] ), .c(
        \s_tx[3][3][14] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[14].east_tx  ( .i(\e[3][3][14] ), .c(
        \e_tx[3][3][14] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[15].north_rx  ( .i(\s_tx[3][2][15] ), .o(
        \n[3][3][15] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[15].west_rx  ( .i(\e_tx[2][3][15] ), .o(
        \w[3][3][15] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[15].south_tx  ( .i(\s[3][3][15] ), .c(
        \s_tx[3][3][15] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[15].east_tx  ( .i(\e[3][3][15] ), .c(
        \e_tx[3][3][15] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[16].north_rx  ( .i(\s_tx[3][2][16] ), .o(
        \n[3][3][16] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[16].west_rx  ( .i(\e_tx[2][3][16] ), .o(
        \w[3][3][16] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[16].south_tx  ( .i(\s[3][3][16] ), .c(
        \s_tx[3][3][16] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[16].east_tx  ( .i(\e[3][3][16] ), .c(
        \e_tx[3][3][16] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[17].north_rx  ( .i(\s_tx[3][2][17] ), .o(
        \n[3][3][17] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[17].west_rx  ( .i(\e_tx[2][3][17] ), .o(
        \w[3][3][17] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[17].south_tx  ( .i(\s[3][3][17] ), .c(
        \s_tx[3][3][17] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[17].east_tx  ( .i(\e[3][3][17] ), .c(
        \e_tx[3][3][17] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[18].north_rx  ( .i(\s_tx[3][2][18] ), .o(
        \n[3][3][18] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[18].west_rx  ( .i(\e_tx[2][3][18] ), .o(
        \w[3][3][18] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[18].south_tx  ( .i(\s[3][3][18] ), .c(
        \s_tx[3][3][18] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[18].east_tx  ( .i(\e[3][3][18] ), .c(
        \e_tx[3][3][18] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[19].north_rx  ( .i(\s_tx[3][2][19] ), .o(
        \n[3][3][19] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[19].west_rx  ( .i(\e_tx[2][3][19] ), .o(
        \w[3][3][19] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[19].south_tx  ( .i(\s[3][3][19] ), .c(
        \s_tx[3][3][19] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[19].east_tx  ( .i(\e[3][3][19] ), .c(
        \e_tx[3][3][19] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[20].north_rx  ( .i(\s_tx[3][2][20] ), .o(
        \n[3][3][20] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[20].west_rx  ( .i(\e_tx[2][3][20] ), .o(
        \w[3][3][20] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[20].south_tx  ( .i(\s[3][3][20] ), .c(
        \s_tx[3][3][20] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[20].east_tx  ( .i(\e[3][3][20] ), .c(
        \e_tx[3][3][20] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[21].north_rx  ( .i(\s_tx[3][2][21] ), .o(
        \n[3][3][21] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[21].west_rx  ( .i(\e_tx[2][3][21] ), .o(
        \w[3][3][21] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[21].south_tx  ( .i(\s[3][3][21] ), .c(
        \s_tx[3][3][21] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[21].east_tx  ( .i(\e[3][3][21] ), .c(
        \e_tx[3][3][21] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[22].north_rx  ( .i(\s_tx[3][2][22] ), .o(
        \n[3][3][22] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[22].west_rx  ( .i(\e_tx[2][3][22] ), .o(
        \w[3][3][22] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[22].south_tx  ( .i(\s[3][3][22] ), .c(
        \s_tx[3][3][22] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[22].east_tx  ( .i(\e[3][3][22] ), .c(
        \e_tx[3][3][22] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[23].north_rx  ( .i(\s_tx[3][2][23] ), .o(
        \n[3][3][23] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[23].west_rx  ( .i(\e_tx[2][3][23] ), .o(
        \w[3][3][23] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[23].south_tx  ( .i(\s[3][3][23] ), .c(
        \s_tx[3][3][23] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[23].east_tx  ( .i(\e[3][3][23] ), .c(
        \e_tx[3][3][23] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[24].north_rx  ( .i(\s_tx[3][2][24] ), .o(
        \n[3][3][24] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[24].west_rx  ( .i(\e_tx[2][3][24] ), .o(
        \w[3][3][24] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[24].south_tx  ( .i(\s[3][3][24] ), .c(
        \s_tx[3][3][24] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[24].east_tx  ( .i(\e[3][3][24] ), .c(
        \e_tx[3][3][24] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[25].north_rx  ( .i(\s_tx[3][2][25] ), .o(
        \n[3][3][25] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[25].west_rx  ( .i(\e_tx[2][3][25] ), .o(
        \w[3][3][25] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[25].south_tx  ( .i(\s[3][3][25] ), .c(
        \s_tx[3][3][25] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[25].east_tx  ( .i(\e[3][3][25] ), .c(
        \e_tx[3][3][25] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[26].north_rx  ( .i(\s_tx[3][2][26] ), .o(
        \n[3][3][26] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[26].west_rx  ( .i(\e_tx[2][3][26] ), .o(
        \w[3][3][26] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[26].south_tx  ( .i(\s[3][3][26] ), .c(
        \s_tx[3][3][26] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[26].east_tx  ( .i(\e[3][3][26] ), .c(
        \e_tx[3][3][26] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[27].north_rx  ( .i(\s_tx[3][2][27] ), .o(
        \n[3][3][27] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[27].west_rx  ( .i(\e_tx[2][3][27] ), .o(
        \w[3][3][27] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[27].south_tx  ( .i(\s[3][3][27] ), .c(
        \s_tx[3][3][27] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[27].east_tx  ( .i(\e[3][3][27] ), .c(
        \e_tx[3][3][27] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[28].north_rx  ( .i(\s_tx[3][2][28] ), .o(
        \n[3][3][28] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[28].west_rx  ( .i(\e_tx[2][3][28] ), .o(
        \w[3][3][28] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[28].south_tx  ( .i(\s[3][3][28] ), .c(
        \s_tx[3][3][28] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[28].east_tx  ( .i(\e[3][3][28] ), .c(
        \e_tx[3][3][28] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[29].north_rx  ( .i(\s_tx[3][2][29] ), .o(
        \n[3][3][29] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[29].west_rx  ( .i(\e_tx[2][3][29] ), .o(
        \w[3][3][29] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[29].south_tx  ( .i(\s[3][3][29] ), .c(
        \s_tx[3][3][29] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[29].east_tx  ( .i(\e[3][3][29] ), .c(
        \e_tx[3][3][29] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[30].north_rx  ( .i(\s_tx[3][2][30] ), .o(
        \n[3][3][30] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[30].west_rx  ( .i(\e_tx[2][3][30] ), .o(
        \w[3][3][30] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[30].south_tx  ( .i(\s[3][3][30] ), .c(
        \s_tx[3][3][30] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[30].east_tx  ( .i(\e[3][3][30] ), .c(
        \e_tx[3][3][30] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[31].north_rx  ( .i(\s_tx[3][2][31] ), .o(
        \n[3][3][31] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[31].west_rx  ( .i(\e_tx[2][3][31] ), .o(
        \w[3][3][31] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[31].south_tx  ( .i(\s[3][3][31] ), .c(
        \s_tx[3][3][31] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[31].east_tx  ( .i(\e[3][3][31] ), .c(
        \e_tx[3][3][31] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[32].north_rx  ( .i(\s_tx[3][2][32] ), .o(
        \n[3][3][32] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[32].west_rx  ( .i(\e_tx[2][3][32] ), .o(
        \w[3][3][32] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[32].south_tx  ( .i(\s[3][3][32] ), .c(
        \s_tx[3][3][32] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[32].east_tx  ( .i(\e[3][3][32] ), .c(
        \e_tx[3][3][32] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[33].north_rx  ( .i(\s_tx[3][2][33] ), .o(
        \n[3][3][33] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[33].west_rx  ( .i(\e_tx[2][3][33] ), .o(
        \w[3][3][33] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[33].south_tx  ( .i(\s[3][3][33] ), .c(
        \s_tx[3][3][33] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[33].east_tx  ( .i(\e[3][3][33] ), .c(
        \e_tx[3][3][33] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[34].north_rx  ( .i(\s_tx[3][2][34] ), .o(
        \n[3][3][34] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[34].west_rx  ( .i(\e_tx[2][3][34] ), .o(
        \w[3][3][34] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[34].south_tx  ( .i(\s[3][3][34] ), .c(
        \s_tx[3][3][34] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[34].east_tx  ( .i(\e[3][3][34] ), .c(
        \e_tx[3][3][34] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[35].north_rx  ( .i(\s_tx[3][2][35] ), .o(
        \n[3][3][35] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[35].west_rx  ( .i(\e_tx[2][3][35] ), .o(
        \w[3][3][35] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[35].south_tx  ( .i(\s[3][3][35] ), .c(
        \s_tx[3][3][35] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[35].east_tx  ( .i(\e[3][3][35] ), .c(
        \e_tx[3][3][35] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[36].north_rx  ( .i(\s_tx[3][2][36] ), .o(
        \n[3][3][36] ) );
  low_swing_rx \ys[3].xs[3].msg_txrx[36].west_rx  ( .i(\e_tx[2][3][36] ), .o(
        \w[3][3][36] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[36].south_tx  ( .i(\s[3][3][36] ), .c(
        \s_tx[3][3][36] ) );
  low_swing_tx \ys[3].xs[3].msg_txrx[36].east_tx  ( .i(\e[3][3][36] ), .c(
        \e_tx[3][3][36] ) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X0_Y0_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[0].xs[0].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[0][0] ), .i_v(\i[0][0][36] ), 
        .i_x({\i[0][0][35] , \i[0][0][34] }), .i_y({\i[0][0][33] , 
        \i[0][0][32] }), .i_data({\i[0][0][31] , \i[0][0][30] , \i[0][0][29] , 
        \i[0][0][28] , \i[0][0][27] , \i[0][0][26] , \i[0][0][25] , 
        \i[0][0][24] , \i[0][0][23] , \i[0][0][22] , \i[0][0][21] , 
        \i[0][0][20] , \i[0][0][19] , \i[0][0][18] , \i[0][0][17] , 
        \i[0][0][16] , \i[0][0][15] , \i[0][0][14] , \i[0][0][13] , 
        \i[0][0][12] , \i[0][0][11] , \i[0][0][10] , \i[0][0][9] , 
        \i[0][0][8] , \i[0][0][7] , \i[0][0][6] , \i[0][0][5] , \i[0][0][4] , 
        \i[0][0][3] , \i[0][0][2] , \i[0][0][1] , \i[0][0][0] }), .o_v(out_v), 
        .o_x({\s[0][0][35] , \s[0][0][34] }), .o_y({\s[0][0][33] , 
        \s[0][0][32] }), .o_data(out) );
  torus_switch_X_W2_Y_W2_D_W32_X0_Y0 \ys[0].xs[0].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[0][0][36] ), .n_in_x({\n[0][0][35] , 
        \n[0][0][34] }), .n_in_y({\n[0][0][33] , \n[0][0][32] }), .n_in_data({
        \n[0][0][31] , \n[0][0][30] , \n[0][0][29] , \n[0][0][28] , 
        \n[0][0][27] , \n[0][0][26] , \n[0][0][25] , \n[0][0][24] , 
        \n[0][0][23] , \n[0][0][22] , \n[0][0][21] , \n[0][0][20] , 
        \n[0][0][19] , \n[0][0][18] , \n[0][0][17] , \n[0][0][16] , 
        \n[0][0][15] , \n[0][0][14] , \n[0][0][13] , \n[0][0][12] , 
        \n[0][0][11] , \n[0][0][10] , \n[0][0][9] , \n[0][0][8] , \n[0][0][7] , 
        \n[0][0][6] , \n[0][0][5] , \n[0][0][4] , \n[0][0][3] , \n[0][0][2] , 
        \n[0][0][1] , \n[0][0][0] }), .w_in_v(\w[0][0][36] ), .w_in_x({
        \w[0][0][35] , \w[0][0][34] }), .w_in_y({\w[0][0][33] , \w[0][0][32] }), .w_in_data({\w[0][0][31] , \w[0][0][30] , \w[0][0][29] , \w[0][0][28] , 
        \w[0][0][27] , \w[0][0][26] , \w[0][0][25] , \w[0][0][24] , 
        \w[0][0][23] , \w[0][0][22] , \w[0][0][21] , \w[0][0][20] , 
        \w[0][0][19] , \w[0][0][18] , \w[0][0][17] , \w[0][0][16] , 
        \w[0][0][15] , \w[0][0][14] , \w[0][0][13] , \w[0][0][12] , 
        \w[0][0][11] , \w[0][0][10] , \w[0][0][9] , \w[0][0][8] , \w[0][0][7] , 
        \w[0][0][6] , \w[0][0][5] , \w[0][0][4] , \w[0][0][3] , \w[0][0][2] , 
        \w[0][0][1] , \w[0][0][0] }), .i_v(\i[0][0][36] ), .i_x({\i[0][0][35] , 
        \i[0][0][34] }), .i_y({\i[0][0][33] , \i[0][0][32] }), .i_data({
        \i[0][0][31] , \i[0][0][30] , \i[0][0][29] , \i[0][0][28] , 
        \i[0][0][27] , \i[0][0][26] , \i[0][0][25] , \i[0][0][24] , 
        \i[0][0][23] , \i[0][0][22] , \i[0][0][21] , \i[0][0][20] , 
        \i[0][0][19] , \i[0][0][18] , \i[0][0][17] , \i[0][0][16] , 
        \i[0][0][15] , \i[0][0][14] , \i[0][0][13] , \i[0][0][12] , 
        \i[0][0][11] , \i[0][0][10] , \i[0][0][9] , \i[0][0][8] , \i[0][0][7] , 
        \i[0][0][6] , \i[0][0][5] , \i[0][0][4] , \i[0][0][3] , \i[0][0][2] , 
        \i[0][0][1] , \i[0][0][0] }), .i_ack(\i_ack[0][0] ), .o_v(out_v), 
        .s_out_v(\s[0][0][36] ), .s_out_x({\s[0][0][35] , \s[0][0][34] }), 
        .s_out_y({\s[0][0][33] , \s[0][0][32] }), .s_out_data(out), .e_out_v(
        \e[0][0][36] ), .e_out_x({\e[0][0][35] , \e[0][0][34] }), .e_out_y({
        \e[0][0][33] , \e[0][0][32] }), .e_out_data({\e[0][0][31] , 
        \e[0][0][30] , \e[0][0][29] , \e[0][0][28] , \e[0][0][27] , 
        \e[0][0][26] , \e[0][0][25] , \e[0][0][24] , \e[0][0][23] , 
        \e[0][0][22] , \e[0][0][21] , \e[0][0][20] , \e[0][0][19] , 
        \e[0][0][18] , \e[0][0][17] , \e[0][0][16] , \e[0][0][15] , 
        \e[0][0][14] , \e[0][0][13] , \e[0][0][12] , \e[0][0][11] , 
        \e[0][0][10] , \e[0][0][9] , \e[0][0][8] , \e[0][0][7] , \e[0][0][6] , 
        \e[0][0][5] , \e[0][0][4] , \e[0][0][3] , \e[0][0][2] , \e[0][0][1] , 
        \e[0][0][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X1_Y0_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[0].xs[1].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[1][0] ), .i_v(\i[1][0][36] ), 
        .i_x({\i[1][0][35] , \i[1][0][34] }), .i_y({\i[1][0][33] , 
        \i[1][0][32] }), .i_data({\i[1][0][31] , \i[1][0][30] , \i[1][0][29] , 
        \i[1][0][28] , \i[1][0][27] , \i[1][0][26] , \i[1][0][25] , 
        \i[1][0][24] , \i[1][0][23] , \i[1][0][22] , \i[1][0][21] , 
        \i[1][0][20] , \i[1][0][19] , \i[1][0][18] , \i[1][0][17] , 
        \i[1][0][16] , \i[1][0][15] , \i[1][0][14] , \i[1][0][13] , 
        \i[1][0][12] , \i[1][0][11] , \i[1][0][10] , \i[1][0][9] , 
        \i[1][0][8] , \i[1][0][7] , \i[1][0][6] , \i[1][0][5] , \i[1][0][4] , 
        \i[1][0][3] , \i[1][0][2] , \i[1][0][1] , \i[1][0][0] }), .o_v(
        \o_v[1][0] ), .o_x({\s[1][0][35] , \s[1][0][34] }), .o_y({
        \s[1][0][33] , \s[1][0][32] }), .o_data({\s[1][0][31] , \s[1][0][30] , 
        \s[1][0][29] , \s[1][0][28] , \s[1][0][27] , \s[1][0][26] , 
        \s[1][0][25] , \s[1][0][24] , \s[1][0][23] , \s[1][0][22] , 
        \s[1][0][21] , \s[1][0][20] , \s[1][0][19] , \s[1][0][18] , 
        \s[1][0][17] , \s[1][0][16] , \s[1][0][15] , \s[1][0][14] , 
        \s[1][0][13] , \s[1][0][12] , \s[1][0][11] , \s[1][0][10] , 
        \s[1][0][9] , \s[1][0][8] , \s[1][0][7] , \s[1][0][6] , \s[1][0][5] , 
        \s[1][0][4] , \s[1][0][3] , \s[1][0][2] , \s[1][0][1] , \s[1][0][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X1_Y0 \ys[0].xs[1].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[1][0][36] ), .n_in_x({\n[1][0][35] , 
        \n[1][0][34] }), .n_in_y({\n[1][0][33] , \n[1][0][32] }), .n_in_data({
        \n[1][0][31] , \n[1][0][30] , \n[1][0][29] , \n[1][0][28] , 
        \n[1][0][27] , \n[1][0][26] , \n[1][0][25] , \n[1][0][24] , 
        \n[1][0][23] , \n[1][0][22] , \n[1][0][21] , \n[1][0][20] , 
        \n[1][0][19] , \n[1][0][18] , \n[1][0][17] , \n[1][0][16] , 
        \n[1][0][15] , \n[1][0][14] , \n[1][0][13] , \n[1][0][12] , 
        \n[1][0][11] , \n[1][0][10] , \n[1][0][9] , \n[1][0][8] , \n[1][0][7] , 
        \n[1][0][6] , \n[1][0][5] , \n[1][0][4] , \n[1][0][3] , \n[1][0][2] , 
        \n[1][0][1] , \n[1][0][0] }), .w_in_v(\w[1][0][36] ), .w_in_x({
        \w[1][0][35] , \w[1][0][34] }), .w_in_y({\w[1][0][33] , \w[1][0][32] }), .w_in_data({\w[1][0][31] , \w[1][0][30] , \w[1][0][29] , \w[1][0][28] , 
        \w[1][0][27] , \w[1][0][26] , \w[1][0][25] , \w[1][0][24] , 
        \w[1][0][23] , \w[1][0][22] , \w[1][0][21] , \w[1][0][20] , 
        \w[1][0][19] , \w[1][0][18] , \w[1][0][17] , \w[1][0][16] , 
        \w[1][0][15] , \w[1][0][14] , \w[1][0][13] , \w[1][0][12] , 
        \w[1][0][11] , \w[1][0][10] , \w[1][0][9] , \w[1][0][8] , \w[1][0][7] , 
        \w[1][0][6] , \w[1][0][5] , \w[1][0][4] , \w[1][0][3] , \w[1][0][2] , 
        \w[1][0][1] , \w[1][0][0] }), .i_v(\i[1][0][36] ), .i_x({\i[1][0][35] , 
        \i[1][0][34] }), .i_y({\i[1][0][33] , \i[1][0][32] }), .i_data({
        \i[1][0][31] , \i[1][0][30] , \i[1][0][29] , \i[1][0][28] , 
        \i[1][0][27] , \i[1][0][26] , \i[1][0][25] , \i[1][0][24] , 
        \i[1][0][23] , \i[1][0][22] , \i[1][0][21] , \i[1][0][20] , 
        \i[1][0][19] , \i[1][0][18] , \i[1][0][17] , \i[1][0][16] , 
        \i[1][0][15] , \i[1][0][14] , \i[1][0][13] , \i[1][0][12] , 
        \i[1][0][11] , \i[1][0][10] , \i[1][0][9] , \i[1][0][8] , \i[1][0][7] , 
        \i[1][0][6] , \i[1][0][5] , \i[1][0][4] , \i[1][0][3] , \i[1][0][2] , 
        \i[1][0][1] , \i[1][0][0] }), .i_ack(\i_ack[1][0] ), .o_v(\o_v[1][0] ), 
        .s_out_v(\s[1][0][36] ), .s_out_x({\s[1][0][35] , \s[1][0][34] }), 
        .s_out_y({\s[1][0][33] , \s[1][0][32] }), .s_out_data({\s[1][0][31] , 
        \s[1][0][30] , \s[1][0][29] , \s[1][0][28] , \s[1][0][27] , 
        \s[1][0][26] , \s[1][0][25] , \s[1][0][24] , \s[1][0][23] , 
        \s[1][0][22] , \s[1][0][21] , \s[1][0][20] , \s[1][0][19] , 
        \s[1][0][18] , \s[1][0][17] , \s[1][0][16] , \s[1][0][15] , 
        \s[1][0][14] , \s[1][0][13] , \s[1][0][12] , \s[1][0][11] , 
        \s[1][0][10] , \s[1][0][9] , \s[1][0][8] , \s[1][0][7] , \s[1][0][6] , 
        \s[1][0][5] , \s[1][0][4] , \s[1][0][3] , \s[1][0][2] , \s[1][0][1] , 
        \s[1][0][0] }), .e_out_v(\e[1][0][36] ), .e_out_x({\e[1][0][35] , 
        \e[1][0][34] }), .e_out_y({\e[1][0][33] , \e[1][0][32] }), 
        .e_out_data({\e[1][0][31] , \e[1][0][30] , \e[1][0][29] , 
        \e[1][0][28] , \e[1][0][27] , \e[1][0][26] , \e[1][0][25] , 
        \e[1][0][24] , \e[1][0][23] , \e[1][0][22] , \e[1][0][21] , 
        \e[1][0][20] , \e[1][0][19] , \e[1][0][18] , \e[1][0][17] , 
        \e[1][0][16] , \e[1][0][15] , \e[1][0][14] , \e[1][0][13] , 
        \e[1][0][12] , \e[1][0][11] , \e[1][0][10] , \e[1][0][9] , 
        \e[1][0][8] , \e[1][0][7] , \e[1][0][6] , \e[1][0][5] , \e[1][0][4] , 
        \e[1][0][3] , \e[1][0][2] , \e[1][0][1] , \e[1][0][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X2_Y0_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[0].xs[2].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[2][0] ), .i_v(\i[2][0][36] ), 
        .i_x({\i[2][0][35] , \i[2][0][34] }), .i_y({\i[2][0][33] , 
        \i[2][0][32] }), .i_data({\i[2][0][31] , \i[2][0][30] , \i[2][0][29] , 
        \i[2][0][28] , \i[2][0][27] , \i[2][0][26] , \i[2][0][25] , 
        \i[2][0][24] , \i[2][0][23] , \i[2][0][22] , \i[2][0][21] , 
        \i[2][0][20] , \i[2][0][19] , \i[2][0][18] , \i[2][0][17] , 
        \i[2][0][16] , \i[2][0][15] , \i[2][0][14] , \i[2][0][13] , 
        \i[2][0][12] , \i[2][0][11] , \i[2][0][10] , \i[2][0][9] , 
        \i[2][0][8] , \i[2][0][7] , \i[2][0][6] , \i[2][0][5] , \i[2][0][4] , 
        \i[2][0][3] , \i[2][0][2] , \i[2][0][1] , \i[2][0][0] }), .o_v(
        \o_v[2][0] ), .o_x({\s[2][0][35] , \s[2][0][34] }), .o_y({
        \s[2][0][33] , \s[2][0][32] }), .o_data({\s[2][0][31] , \s[2][0][30] , 
        \s[2][0][29] , \s[2][0][28] , \s[2][0][27] , \s[2][0][26] , 
        \s[2][0][25] , \s[2][0][24] , \s[2][0][23] , \s[2][0][22] , 
        \s[2][0][21] , \s[2][0][20] , \s[2][0][19] , \s[2][0][18] , 
        \s[2][0][17] , \s[2][0][16] , \s[2][0][15] , \s[2][0][14] , 
        \s[2][0][13] , \s[2][0][12] , \s[2][0][11] , \s[2][0][10] , 
        \s[2][0][9] , \s[2][0][8] , \s[2][0][7] , \s[2][0][6] , \s[2][0][5] , 
        \s[2][0][4] , \s[2][0][3] , \s[2][0][2] , \s[2][0][1] , \s[2][0][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X2_Y0 \ys[0].xs[2].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[2][0][36] ), .n_in_x({\n[2][0][35] , 
        \n[2][0][34] }), .n_in_y({\n[2][0][33] , \n[2][0][32] }), .n_in_data({
        \n[2][0][31] , \n[2][0][30] , \n[2][0][29] , \n[2][0][28] , 
        \n[2][0][27] , \n[2][0][26] , \n[2][0][25] , \n[2][0][24] , 
        \n[2][0][23] , \n[2][0][22] , \n[2][0][21] , \n[2][0][20] , 
        \n[2][0][19] , \n[2][0][18] , \n[2][0][17] , \n[2][0][16] , 
        \n[2][0][15] , \n[2][0][14] , \n[2][0][13] , \n[2][0][12] , 
        \n[2][0][11] , \n[2][0][10] , \n[2][0][9] , \n[2][0][8] , \n[2][0][7] , 
        \n[2][0][6] , \n[2][0][5] , \n[2][0][4] , \n[2][0][3] , \n[2][0][2] , 
        \n[2][0][1] , \n[2][0][0] }), .w_in_v(\w[2][0][36] ), .w_in_x({
        \w[2][0][35] , \w[2][0][34] }), .w_in_y({\w[2][0][33] , \w[2][0][32] }), .w_in_data({\w[2][0][31] , \w[2][0][30] , \w[2][0][29] , \w[2][0][28] , 
        \w[2][0][27] , \w[2][0][26] , \w[2][0][25] , \w[2][0][24] , 
        \w[2][0][23] , \w[2][0][22] , \w[2][0][21] , \w[2][0][20] , 
        \w[2][0][19] , \w[2][0][18] , \w[2][0][17] , \w[2][0][16] , 
        \w[2][0][15] , \w[2][0][14] , \w[2][0][13] , \w[2][0][12] , 
        \w[2][0][11] , \w[2][0][10] , \w[2][0][9] , \w[2][0][8] , \w[2][0][7] , 
        \w[2][0][6] , \w[2][0][5] , \w[2][0][4] , \w[2][0][3] , \w[2][0][2] , 
        \w[2][0][1] , \w[2][0][0] }), .i_v(\i[2][0][36] ), .i_x({\i[2][0][35] , 
        \i[2][0][34] }), .i_y({\i[2][0][33] , \i[2][0][32] }), .i_data({
        \i[2][0][31] , \i[2][0][30] , \i[2][0][29] , \i[2][0][28] , 
        \i[2][0][27] , \i[2][0][26] , \i[2][0][25] , \i[2][0][24] , 
        \i[2][0][23] , \i[2][0][22] , \i[2][0][21] , \i[2][0][20] , 
        \i[2][0][19] , \i[2][0][18] , \i[2][0][17] , \i[2][0][16] , 
        \i[2][0][15] , \i[2][0][14] , \i[2][0][13] , \i[2][0][12] , 
        \i[2][0][11] , \i[2][0][10] , \i[2][0][9] , \i[2][0][8] , \i[2][0][7] , 
        \i[2][0][6] , \i[2][0][5] , \i[2][0][4] , \i[2][0][3] , \i[2][0][2] , 
        \i[2][0][1] , \i[2][0][0] }), .i_ack(\i_ack[2][0] ), .o_v(\o_v[2][0] ), 
        .s_out_v(\s[2][0][36] ), .s_out_x({\s[2][0][35] , \s[2][0][34] }), 
        .s_out_y({\s[2][0][33] , \s[2][0][32] }), .s_out_data({\s[2][0][31] , 
        \s[2][0][30] , \s[2][0][29] , \s[2][0][28] , \s[2][0][27] , 
        \s[2][0][26] , \s[2][0][25] , \s[2][0][24] , \s[2][0][23] , 
        \s[2][0][22] , \s[2][0][21] , \s[2][0][20] , \s[2][0][19] , 
        \s[2][0][18] , \s[2][0][17] , \s[2][0][16] , \s[2][0][15] , 
        \s[2][0][14] , \s[2][0][13] , \s[2][0][12] , \s[2][0][11] , 
        \s[2][0][10] , \s[2][0][9] , \s[2][0][8] , \s[2][0][7] , \s[2][0][6] , 
        \s[2][0][5] , \s[2][0][4] , \s[2][0][3] , \s[2][0][2] , \s[2][0][1] , 
        \s[2][0][0] }), .e_out_v(\e[2][0][36] ), .e_out_x({\e[2][0][35] , 
        \e[2][0][34] }), .e_out_y({\e[2][0][33] , \e[2][0][32] }), 
        .e_out_data({\e[2][0][31] , \e[2][0][30] , \e[2][0][29] , 
        \e[2][0][28] , \e[2][0][27] , \e[2][0][26] , \e[2][0][25] , 
        \e[2][0][24] , \e[2][0][23] , \e[2][0][22] , \e[2][0][21] , 
        \e[2][0][20] , \e[2][0][19] , \e[2][0][18] , \e[2][0][17] , 
        \e[2][0][16] , \e[2][0][15] , \e[2][0][14] , \e[2][0][13] , 
        \e[2][0][12] , \e[2][0][11] , \e[2][0][10] , \e[2][0][9] , 
        \e[2][0][8] , \e[2][0][7] , \e[2][0][6] , \e[2][0][5] , \e[2][0][4] , 
        \e[2][0][3] , \e[2][0][2] , \e[2][0][1] , \e[2][0][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X3_Y0_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[0].xs[3].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[3][0] ), .i_v(\i[3][0][36] ), 
        .i_x({\i[3][0][35] , \i[3][0][34] }), .i_y({\i[3][0][33] , 
        \i[3][0][32] }), .i_data({\i[3][0][31] , \i[3][0][30] , \i[3][0][29] , 
        \i[3][0][28] , \i[3][0][27] , \i[3][0][26] , \i[3][0][25] , 
        \i[3][0][24] , \i[3][0][23] , \i[3][0][22] , \i[3][0][21] , 
        \i[3][0][20] , \i[3][0][19] , \i[3][0][18] , \i[3][0][17] , 
        \i[3][0][16] , \i[3][0][15] , \i[3][0][14] , \i[3][0][13] , 
        \i[3][0][12] , \i[3][0][11] , \i[3][0][10] , \i[3][0][9] , 
        \i[3][0][8] , \i[3][0][7] , \i[3][0][6] , \i[3][0][5] , \i[3][0][4] , 
        \i[3][0][3] , \i[3][0][2] , \i[3][0][1] , \i[3][0][0] }), .o_v(
        \o_v[3][0] ), .o_x({\s[3][0][35] , \s[3][0][34] }), .o_y({
        \s[3][0][33] , \s[3][0][32] }), .o_data({\s[3][0][31] , \s[3][0][30] , 
        \s[3][0][29] , \s[3][0][28] , \s[3][0][27] , \s[3][0][26] , 
        \s[3][0][25] , \s[3][0][24] , \s[3][0][23] , \s[3][0][22] , 
        \s[3][0][21] , \s[3][0][20] , \s[3][0][19] , \s[3][0][18] , 
        \s[3][0][17] , \s[3][0][16] , \s[3][0][15] , \s[3][0][14] , 
        \s[3][0][13] , \s[3][0][12] , \s[3][0][11] , \s[3][0][10] , 
        \s[3][0][9] , \s[3][0][8] , \s[3][0][7] , \s[3][0][6] , \s[3][0][5] , 
        \s[3][0][4] , \s[3][0][3] , \s[3][0][2] , \s[3][0][1] , \s[3][0][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X3_Y0 \ys[0].xs[3].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[3][0][36] ), .n_in_x({\n[3][0][35] , 
        \n[3][0][34] }), .n_in_y({\n[3][0][33] , \n[3][0][32] }), .n_in_data({
        \n[3][0][31] , \n[3][0][30] , \n[3][0][29] , \n[3][0][28] , 
        \n[3][0][27] , \n[3][0][26] , \n[3][0][25] , \n[3][0][24] , 
        \n[3][0][23] , \n[3][0][22] , \n[3][0][21] , \n[3][0][20] , 
        \n[3][0][19] , \n[3][0][18] , \n[3][0][17] , \n[3][0][16] , 
        \n[3][0][15] , \n[3][0][14] , \n[3][0][13] , \n[3][0][12] , 
        \n[3][0][11] , \n[3][0][10] , \n[3][0][9] , \n[3][0][8] , \n[3][0][7] , 
        \n[3][0][6] , \n[3][0][5] , \n[3][0][4] , \n[3][0][3] , \n[3][0][2] , 
        \n[3][0][1] , \n[3][0][0] }), .w_in_v(\w[3][0][36] ), .w_in_x({
        \w[3][0][35] , \w[3][0][34] }), .w_in_y({\w[3][0][33] , \w[3][0][32] }), .w_in_data({\w[3][0][31] , \w[3][0][30] , \w[3][0][29] , \w[3][0][28] , 
        \w[3][0][27] , \w[3][0][26] , \w[3][0][25] , \w[3][0][24] , 
        \w[3][0][23] , \w[3][0][22] , \w[3][0][21] , \w[3][0][20] , 
        \w[3][0][19] , \w[3][0][18] , \w[3][0][17] , \w[3][0][16] , 
        \w[3][0][15] , \w[3][0][14] , \w[3][0][13] , \w[3][0][12] , 
        \w[3][0][11] , \w[3][0][10] , \w[3][0][9] , \w[3][0][8] , \w[3][0][7] , 
        \w[3][0][6] , \w[3][0][5] , \w[3][0][4] , \w[3][0][3] , \w[3][0][2] , 
        \w[3][0][1] , \w[3][0][0] }), .i_v(\i[3][0][36] ), .i_x({\i[3][0][35] , 
        \i[3][0][34] }), .i_y({\i[3][0][33] , \i[3][0][32] }), .i_data({
        \i[3][0][31] , \i[3][0][30] , \i[3][0][29] , \i[3][0][28] , 
        \i[3][0][27] , \i[3][0][26] , \i[3][0][25] , \i[3][0][24] , 
        \i[3][0][23] , \i[3][0][22] , \i[3][0][21] , \i[3][0][20] , 
        \i[3][0][19] , \i[3][0][18] , \i[3][0][17] , \i[3][0][16] , 
        \i[3][0][15] , \i[3][0][14] , \i[3][0][13] , \i[3][0][12] , 
        \i[3][0][11] , \i[3][0][10] , \i[3][0][9] , \i[3][0][8] , \i[3][0][7] , 
        \i[3][0][6] , \i[3][0][5] , \i[3][0][4] , \i[3][0][3] , \i[3][0][2] , 
        \i[3][0][1] , \i[3][0][0] }), .i_ack(\i_ack[3][0] ), .o_v(\o_v[3][0] ), 
        .s_out_v(\s[3][0][36] ), .s_out_x({\s[3][0][35] , \s[3][0][34] }), 
        .s_out_y({\s[3][0][33] , \s[3][0][32] }), .s_out_data({\s[3][0][31] , 
        \s[3][0][30] , \s[3][0][29] , \s[3][0][28] , \s[3][0][27] , 
        \s[3][0][26] , \s[3][0][25] , \s[3][0][24] , \s[3][0][23] , 
        \s[3][0][22] , \s[3][0][21] , \s[3][0][20] , \s[3][0][19] , 
        \s[3][0][18] , \s[3][0][17] , \s[3][0][16] , \s[3][0][15] , 
        \s[3][0][14] , \s[3][0][13] , \s[3][0][12] , \s[3][0][11] , 
        \s[3][0][10] , \s[3][0][9] , \s[3][0][8] , \s[3][0][7] , \s[3][0][6] , 
        \s[3][0][5] , \s[3][0][4] , \s[3][0][3] , \s[3][0][2] , \s[3][0][1] , 
        \s[3][0][0] }), .e_out_v(\e[3][0][36] ), .e_out_x({\e[3][0][35] , 
        \e[3][0][34] }), .e_out_y({\e[3][0][33] , \e[3][0][32] }), 
        .e_out_data({\e[3][0][31] , \e[3][0][30] , \e[3][0][29] , 
        \e[3][0][28] , \e[3][0][27] , \e[3][0][26] , \e[3][0][25] , 
        \e[3][0][24] , \e[3][0][23] , \e[3][0][22] , \e[3][0][21] , 
        \e[3][0][20] , \e[3][0][19] , \e[3][0][18] , \e[3][0][17] , 
        \e[3][0][16] , \e[3][0][15] , \e[3][0][14] , \e[3][0][13] , 
        \e[3][0][12] , \e[3][0][11] , \e[3][0][10] , \e[3][0][9] , 
        \e[3][0][8] , \e[3][0][7] , \e[3][0][6] , \e[3][0][5] , \e[3][0][4] , 
        \e[3][0][3] , \e[3][0][2] , \e[3][0][1] , \e[3][0][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X0_Y1_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[1].xs[0].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[0][1] ), .i_v(\i[0][1][36] ), 
        .i_x({\i[0][1][35] , \i[0][1][34] }), .i_y({\i[0][1][33] , 
        \i[0][1][32] }), .i_data({\i[0][1][31] , \i[0][1][30] , \i[0][1][29] , 
        \i[0][1][28] , \i[0][1][27] , \i[0][1][26] , \i[0][1][25] , 
        \i[0][1][24] , \i[0][1][23] , \i[0][1][22] , \i[0][1][21] , 
        \i[0][1][20] , \i[0][1][19] , \i[0][1][18] , \i[0][1][17] , 
        \i[0][1][16] , \i[0][1][15] , \i[0][1][14] , \i[0][1][13] , 
        \i[0][1][12] , \i[0][1][11] , \i[0][1][10] , \i[0][1][9] , 
        \i[0][1][8] , \i[0][1][7] , \i[0][1][6] , \i[0][1][5] , \i[0][1][4] , 
        \i[0][1][3] , \i[0][1][2] , \i[0][1][1] , \i[0][1][0] }), .o_v(
        \o_v[0][1] ), .o_x({\s[0][1][35] , \s[0][1][34] }), .o_y({
        \s[0][1][33] , \s[0][1][32] }), .o_data({\s[0][1][31] , \s[0][1][30] , 
        \s[0][1][29] , \s[0][1][28] , \s[0][1][27] , \s[0][1][26] , 
        \s[0][1][25] , \s[0][1][24] , \s[0][1][23] , \s[0][1][22] , 
        \s[0][1][21] , \s[0][1][20] , \s[0][1][19] , \s[0][1][18] , 
        \s[0][1][17] , \s[0][1][16] , \s[0][1][15] , \s[0][1][14] , 
        \s[0][1][13] , \s[0][1][12] , \s[0][1][11] , \s[0][1][10] , 
        \s[0][1][9] , \s[0][1][8] , \s[0][1][7] , \s[0][1][6] , \s[0][1][5] , 
        \s[0][1][4] , \s[0][1][3] , \s[0][1][2] , \s[0][1][1] , \s[0][1][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X0_Y1 \ys[1].xs[0].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[0][1][36] ), .n_in_x({\n[0][1][35] , 
        \n[0][1][34] }), .n_in_y({\n[0][1][33] , \n[0][1][32] }), .n_in_data({
        \n[0][1][31] , \n[0][1][30] , \n[0][1][29] , \n[0][1][28] , 
        \n[0][1][27] , \n[0][1][26] , \n[0][1][25] , \n[0][1][24] , 
        \n[0][1][23] , \n[0][1][22] , \n[0][1][21] , \n[0][1][20] , 
        \n[0][1][19] , \n[0][1][18] , \n[0][1][17] , \n[0][1][16] , 
        \n[0][1][15] , \n[0][1][14] , \n[0][1][13] , \n[0][1][12] , 
        \n[0][1][11] , \n[0][1][10] , \n[0][1][9] , \n[0][1][8] , \n[0][1][7] , 
        \n[0][1][6] , \n[0][1][5] , \n[0][1][4] , \n[0][1][3] , \n[0][1][2] , 
        \n[0][1][1] , \n[0][1][0] }), .w_in_v(\w[0][1][36] ), .w_in_x({
        \w[0][1][35] , \w[0][1][34] }), .w_in_y({\w[0][1][33] , \w[0][1][32] }), .w_in_data({\w[0][1][31] , \w[0][1][30] , \w[0][1][29] , \w[0][1][28] , 
        \w[0][1][27] , \w[0][1][26] , \w[0][1][25] , \w[0][1][24] , 
        \w[0][1][23] , \w[0][1][22] , \w[0][1][21] , \w[0][1][20] , 
        \w[0][1][19] , \w[0][1][18] , \w[0][1][17] , \w[0][1][16] , 
        \w[0][1][15] , \w[0][1][14] , \w[0][1][13] , \w[0][1][12] , 
        \w[0][1][11] , \w[0][1][10] , \w[0][1][9] , \w[0][1][8] , \w[0][1][7] , 
        \w[0][1][6] , \w[0][1][5] , \w[0][1][4] , \w[0][1][3] , \w[0][1][2] , 
        \w[0][1][1] , \w[0][1][0] }), .i_v(\i[0][1][36] ), .i_x({\i[0][1][35] , 
        \i[0][1][34] }), .i_y({\i[0][1][33] , \i[0][1][32] }), .i_data({
        \i[0][1][31] , \i[0][1][30] , \i[0][1][29] , \i[0][1][28] , 
        \i[0][1][27] , \i[0][1][26] , \i[0][1][25] , \i[0][1][24] , 
        \i[0][1][23] , \i[0][1][22] , \i[0][1][21] , \i[0][1][20] , 
        \i[0][1][19] , \i[0][1][18] , \i[0][1][17] , \i[0][1][16] , 
        \i[0][1][15] , \i[0][1][14] , \i[0][1][13] , \i[0][1][12] , 
        \i[0][1][11] , \i[0][1][10] , \i[0][1][9] , \i[0][1][8] , \i[0][1][7] , 
        \i[0][1][6] , \i[0][1][5] , \i[0][1][4] , \i[0][1][3] , \i[0][1][2] , 
        \i[0][1][1] , \i[0][1][0] }), .i_ack(\i_ack[0][1] ), .o_v(\o_v[0][1] ), 
        .s_out_v(\s[0][1][36] ), .s_out_x({\s[0][1][35] , \s[0][1][34] }), 
        .s_out_y({\s[0][1][33] , \s[0][1][32] }), .s_out_data({\s[0][1][31] , 
        \s[0][1][30] , \s[0][1][29] , \s[0][1][28] , \s[0][1][27] , 
        \s[0][1][26] , \s[0][1][25] , \s[0][1][24] , \s[0][1][23] , 
        \s[0][1][22] , \s[0][1][21] , \s[0][1][20] , \s[0][1][19] , 
        \s[0][1][18] , \s[0][1][17] , \s[0][1][16] , \s[0][1][15] , 
        \s[0][1][14] , \s[0][1][13] , \s[0][1][12] , \s[0][1][11] , 
        \s[0][1][10] , \s[0][1][9] , \s[0][1][8] , \s[0][1][7] , \s[0][1][6] , 
        \s[0][1][5] , \s[0][1][4] , \s[0][1][3] , \s[0][1][2] , \s[0][1][1] , 
        \s[0][1][0] }), .e_out_v(\e[0][1][36] ), .e_out_x({\e[0][1][35] , 
        \e[0][1][34] }), .e_out_y({\e[0][1][33] , \e[0][1][32] }), 
        .e_out_data({\e[0][1][31] , \e[0][1][30] , \e[0][1][29] , 
        \e[0][1][28] , \e[0][1][27] , \e[0][1][26] , \e[0][1][25] , 
        \e[0][1][24] , \e[0][1][23] , \e[0][1][22] , \e[0][1][21] , 
        \e[0][1][20] , \e[0][1][19] , \e[0][1][18] , \e[0][1][17] , 
        \e[0][1][16] , \e[0][1][15] , \e[0][1][14] , \e[0][1][13] , 
        \e[0][1][12] , \e[0][1][11] , \e[0][1][10] , \e[0][1][9] , 
        \e[0][1][8] , \e[0][1][7] , \e[0][1][6] , \e[0][1][5] , \e[0][1][4] , 
        \e[0][1][3] , \e[0][1][2] , \e[0][1][1] , \e[0][1][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X1_Y1_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[1].xs[1].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[1][1] ), .i_v(\i[1][1][36] ), 
        .i_x({\i[1][1][35] , \i[1][1][34] }), .i_y({\i[1][1][33] , 
        \i[1][1][32] }), .i_data({\i[1][1][31] , \i[1][1][30] , \i[1][1][29] , 
        \i[1][1][28] , \i[1][1][27] , \i[1][1][26] , \i[1][1][25] , 
        \i[1][1][24] , \i[1][1][23] , \i[1][1][22] , \i[1][1][21] , 
        \i[1][1][20] , \i[1][1][19] , \i[1][1][18] , \i[1][1][17] , 
        \i[1][1][16] , \i[1][1][15] , \i[1][1][14] , \i[1][1][13] , 
        \i[1][1][12] , \i[1][1][11] , \i[1][1][10] , \i[1][1][9] , 
        \i[1][1][8] , \i[1][1][7] , \i[1][1][6] , \i[1][1][5] , \i[1][1][4] , 
        \i[1][1][3] , \i[1][1][2] , \i[1][1][1] , \i[1][1][0] }), .o_v(
        \o_v[1][1] ), .o_x({\s[1][1][35] , \s[1][1][34] }), .o_y({
        \s[1][1][33] , \s[1][1][32] }), .o_data({\s[1][1][31] , \s[1][1][30] , 
        \s[1][1][29] , \s[1][1][28] , \s[1][1][27] , \s[1][1][26] , 
        \s[1][1][25] , \s[1][1][24] , \s[1][1][23] , \s[1][1][22] , 
        \s[1][1][21] , \s[1][1][20] , \s[1][1][19] , \s[1][1][18] , 
        \s[1][1][17] , \s[1][1][16] , \s[1][1][15] , \s[1][1][14] , 
        \s[1][1][13] , \s[1][1][12] , \s[1][1][11] , \s[1][1][10] , 
        \s[1][1][9] , \s[1][1][8] , \s[1][1][7] , \s[1][1][6] , \s[1][1][5] , 
        \s[1][1][4] , \s[1][1][3] , \s[1][1][2] , \s[1][1][1] , \s[1][1][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X1_Y1 \ys[1].xs[1].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[1][1][36] ), .n_in_x({\n[1][1][35] , 
        \n[1][1][34] }), .n_in_y({\n[1][1][33] , \n[1][1][32] }), .n_in_data({
        \n[1][1][31] , \n[1][1][30] , \n[1][1][29] , \n[1][1][28] , 
        \n[1][1][27] , \n[1][1][26] , \n[1][1][25] , \n[1][1][24] , 
        \n[1][1][23] , \n[1][1][22] , \n[1][1][21] , \n[1][1][20] , 
        \n[1][1][19] , \n[1][1][18] , \n[1][1][17] , \n[1][1][16] , 
        \n[1][1][15] , \n[1][1][14] , \n[1][1][13] , \n[1][1][12] , 
        \n[1][1][11] , \n[1][1][10] , \n[1][1][9] , \n[1][1][8] , \n[1][1][7] , 
        \n[1][1][6] , \n[1][1][5] , \n[1][1][4] , \n[1][1][3] , \n[1][1][2] , 
        \n[1][1][1] , \n[1][1][0] }), .w_in_v(\w[1][1][36] ), .w_in_x({
        \w[1][1][35] , \w[1][1][34] }), .w_in_y({\w[1][1][33] , \w[1][1][32] }), .w_in_data({\w[1][1][31] , \w[1][1][30] , \w[1][1][29] , \w[1][1][28] , 
        \w[1][1][27] , \w[1][1][26] , \w[1][1][25] , \w[1][1][24] , 
        \w[1][1][23] , \w[1][1][22] , \w[1][1][21] , \w[1][1][20] , 
        \w[1][1][19] , \w[1][1][18] , \w[1][1][17] , \w[1][1][16] , 
        \w[1][1][15] , \w[1][1][14] , \w[1][1][13] , \w[1][1][12] , 
        \w[1][1][11] , \w[1][1][10] , \w[1][1][9] , \w[1][1][8] , \w[1][1][7] , 
        \w[1][1][6] , \w[1][1][5] , \w[1][1][4] , \w[1][1][3] , \w[1][1][2] , 
        \w[1][1][1] , \w[1][1][0] }), .i_v(\i[1][1][36] ), .i_x({\i[1][1][35] , 
        \i[1][1][34] }), .i_y({\i[1][1][33] , \i[1][1][32] }), .i_data({
        \i[1][1][31] , \i[1][1][30] , \i[1][1][29] , \i[1][1][28] , 
        \i[1][1][27] , \i[1][1][26] , \i[1][1][25] , \i[1][1][24] , 
        \i[1][1][23] , \i[1][1][22] , \i[1][1][21] , \i[1][1][20] , 
        \i[1][1][19] , \i[1][1][18] , \i[1][1][17] , \i[1][1][16] , 
        \i[1][1][15] , \i[1][1][14] , \i[1][1][13] , \i[1][1][12] , 
        \i[1][1][11] , \i[1][1][10] , \i[1][1][9] , \i[1][1][8] , \i[1][1][7] , 
        \i[1][1][6] , \i[1][1][5] , \i[1][1][4] , \i[1][1][3] , \i[1][1][2] , 
        \i[1][1][1] , \i[1][1][0] }), .i_ack(\i_ack[1][1] ), .o_v(\o_v[1][1] ), 
        .s_out_v(\s[1][1][36] ), .s_out_x({\s[1][1][35] , \s[1][1][34] }), 
        .s_out_y({\s[1][1][33] , \s[1][1][32] }), .s_out_data({\s[1][1][31] , 
        \s[1][1][30] , \s[1][1][29] , \s[1][1][28] , \s[1][1][27] , 
        \s[1][1][26] , \s[1][1][25] , \s[1][1][24] , \s[1][1][23] , 
        \s[1][1][22] , \s[1][1][21] , \s[1][1][20] , \s[1][1][19] , 
        \s[1][1][18] , \s[1][1][17] , \s[1][1][16] , \s[1][1][15] , 
        \s[1][1][14] , \s[1][1][13] , \s[1][1][12] , \s[1][1][11] , 
        \s[1][1][10] , \s[1][1][9] , \s[1][1][8] , \s[1][1][7] , \s[1][1][6] , 
        \s[1][1][5] , \s[1][1][4] , \s[1][1][3] , \s[1][1][2] , \s[1][1][1] , 
        \s[1][1][0] }), .e_out_v(\e[1][1][36] ), .e_out_x({\e[1][1][35] , 
        \e[1][1][34] }), .e_out_y({\e[1][1][33] , \e[1][1][32] }), 
        .e_out_data({\e[1][1][31] , \e[1][1][30] , \e[1][1][29] , 
        \e[1][1][28] , \e[1][1][27] , \e[1][1][26] , \e[1][1][25] , 
        \e[1][1][24] , \e[1][1][23] , \e[1][1][22] , \e[1][1][21] , 
        \e[1][1][20] , \e[1][1][19] , \e[1][1][18] , \e[1][1][17] , 
        \e[1][1][16] , \e[1][1][15] , \e[1][1][14] , \e[1][1][13] , 
        \e[1][1][12] , \e[1][1][11] , \e[1][1][10] , \e[1][1][9] , 
        \e[1][1][8] , \e[1][1][7] , \e[1][1][6] , \e[1][1][5] , \e[1][1][4] , 
        \e[1][1][3] , \e[1][1][2] , \e[1][1][1] , \e[1][1][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X2_Y1_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[1].xs[2].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[2][1] ), .i_v(\i[2][1][36] ), 
        .i_x({\i[2][1][35] , \i[2][1][34] }), .i_y({\i[2][1][33] , 
        \i[2][1][32] }), .i_data({\i[2][1][31] , \i[2][1][30] , \i[2][1][29] , 
        \i[2][1][28] , \i[2][1][27] , \i[2][1][26] , \i[2][1][25] , 
        \i[2][1][24] , \i[2][1][23] , \i[2][1][22] , \i[2][1][21] , 
        \i[2][1][20] , \i[2][1][19] , \i[2][1][18] , \i[2][1][17] , 
        \i[2][1][16] , \i[2][1][15] , \i[2][1][14] , \i[2][1][13] , 
        \i[2][1][12] , \i[2][1][11] , \i[2][1][10] , \i[2][1][9] , 
        \i[2][1][8] , \i[2][1][7] , \i[2][1][6] , \i[2][1][5] , \i[2][1][4] , 
        \i[2][1][3] , \i[2][1][2] , \i[2][1][1] , \i[2][1][0] }), .o_v(
        \o_v[2][1] ), .o_x({\s[2][1][35] , \s[2][1][34] }), .o_y({
        \s[2][1][33] , \s[2][1][32] }), .o_data({\s[2][1][31] , \s[2][1][30] , 
        \s[2][1][29] , \s[2][1][28] , \s[2][1][27] , \s[2][1][26] , 
        \s[2][1][25] , \s[2][1][24] , \s[2][1][23] , \s[2][1][22] , 
        \s[2][1][21] , \s[2][1][20] , \s[2][1][19] , \s[2][1][18] , 
        \s[2][1][17] , \s[2][1][16] , \s[2][1][15] , \s[2][1][14] , 
        \s[2][1][13] , \s[2][1][12] , \s[2][1][11] , \s[2][1][10] , 
        \s[2][1][9] , \s[2][1][8] , \s[2][1][7] , \s[2][1][6] , \s[2][1][5] , 
        \s[2][1][4] , \s[2][1][3] , \s[2][1][2] , \s[2][1][1] , \s[2][1][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X2_Y1 \ys[1].xs[2].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[2][1][36] ), .n_in_x({\n[2][1][35] , 
        \n[2][1][34] }), .n_in_y({\n[2][1][33] , \n[2][1][32] }), .n_in_data({
        \n[2][1][31] , \n[2][1][30] , \n[2][1][29] , \n[2][1][28] , 
        \n[2][1][27] , \n[2][1][26] , \n[2][1][25] , \n[2][1][24] , 
        \n[2][1][23] , \n[2][1][22] , \n[2][1][21] , \n[2][1][20] , 
        \n[2][1][19] , \n[2][1][18] , \n[2][1][17] , \n[2][1][16] , 
        \n[2][1][15] , \n[2][1][14] , \n[2][1][13] , \n[2][1][12] , 
        \n[2][1][11] , \n[2][1][10] , \n[2][1][9] , \n[2][1][8] , \n[2][1][7] , 
        \n[2][1][6] , \n[2][1][5] , \n[2][1][4] , \n[2][1][3] , \n[2][1][2] , 
        \n[2][1][1] , \n[2][1][0] }), .w_in_v(\w[2][1][36] ), .w_in_x({
        \w[2][1][35] , \w[2][1][34] }), .w_in_y({\w[2][1][33] , \w[2][1][32] }), .w_in_data({\w[2][1][31] , \w[2][1][30] , \w[2][1][29] , \w[2][1][28] , 
        \w[2][1][27] , \w[2][1][26] , \w[2][1][25] , \w[2][1][24] , 
        \w[2][1][23] , \w[2][1][22] , \w[2][1][21] , \w[2][1][20] , 
        \w[2][1][19] , \w[2][1][18] , \w[2][1][17] , \w[2][1][16] , 
        \w[2][1][15] , \w[2][1][14] , \w[2][1][13] , \w[2][1][12] , 
        \w[2][1][11] , \w[2][1][10] , \w[2][1][9] , \w[2][1][8] , \w[2][1][7] , 
        \w[2][1][6] , \w[2][1][5] , \w[2][1][4] , \w[2][1][3] , \w[2][1][2] , 
        \w[2][1][1] , \w[2][1][0] }), .i_v(\i[2][1][36] ), .i_x({\i[2][1][35] , 
        \i[2][1][34] }), .i_y({\i[2][1][33] , \i[2][1][32] }), .i_data({
        \i[2][1][31] , \i[2][1][30] , \i[2][1][29] , \i[2][1][28] , 
        \i[2][1][27] , \i[2][1][26] , \i[2][1][25] , \i[2][1][24] , 
        \i[2][1][23] , \i[2][1][22] , \i[2][1][21] , \i[2][1][20] , 
        \i[2][1][19] , \i[2][1][18] , \i[2][1][17] , \i[2][1][16] , 
        \i[2][1][15] , \i[2][1][14] , \i[2][1][13] , \i[2][1][12] , 
        \i[2][1][11] , \i[2][1][10] , \i[2][1][9] , \i[2][1][8] , \i[2][1][7] , 
        \i[2][1][6] , \i[2][1][5] , \i[2][1][4] , \i[2][1][3] , \i[2][1][2] , 
        \i[2][1][1] , \i[2][1][0] }), .i_ack(\i_ack[2][1] ), .o_v(\o_v[2][1] ), 
        .s_out_v(\s[2][1][36] ), .s_out_x({\s[2][1][35] , \s[2][1][34] }), 
        .s_out_y({\s[2][1][33] , \s[2][1][32] }), .s_out_data({\s[2][1][31] , 
        \s[2][1][30] , \s[2][1][29] , \s[2][1][28] , \s[2][1][27] , 
        \s[2][1][26] , \s[2][1][25] , \s[2][1][24] , \s[2][1][23] , 
        \s[2][1][22] , \s[2][1][21] , \s[2][1][20] , \s[2][1][19] , 
        \s[2][1][18] , \s[2][1][17] , \s[2][1][16] , \s[2][1][15] , 
        \s[2][1][14] , \s[2][1][13] , \s[2][1][12] , \s[2][1][11] , 
        \s[2][1][10] , \s[2][1][9] , \s[2][1][8] , \s[2][1][7] , \s[2][1][6] , 
        \s[2][1][5] , \s[2][1][4] , \s[2][1][3] , \s[2][1][2] , \s[2][1][1] , 
        \s[2][1][0] }), .e_out_v(\e[2][1][36] ), .e_out_x({\e[2][1][35] , 
        \e[2][1][34] }), .e_out_y({\e[2][1][33] , \e[2][1][32] }), 
        .e_out_data({\e[2][1][31] , \e[2][1][30] , \e[2][1][29] , 
        \e[2][1][28] , \e[2][1][27] , \e[2][1][26] , \e[2][1][25] , 
        \e[2][1][24] , \e[2][1][23] , \e[2][1][22] , \e[2][1][21] , 
        \e[2][1][20] , \e[2][1][19] , \e[2][1][18] , \e[2][1][17] , 
        \e[2][1][16] , \e[2][1][15] , \e[2][1][14] , \e[2][1][13] , 
        \e[2][1][12] , \e[2][1][11] , \e[2][1][10] , \e[2][1][9] , 
        \e[2][1][8] , \e[2][1][7] , \e[2][1][6] , \e[2][1][5] , \e[2][1][4] , 
        \e[2][1][3] , \e[2][1][2] , \e[2][1][1] , \e[2][1][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X3_Y1_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[1].xs[3].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[3][1] ), .i_v(\i[3][1][36] ), 
        .i_x({\i[3][1][35] , \i[3][1][34] }), .i_y({\i[3][1][33] , 
        \i[3][1][32] }), .i_data({\i[3][1][31] , \i[3][1][30] , \i[3][1][29] , 
        \i[3][1][28] , \i[3][1][27] , \i[3][1][26] , \i[3][1][25] , 
        \i[3][1][24] , \i[3][1][23] , \i[3][1][22] , \i[3][1][21] , 
        \i[3][1][20] , \i[3][1][19] , \i[3][1][18] , \i[3][1][17] , 
        \i[3][1][16] , \i[3][1][15] , \i[3][1][14] , \i[3][1][13] , 
        \i[3][1][12] , \i[3][1][11] , \i[3][1][10] , \i[3][1][9] , 
        \i[3][1][8] , \i[3][1][7] , \i[3][1][6] , \i[3][1][5] , \i[3][1][4] , 
        \i[3][1][3] , \i[3][1][2] , \i[3][1][1] , \i[3][1][0] }), .o_v(
        \o_v[3][1] ), .o_x({\s[3][1][35] , \s[3][1][34] }), .o_y({
        \s[3][1][33] , \s[3][1][32] }), .o_data({\s[3][1][31] , \s[3][1][30] , 
        \s[3][1][29] , \s[3][1][28] , \s[3][1][27] , \s[3][1][26] , 
        \s[3][1][25] , \s[3][1][24] , \s[3][1][23] , \s[3][1][22] , 
        \s[3][1][21] , \s[3][1][20] , \s[3][1][19] , \s[3][1][18] , 
        \s[3][1][17] , \s[3][1][16] , \s[3][1][15] , \s[3][1][14] , 
        \s[3][1][13] , \s[3][1][12] , \s[3][1][11] , \s[3][1][10] , 
        \s[3][1][9] , \s[3][1][8] , \s[3][1][7] , \s[3][1][6] , \s[3][1][5] , 
        \s[3][1][4] , \s[3][1][3] , \s[3][1][2] , \s[3][1][1] , \s[3][1][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X3_Y1 \ys[1].xs[3].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[3][1][36] ), .n_in_x({\n[3][1][35] , 
        \n[3][1][34] }), .n_in_y({\n[3][1][33] , \n[3][1][32] }), .n_in_data({
        \n[3][1][31] , \n[3][1][30] , \n[3][1][29] , \n[3][1][28] , 
        \n[3][1][27] , \n[3][1][26] , \n[3][1][25] , \n[3][1][24] , 
        \n[3][1][23] , \n[3][1][22] , \n[3][1][21] , \n[3][1][20] , 
        \n[3][1][19] , \n[3][1][18] , \n[3][1][17] , \n[3][1][16] , 
        \n[3][1][15] , \n[3][1][14] , \n[3][1][13] , \n[3][1][12] , 
        \n[3][1][11] , \n[3][1][10] , \n[3][1][9] , \n[3][1][8] , \n[3][1][7] , 
        \n[3][1][6] , \n[3][1][5] , \n[3][1][4] , \n[3][1][3] , \n[3][1][2] , 
        \n[3][1][1] , \n[3][1][0] }), .w_in_v(\w[3][1][36] ), .w_in_x({
        \w[3][1][35] , \w[3][1][34] }), .w_in_y({\w[3][1][33] , \w[3][1][32] }), .w_in_data({\w[3][1][31] , \w[3][1][30] , \w[3][1][29] , \w[3][1][28] , 
        \w[3][1][27] , \w[3][1][26] , \w[3][1][25] , \w[3][1][24] , 
        \w[3][1][23] , \w[3][1][22] , \w[3][1][21] , \w[3][1][20] , 
        \w[3][1][19] , \w[3][1][18] , \w[3][1][17] , \w[3][1][16] , 
        \w[3][1][15] , \w[3][1][14] , \w[3][1][13] , \w[3][1][12] , 
        \w[3][1][11] , \w[3][1][10] , \w[3][1][9] , \w[3][1][8] , \w[3][1][7] , 
        \w[3][1][6] , \w[3][1][5] , \w[3][1][4] , \w[3][1][3] , \w[3][1][2] , 
        \w[3][1][1] , \w[3][1][0] }), .i_v(\i[3][1][36] ), .i_x({\i[3][1][35] , 
        \i[3][1][34] }), .i_y({\i[3][1][33] , \i[3][1][32] }), .i_data({
        \i[3][1][31] , \i[3][1][30] , \i[3][1][29] , \i[3][1][28] , 
        \i[3][1][27] , \i[3][1][26] , \i[3][1][25] , \i[3][1][24] , 
        \i[3][1][23] , \i[3][1][22] , \i[3][1][21] , \i[3][1][20] , 
        \i[3][1][19] , \i[3][1][18] , \i[3][1][17] , \i[3][1][16] , 
        \i[3][1][15] , \i[3][1][14] , \i[3][1][13] , \i[3][1][12] , 
        \i[3][1][11] , \i[3][1][10] , \i[3][1][9] , \i[3][1][8] , \i[3][1][7] , 
        \i[3][1][6] , \i[3][1][5] , \i[3][1][4] , \i[3][1][3] , \i[3][1][2] , 
        \i[3][1][1] , \i[3][1][0] }), .i_ack(\i_ack[3][1] ), .o_v(\o_v[3][1] ), 
        .s_out_v(\s[3][1][36] ), .s_out_x({\s[3][1][35] , \s[3][1][34] }), 
        .s_out_y({\s[3][1][33] , \s[3][1][32] }), .s_out_data({\s[3][1][31] , 
        \s[3][1][30] , \s[3][1][29] , \s[3][1][28] , \s[3][1][27] , 
        \s[3][1][26] , \s[3][1][25] , \s[3][1][24] , \s[3][1][23] , 
        \s[3][1][22] , \s[3][1][21] , \s[3][1][20] , \s[3][1][19] , 
        \s[3][1][18] , \s[3][1][17] , \s[3][1][16] , \s[3][1][15] , 
        \s[3][1][14] , \s[3][1][13] , \s[3][1][12] , \s[3][1][11] , 
        \s[3][1][10] , \s[3][1][9] , \s[3][1][8] , \s[3][1][7] , \s[3][1][6] , 
        \s[3][1][5] , \s[3][1][4] , \s[3][1][3] , \s[3][1][2] , \s[3][1][1] , 
        \s[3][1][0] }), .e_out_v(\e[3][1][36] ), .e_out_x({\e[3][1][35] , 
        \e[3][1][34] }), .e_out_y({\e[3][1][33] , \e[3][1][32] }), 
        .e_out_data({\e[3][1][31] , \e[3][1][30] , \e[3][1][29] , 
        \e[3][1][28] , \e[3][1][27] , \e[3][1][26] , \e[3][1][25] , 
        \e[3][1][24] , \e[3][1][23] , \e[3][1][22] , \e[3][1][21] , 
        \e[3][1][20] , \e[3][1][19] , \e[3][1][18] , \e[3][1][17] , 
        \e[3][1][16] , \e[3][1][15] , \e[3][1][14] , \e[3][1][13] , 
        \e[3][1][12] , \e[3][1][11] , \e[3][1][10] , \e[3][1][9] , 
        \e[3][1][8] , \e[3][1][7] , \e[3][1][6] , \e[3][1][5] , \e[3][1][4] , 
        \e[3][1][3] , \e[3][1][2] , \e[3][1][1] , \e[3][1][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X0_Y2_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[2].xs[0].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[0][2] ), .i_v(\i[0][2][36] ), 
        .i_x({\i[0][2][35] , \i[0][2][34] }), .i_y({\i[0][2][33] , 
        \i[0][2][32] }), .i_data({\i[0][2][31] , \i[0][2][30] , \i[0][2][29] , 
        \i[0][2][28] , \i[0][2][27] , \i[0][2][26] , \i[0][2][25] , 
        \i[0][2][24] , \i[0][2][23] , \i[0][2][22] , \i[0][2][21] , 
        \i[0][2][20] , \i[0][2][19] , \i[0][2][18] , \i[0][2][17] , 
        \i[0][2][16] , \i[0][2][15] , \i[0][2][14] , \i[0][2][13] , 
        \i[0][2][12] , \i[0][2][11] , \i[0][2][10] , \i[0][2][9] , 
        \i[0][2][8] , \i[0][2][7] , \i[0][2][6] , \i[0][2][5] , \i[0][2][4] , 
        \i[0][2][3] , \i[0][2][2] , \i[0][2][1] , \i[0][2][0] }), .o_v(
        \o_v[0][2] ), .o_x({\s[0][2][35] , \s[0][2][34] }), .o_y({
        \s[0][2][33] , \s[0][2][32] }), .o_data({\s[0][2][31] , \s[0][2][30] , 
        \s[0][2][29] , \s[0][2][28] , \s[0][2][27] , \s[0][2][26] , 
        \s[0][2][25] , \s[0][2][24] , \s[0][2][23] , \s[0][2][22] , 
        \s[0][2][21] , \s[0][2][20] , \s[0][2][19] , \s[0][2][18] , 
        \s[0][2][17] , \s[0][2][16] , \s[0][2][15] , \s[0][2][14] , 
        \s[0][2][13] , \s[0][2][12] , \s[0][2][11] , \s[0][2][10] , 
        \s[0][2][9] , \s[0][2][8] , \s[0][2][7] , \s[0][2][6] , \s[0][2][5] , 
        \s[0][2][4] , \s[0][2][3] , \s[0][2][2] , \s[0][2][1] , \s[0][2][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X0_Y2 \ys[2].xs[0].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[0][2][36] ), .n_in_x({\n[0][2][35] , 
        \n[0][2][34] }), .n_in_y({\n[0][2][33] , \n[0][2][32] }), .n_in_data({
        \n[0][2][31] , \n[0][2][30] , \n[0][2][29] , \n[0][2][28] , 
        \n[0][2][27] , \n[0][2][26] , \n[0][2][25] , \n[0][2][24] , 
        \n[0][2][23] , \n[0][2][22] , \n[0][2][21] , \n[0][2][20] , 
        \n[0][2][19] , \n[0][2][18] , \n[0][2][17] , \n[0][2][16] , 
        \n[0][2][15] , \n[0][2][14] , \n[0][2][13] , \n[0][2][12] , 
        \n[0][2][11] , \n[0][2][10] , \n[0][2][9] , \n[0][2][8] , \n[0][2][7] , 
        \n[0][2][6] , \n[0][2][5] , \n[0][2][4] , \n[0][2][3] , \n[0][2][2] , 
        \n[0][2][1] , \n[0][2][0] }), .w_in_v(\w[0][2][36] ), .w_in_x({
        \w[0][2][35] , \w[0][2][34] }), .w_in_y({\w[0][2][33] , \w[0][2][32] }), .w_in_data({\w[0][2][31] , \w[0][2][30] , \w[0][2][29] , \w[0][2][28] , 
        \w[0][2][27] , \w[0][2][26] , \w[0][2][25] , \w[0][2][24] , 
        \w[0][2][23] , \w[0][2][22] , \w[0][2][21] , \w[0][2][20] , 
        \w[0][2][19] , \w[0][2][18] , \w[0][2][17] , \w[0][2][16] , 
        \w[0][2][15] , \w[0][2][14] , \w[0][2][13] , \w[0][2][12] , 
        \w[0][2][11] , \w[0][2][10] , \w[0][2][9] , \w[0][2][8] , \w[0][2][7] , 
        \w[0][2][6] , \w[0][2][5] , \w[0][2][4] , \w[0][2][3] , \w[0][2][2] , 
        \w[0][2][1] , \w[0][2][0] }), .i_v(\i[0][2][36] ), .i_x({\i[0][2][35] , 
        \i[0][2][34] }), .i_y({\i[0][2][33] , \i[0][2][32] }), .i_data({
        \i[0][2][31] , \i[0][2][30] , \i[0][2][29] , \i[0][2][28] , 
        \i[0][2][27] , \i[0][2][26] , \i[0][2][25] , \i[0][2][24] , 
        \i[0][2][23] , \i[0][2][22] , \i[0][2][21] , \i[0][2][20] , 
        \i[0][2][19] , \i[0][2][18] , \i[0][2][17] , \i[0][2][16] , 
        \i[0][2][15] , \i[0][2][14] , \i[0][2][13] , \i[0][2][12] , 
        \i[0][2][11] , \i[0][2][10] , \i[0][2][9] , \i[0][2][8] , \i[0][2][7] , 
        \i[0][2][6] , \i[0][2][5] , \i[0][2][4] , \i[0][2][3] , \i[0][2][2] , 
        \i[0][2][1] , \i[0][2][0] }), .i_ack(\i_ack[0][2] ), .o_v(\o_v[0][2] ), 
        .s_out_v(\s[0][2][36] ), .s_out_x({\s[0][2][35] , \s[0][2][34] }), 
        .s_out_y({\s[0][2][33] , \s[0][2][32] }), .s_out_data({\s[0][2][31] , 
        \s[0][2][30] , \s[0][2][29] , \s[0][2][28] , \s[0][2][27] , 
        \s[0][2][26] , \s[0][2][25] , \s[0][2][24] , \s[0][2][23] , 
        \s[0][2][22] , \s[0][2][21] , \s[0][2][20] , \s[0][2][19] , 
        \s[0][2][18] , \s[0][2][17] , \s[0][2][16] , \s[0][2][15] , 
        \s[0][2][14] , \s[0][2][13] , \s[0][2][12] , \s[0][2][11] , 
        \s[0][2][10] , \s[0][2][9] , \s[0][2][8] , \s[0][2][7] , \s[0][2][6] , 
        \s[0][2][5] , \s[0][2][4] , \s[0][2][3] , \s[0][2][2] , \s[0][2][1] , 
        \s[0][2][0] }), .e_out_v(\e[0][2][36] ), .e_out_x({\e[0][2][35] , 
        \e[0][2][34] }), .e_out_y({\e[0][2][33] , \e[0][2][32] }), 
        .e_out_data({\e[0][2][31] , \e[0][2][30] , \e[0][2][29] , 
        \e[0][2][28] , \e[0][2][27] , \e[0][2][26] , \e[0][2][25] , 
        \e[0][2][24] , \e[0][2][23] , \e[0][2][22] , \e[0][2][21] , 
        \e[0][2][20] , \e[0][2][19] , \e[0][2][18] , \e[0][2][17] , 
        \e[0][2][16] , \e[0][2][15] , \e[0][2][14] , \e[0][2][13] , 
        \e[0][2][12] , \e[0][2][11] , \e[0][2][10] , \e[0][2][9] , 
        \e[0][2][8] , \e[0][2][7] , \e[0][2][6] , \e[0][2][5] , \e[0][2][4] , 
        \e[0][2][3] , \e[0][2][2] , \e[0][2][1] , \e[0][2][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X1_Y2_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[2].xs[1].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[1][2] ), .i_v(\i[1][2][36] ), 
        .i_x({\i[1][2][35] , \i[1][2][34] }), .i_y({\i[1][2][33] , 
        \i[1][2][32] }), .i_data({\i[1][2][31] , \i[1][2][30] , \i[1][2][29] , 
        \i[1][2][28] , \i[1][2][27] , \i[1][2][26] , \i[1][2][25] , 
        \i[1][2][24] , \i[1][2][23] , \i[1][2][22] , \i[1][2][21] , 
        \i[1][2][20] , \i[1][2][19] , \i[1][2][18] , \i[1][2][17] , 
        \i[1][2][16] , \i[1][2][15] , \i[1][2][14] , \i[1][2][13] , 
        \i[1][2][12] , \i[1][2][11] , \i[1][2][10] , \i[1][2][9] , 
        \i[1][2][8] , \i[1][2][7] , \i[1][2][6] , \i[1][2][5] , \i[1][2][4] , 
        \i[1][2][3] , \i[1][2][2] , \i[1][2][1] , \i[1][2][0] }), .o_v(
        \o_v[1][2] ), .o_x({\s[1][2][35] , \s[1][2][34] }), .o_y({
        \s[1][2][33] , \s[1][2][32] }), .o_data({\s[1][2][31] , \s[1][2][30] , 
        \s[1][2][29] , \s[1][2][28] , \s[1][2][27] , \s[1][2][26] , 
        \s[1][2][25] , \s[1][2][24] , \s[1][2][23] , \s[1][2][22] , 
        \s[1][2][21] , \s[1][2][20] , \s[1][2][19] , \s[1][2][18] , 
        \s[1][2][17] , \s[1][2][16] , \s[1][2][15] , \s[1][2][14] , 
        \s[1][2][13] , \s[1][2][12] , \s[1][2][11] , \s[1][2][10] , 
        \s[1][2][9] , \s[1][2][8] , \s[1][2][7] , \s[1][2][6] , \s[1][2][5] , 
        \s[1][2][4] , \s[1][2][3] , \s[1][2][2] , \s[1][2][1] , \s[1][2][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X1_Y2 \ys[2].xs[1].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[1][2][36] ), .n_in_x({\n[1][2][35] , 
        \n[1][2][34] }), .n_in_y({\n[1][2][33] , \n[1][2][32] }), .n_in_data({
        \n[1][2][31] , \n[1][2][30] , \n[1][2][29] , \n[1][2][28] , 
        \n[1][2][27] , \n[1][2][26] , \n[1][2][25] , \n[1][2][24] , 
        \n[1][2][23] , \n[1][2][22] , \n[1][2][21] , \n[1][2][20] , 
        \n[1][2][19] , \n[1][2][18] , \n[1][2][17] , \n[1][2][16] , 
        \n[1][2][15] , \n[1][2][14] , \n[1][2][13] , \n[1][2][12] , 
        \n[1][2][11] , \n[1][2][10] , \n[1][2][9] , \n[1][2][8] , \n[1][2][7] , 
        \n[1][2][6] , \n[1][2][5] , \n[1][2][4] , \n[1][2][3] , \n[1][2][2] , 
        \n[1][2][1] , \n[1][2][0] }), .w_in_v(\w[1][2][36] ), .w_in_x({
        \w[1][2][35] , \w[1][2][34] }), .w_in_y({\w[1][2][33] , \w[1][2][32] }), .w_in_data({\w[1][2][31] , \w[1][2][30] , \w[1][2][29] , \w[1][2][28] , 
        \w[1][2][27] , \w[1][2][26] , \w[1][2][25] , \w[1][2][24] , 
        \w[1][2][23] , \w[1][2][22] , \w[1][2][21] , \w[1][2][20] , 
        \w[1][2][19] , \w[1][2][18] , \w[1][2][17] , \w[1][2][16] , 
        \w[1][2][15] , \w[1][2][14] , \w[1][2][13] , \w[1][2][12] , 
        \w[1][2][11] , \w[1][2][10] , \w[1][2][9] , \w[1][2][8] , \w[1][2][7] , 
        \w[1][2][6] , \w[1][2][5] , \w[1][2][4] , \w[1][2][3] , \w[1][2][2] , 
        \w[1][2][1] , \w[1][2][0] }), .i_v(\i[1][2][36] ), .i_x({\i[1][2][35] , 
        \i[1][2][34] }), .i_y({\i[1][2][33] , \i[1][2][32] }), .i_data({
        \i[1][2][31] , \i[1][2][30] , \i[1][2][29] , \i[1][2][28] , 
        \i[1][2][27] , \i[1][2][26] , \i[1][2][25] , \i[1][2][24] , 
        \i[1][2][23] , \i[1][2][22] , \i[1][2][21] , \i[1][2][20] , 
        \i[1][2][19] , \i[1][2][18] , \i[1][2][17] , \i[1][2][16] , 
        \i[1][2][15] , \i[1][2][14] , \i[1][2][13] , \i[1][2][12] , 
        \i[1][2][11] , \i[1][2][10] , \i[1][2][9] , \i[1][2][8] , \i[1][2][7] , 
        \i[1][2][6] , \i[1][2][5] , \i[1][2][4] , \i[1][2][3] , \i[1][2][2] , 
        \i[1][2][1] , \i[1][2][0] }), .i_ack(\i_ack[1][2] ), .o_v(\o_v[1][2] ), 
        .s_out_v(\s[1][2][36] ), .s_out_x({\s[1][2][35] , \s[1][2][34] }), 
        .s_out_y({\s[1][2][33] , \s[1][2][32] }), .s_out_data({\s[1][2][31] , 
        \s[1][2][30] , \s[1][2][29] , \s[1][2][28] , \s[1][2][27] , 
        \s[1][2][26] , \s[1][2][25] , \s[1][2][24] , \s[1][2][23] , 
        \s[1][2][22] , \s[1][2][21] , \s[1][2][20] , \s[1][2][19] , 
        \s[1][2][18] , \s[1][2][17] , \s[1][2][16] , \s[1][2][15] , 
        \s[1][2][14] , \s[1][2][13] , \s[1][2][12] , \s[1][2][11] , 
        \s[1][2][10] , \s[1][2][9] , \s[1][2][8] , \s[1][2][7] , \s[1][2][6] , 
        \s[1][2][5] , \s[1][2][4] , \s[1][2][3] , \s[1][2][2] , \s[1][2][1] , 
        \s[1][2][0] }), .e_out_v(\e[1][2][36] ), .e_out_x({\e[1][2][35] , 
        \e[1][2][34] }), .e_out_y({\e[1][2][33] , \e[1][2][32] }), 
        .e_out_data({\e[1][2][31] , \e[1][2][30] , \e[1][2][29] , 
        \e[1][2][28] , \e[1][2][27] , \e[1][2][26] , \e[1][2][25] , 
        \e[1][2][24] , \e[1][2][23] , \e[1][2][22] , \e[1][2][21] , 
        \e[1][2][20] , \e[1][2][19] , \e[1][2][18] , \e[1][2][17] , 
        \e[1][2][16] , \e[1][2][15] , \e[1][2][14] , \e[1][2][13] , 
        \e[1][2][12] , \e[1][2][11] , \e[1][2][10] , \e[1][2][9] , 
        \e[1][2][8] , \e[1][2][7] , \e[1][2][6] , \e[1][2][5] , \e[1][2][4] , 
        \e[1][2][3] , \e[1][2][2] , \e[1][2][1] , \e[1][2][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X2_Y2_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[2].xs[2].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[2][2] ), .i_v(\i[2][2][36] ), 
        .i_x({\i[2][2][35] , \i[2][2][34] }), .i_y({\i[2][2][33] , 
        \i[2][2][32] }), .i_data({\i[2][2][31] , \i[2][2][30] , \i[2][2][29] , 
        \i[2][2][28] , \i[2][2][27] , \i[2][2][26] , \i[2][2][25] , 
        \i[2][2][24] , \i[2][2][23] , \i[2][2][22] , \i[2][2][21] , 
        \i[2][2][20] , \i[2][2][19] , \i[2][2][18] , \i[2][2][17] , 
        \i[2][2][16] , \i[2][2][15] , \i[2][2][14] , \i[2][2][13] , 
        \i[2][2][12] , \i[2][2][11] , \i[2][2][10] , \i[2][2][9] , 
        \i[2][2][8] , \i[2][2][7] , \i[2][2][6] , \i[2][2][5] , \i[2][2][4] , 
        \i[2][2][3] , \i[2][2][2] , \i[2][2][1] , \i[2][2][0] }), .o_v(
        \o_v[2][2] ), .o_x({\s[2][2][35] , \s[2][2][34] }), .o_y({
        \s[2][2][33] , \s[2][2][32] }), .o_data({\s[2][2][31] , \s[2][2][30] , 
        \s[2][2][29] , \s[2][2][28] , \s[2][2][27] , \s[2][2][26] , 
        \s[2][2][25] , \s[2][2][24] , \s[2][2][23] , \s[2][2][22] , 
        \s[2][2][21] , \s[2][2][20] , \s[2][2][19] , \s[2][2][18] , 
        \s[2][2][17] , \s[2][2][16] , \s[2][2][15] , \s[2][2][14] , 
        \s[2][2][13] , \s[2][2][12] , \s[2][2][11] , \s[2][2][10] , 
        \s[2][2][9] , \s[2][2][8] , \s[2][2][7] , \s[2][2][6] , \s[2][2][5] , 
        \s[2][2][4] , \s[2][2][3] , \s[2][2][2] , \s[2][2][1] , \s[2][2][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X2_Y2 \ys[2].xs[2].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[2][2][36] ), .n_in_x({\n[2][2][35] , 
        \n[2][2][34] }), .n_in_y({\n[2][2][33] , \n[2][2][32] }), .n_in_data({
        \n[2][2][31] , \n[2][2][30] , \n[2][2][29] , \n[2][2][28] , 
        \n[2][2][27] , \n[2][2][26] , \n[2][2][25] , \n[2][2][24] , 
        \n[2][2][23] , \n[2][2][22] , \n[2][2][21] , \n[2][2][20] , 
        \n[2][2][19] , \n[2][2][18] , \n[2][2][17] , \n[2][2][16] , 
        \n[2][2][15] , \n[2][2][14] , \n[2][2][13] , \n[2][2][12] , 
        \n[2][2][11] , \n[2][2][10] , \n[2][2][9] , \n[2][2][8] , \n[2][2][7] , 
        \n[2][2][6] , \n[2][2][5] , \n[2][2][4] , \n[2][2][3] , \n[2][2][2] , 
        \n[2][2][1] , \n[2][2][0] }), .w_in_v(\w[2][2][36] ), .w_in_x({
        \w[2][2][35] , \w[2][2][34] }), .w_in_y({\w[2][2][33] , \w[2][2][32] }), .w_in_data({\w[2][2][31] , \w[2][2][30] , \w[2][2][29] , \w[2][2][28] , 
        \w[2][2][27] , \w[2][2][26] , \w[2][2][25] , \w[2][2][24] , 
        \w[2][2][23] , \w[2][2][22] , \w[2][2][21] , \w[2][2][20] , 
        \w[2][2][19] , \w[2][2][18] , \w[2][2][17] , \w[2][2][16] , 
        \w[2][2][15] , \w[2][2][14] , \w[2][2][13] , \w[2][2][12] , 
        \w[2][2][11] , \w[2][2][10] , \w[2][2][9] , \w[2][2][8] , \w[2][2][7] , 
        \w[2][2][6] , \w[2][2][5] , \w[2][2][4] , \w[2][2][3] , \w[2][2][2] , 
        \w[2][2][1] , \w[2][2][0] }), .i_v(\i[2][2][36] ), .i_x({\i[2][2][35] , 
        \i[2][2][34] }), .i_y({\i[2][2][33] , \i[2][2][32] }), .i_data({
        \i[2][2][31] , \i[2][2][30] , \i[2][2][29] , \i[2][2][28] , 
        \i[2][2][27] , \i[2][2][26] , \i[2][2][25] , \i[2][2][24] , 
        \i[2][2][23] , \i[2][2][22] , \i[2][2][21] , \i[2][2][20] , 
        \i[2][2][19] , \i[2][2][18] , \i[2][2][17] , \i[2][2][16] , 
        \i[2][2][15] , \i[2][2][14] , \i[2][2][13] , \i[2][2][12] , 
        \i[2][2][11] , \i[2][2][10] , \i[2][2][9] , \i[2][2][8] , \i[2][2][7] , 
        \i[2][2][6] , \i[2][2][5] , \i[2][2][4] , \i[2][2][3] , \i[2][2][2] , 
        \i[2][2][1] , \i[2][2][0] }), .i_ack(\i_ack[2][2] ), .o_v(\o_v[2][2] ), 
        .s_out_v(\s[2][2][36] ), .s_out_x({\s[2][2][35] , \s[2][2][34] }), 
        .s_out_y({\s[2][2][33] , \s[2][2][32] }), .s_out_data({\s[2][2][31] , 
        \s[2][2][30] , \s[2][2][29] , \s[2][2][28] , \s[2][2][27] , 
        \s[2][2][26] , \s[2][2][25] , \s[2][2][24] , \s[2][2][23] , 
        \s[2][2][22] , \s[2][2][21] , \s[2][2][20] , \s[2][2][19] , 
        \s[2][2][18] , \s[2][2][17] , \s[2][2][16] , \s[2][2][15] , 
        \s[2][2][14] , \s[2][2][13] , \s[2][2][12] , \s[2][2][11] , 
        \s[2][2][10] , \s[2][2][9] , \s[2][2][8] , \s[2][2][7] , \s[2][2][6] , 
        \s[2][2][5] , \s[2][2][4] , \s[2][2][3] , \s[2][2][2] , \s[2][2][1] , 
        \s[2][2][0] }), .e_out_v(\e[2][2][36] ), .e_out_x({\e[2][2][35] , 
        \e[2][2][34] }), .e_out_y({\e[2][2][33] , \e[2][2][32] }), 
        .e_out_data({\e[2][2][31] , \e[2][2][30] , \e[2][2][29] , 
        \e[2][2][28] , \e[2][2][27] , \e[2][2][26] , \e[2][2][25] , 
        \e[2][2][24] , \e[2][2][23] , \e[2][2][22] , \e[2][2][21] , 
        \e[2][2][20] , \e[2][2][19] , \e[2][2][18] , \e[2][2][17] , 
        \e[2][2][16] , \e[2][2][15] , \e[2][2][14] , \e[2][2][13] , 
        \e[2][2][12] , \e[2][2][11] , \e[2][2][10] , \e[2][2][9] , 
        \e[2][2][8] , \e[2][2][7] , \e[2][2][6] , \e[2][2][5] , \e[2][2][4] , 
        \e[2][2][3] , \e[2][2][2] , \e[2][2][1] , \e[2][2][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X3_Y2_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[2].xs[3].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[3][2] ), .i_v(\i[3][2][36] ), 
        .i_x({\i[3][2][35] , \i[3][2][34] }), .i_y({\i[3][2][33] , 
        \i[3][2][32] }), .i_data({\i[3][2][31] , \i[3][2][30] , \i[3][2][29] , 
        \i[3][2][28] , \i[3][2][27] , \i[3][2][26] , \i[3][2][25] , 
        \i[3][2][24] , \i[3][2][23] , \i[3][2][22] , \i[3][2][21] , 
        \i[3][2][20] , \i[3][2][19] , \i[3][2][18] , \i[3][2][17] , 
        \i[3][2][16] , \i[3][2][15] , \i[3][2][14] , \i[3][2][13] , 
        \i[3][2][12] , \i[3][2][11] , \i[3][2][10] , \i[3][2][9] , 
        \i[3][2][8] , \i[3][2][7] , \i[3][2][6] , \i[3][2][5] , \i[3][2][4] , 
        \i[3][2][3] , \i[3][2][2] , \i[3][2][1] , \i[3][2][0] }), .o_v(
        \o_v[3][2] ), .o_x({\s[3][2][35] , \s[3][2][34] }), .o_y({
        \s[3][2][33] , \s[3][2][32] }), .o_data({\s[3][2][31] , \s[3][2][30] , 
        \s[3][2][29] , \s[3][2][28] , \s[3][2][27] , \s[3][2][26] , 
        \s[3][2][25] , \s[3][2][24] , \s[3][2][23] , \s[3][2][22] , 
        \s[3][2][21] , \s[3][2][20] , \s[3][2][19] , \s[3][2][18] , 
        \s[3][2][17] , \s[3][2][16] , \s[3][2][15] , \s[3][2][14] , 
        \s[3][2][13] , \s[3][2][12] , \s[3][2][11] , \s[3][2][10] , 
        \s[3][2][9] , \s[3][2][8] , \s[3][2][7] , \s[3][2][6] , \s[3][2][5] , 
        \s[3][2][4] , \s[3][2][3] , \s[3][2][2] , \s[3][2][1] , \s[3][2][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X3_Y2 \ys[2].xs[3].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[3][2][36] ), .n_in_x({\n[3][2][35] , 
        \n[3][2][34] }), .n_in_y({\n[3][2][33] , \n[3][2][32] }), .n_in_data({
        \n[3][2][31] , \n[3][2][30] , \n[3][2][29] , \n[3][2][28] , 
        \n[3][2][27] , \n[3][2][26] , \n[3][2][25] , \n[3][2][24] , 
        \n[3][2][23] , \n[3][2][22] , \n[3][2][21] , \n[3][2][20] , 
        \n[3][2][19] , \n[3][2][18] , \n[3][2][17] , \n[3][2][16] , 
        \n[3][2][15] , \n[3][2][14] , \n[3][2][13] , \n[3][2][12] , 
        \n[3][2][11] , \n[3][2][10] , \n[3][2][9] , \n[3][2][8] , \n[3][2][7] , 
        \n[3][2][6] , \n[3][2][5] , \n[3][2][4] , \n[3][2][3] , \n[3][2][2] , 
        \n[3][2][1] , \n[3][2][0] }), .w_in_v(\w[3][2][36] ), .w_in_x({
        \w[3][2][35] , \w[3][2][34] }), .w_in_y({\w[3][2][33] , \w[3][2][32] }), .w_in_data({\w[3][2][31] , \w[3][2][30] , \w[3][2][29] , \w[3][2][28] , 
        \w[3][2][27] , \w[3][2][26] , \w[3][2][25] , \w[3][2][24] , 
        \w[3][2][23] , \w[3][2][22] , \w[3][2][21] , \w[3][2][20] , 
        \w[3][2][19] , \w[3][2][18] , \w[3][2][17] , \w[3][2][16] , 
        \w[3][2][15] , \w[3][2][14] , \w[3][2][13] , \w[3][2][12] , 
        \w[3][2][11] , \w[3][2][10] , \w[3][2][9] , \w[3][2][8] , \w[3][2][7] , 
        \w[3][2][6] , \w[3][2][5] , \w[3][2][4] , \w[3][2][3] , \w[3][2][2] , 
        \w[3][2][1] , \w[3][2][0] }), .i_v(\i[3][2][36] ), .i_x({\i[3][2][35] , 
        \i[3][2][34] }), .i_y({\i[3][2][33] , \i[3][2][32] }), .i_data({
        \i[3][2][31] , \i[3][2][30] , \i[3][2][29] , \i[3][2][28] , 
        \i[3][2][27] , \i[3][2][26] , \i[3][2][25] , \i[3][2][24] , 
        \i[3][2][23] , \i[3][2][22] , \i[3][2][21] , \i[3][2][20] , 
        \i[3][2][19] , \i[3][2][18] , \i[3][2][17] , \i[3][2][16] , 
        \i[3][2][15] , \i[3][2][14] , \i[3][2][13] , \i[3][2][12] , 
        \i[3][2][11] , \i[3][2][10] , \i[3][2][9] , \i[3][2][8] , \i[3][2][7] , 
        \i[3][2][6] , \i[3][2][5] , \i[3][2][4] , \i[3][2][3] , \i[3][2][2] , 
        \i[3][2][1] , \i[3][2][0] }), .i_ack(\i_ack[3][2] ), .o_v(\o_v[3][2] ), 
        .s_out_v(\s[3][2][36] ), .s_out_x({\s[3][2][35] , \s[3][2][34] }), 
        .s_out_y({\s[3][2][33] , \s[3][2][32] }), .s_out_data({\s[3][2][31] , 
        \s[3][2][30] , \s[3][2][29] , \s[3][2][28] , \s[3][2][27] , 
        \s[3][2][26] , \s[3][2][25] , \s[3][2][24] , \s[3][2][23] , 
        \s[3][2][22] , \s[3][2][21] , \s[3][2][20] , \s[3][2][19] , 
        \s[3][2][18] , \s[3][2][17] , \s[3][2][16] , \s[3][2][15] , 
        \s[3][2][14] , \s[3][2][13] , \s[3][2][12] , \s[3][2][11] , 
        \s[3][2][10] , \s[3][2][9] , \s[3][2][8] , \s[3][2][7] , \s[3][2][6] , 
        \s[3][2][5] , \s[3][2][4] , \s[3][2][3] , \s[3][2][2] , \s[3][2][1] , 
        \s[3][2][0] }), .e_out_v(\e[3][2][36] ), .e_out_x({\e[3][2][35] , 
        \e[3][2][34] }), .e_out_y({\e[3][2][33] , \e[3][2][32] }), 
        .e_out_data({\e[3][2][31] , \e[3][2][30] , \e[3][2][29] , 
        \e[3][2][28] , \e[3][2][27] , \e[3][2][26] , \e[3][2][25] , 
        \e[3][2][24] , \e[3][2][23] , \e[3][2][22] , \e[3][2][21] , 
        \e[3][2][20] , \e[3][2][19] , \e[3][2][18] , \e[3][2][17] , 
        \e[3][2][16] , \e[3][2][15] , \e[3][2][14] , \e[3][2][13] , 
        \e[3][2][12] , \e[3][2][11] , \e[3][2][10] , \e[3][2][9] , 
        \e[3][2][8] , \e[3][2][7] , \e[3][2][6] , \e[3][2][5] , \e[3][2][4] , 
        \e[3][2][3] , \e[3][2][2] , \e[3][2][1] , \e[3][2][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X0_Y3_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[3].xs[0].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[0][3] ), .i_v(\i[0][3][36] ), 
        .i_x({\i[0][3][35] , \i[0][3][34] }), .i_y({\i[0][3][33] , 
        \i[0][3][32] }), .i_data({\i[0][3][31] , \i[0][3][30] , \i[0][3][29] , 
        \i[0][3][28] , \i[0][3][27] , \i[0][3][26] , \i[0][3][25] , 
        \i[0][3][24] , \i[0][3][23] , \i[0][3][22] , \i[0][3][21] , 
        \i[0][3][20] , \i[0][3][19] , \i[0][3][18] , \i[0][3][17] , 
        \i[0][3][16] , \i[0][3][15] , \i[0][3][14] , \i[0][3][13] , 
        \i[0][3][12] , \i[0][3][11] , \i[0][3][10] , \i[0][3][9] , 
        \i[0][3][8] , \i[0][3][7] , \i[0][3][6] , \i[0][3][5] , \i[0][3][4] , 
        \i[0][3][3] , \i[0][3][2] , \i[0][3][1] , \i[0][3][0] }), .o_v(
        \o_v[0][3] ), .o_x({\s[0][3][35] , \s[0][3][34] }), .o_y({
        \s[0][3][33] , \s[0][3][32] }), .o_data({\s[0][3][31] , \s[0][3][30] , 
        \s[0][3][29] , \s[0][3][28] , \s[0][3][27] , \s[0][3][26] , 
        \s[0][3][25] , \s[0][3][24] , \s[0][3][23] , \s[0][3][22] , 
        \s[0][3][21] , \s[0][3][20] , \s[0][3][19] , \s[0][3][18] , 
        \s[0][3][17] , \s[0][3][16] , \s[0][3][15] , \s[0][3][14] , 
        \s[0][3][13] , \s[0][3][12] , \s[0][3][11] , \s[0][3][10] , 
        \s[0][3][9] , \s[0][3][8] , \s[0][3][7] , \s[0][3][6] , \s[0][3][5] , 
        \s[0][3][4] , \s[0][3][3] , \s[0][3][2] , \s[0][3][1] , \s[0][3][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X0_Y3 \ys[3].xs[0].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[0][3][36] ), .n_in_x({\n[0][3][35] , 
        \n[0][3][34] }), .n_in_y({\n[0][3][33] , \n[0][3][32] }), .n_in_data({
        \n[0][3][31] , \n[0][3][30] , \n[0][3][29] , \n[0][3][28] , 
        \n[0][3][27] , \n[0][3][26] , \n[0][3][25] , \n[0][3][24] , 
        \n[0][3][23] , \n[0][3][22] , \n[0][3][21] , \n[0][3][20] , 
        \n[0][3][19] , \n[0][3][18] , \n[0][3][17] , \n[0][3][16] , 
        \n[0][3][15] , \n[0][3][14] , \n[0][3][13] , \n[0][3][12] , 
        \n[0][3][11] , \n[0][3][10] , \n[0][3][9] , \n[0][3][8] , \n[0][3][7] , 
        \n[0][3][6] , \n[0][3][5] , \n[0][3][4] , \n[0][3][3] , \n[0][3][2] , 
        \n[0][3][1] , \n[0][3][0] }), .w_in_v(\w[0][3][36] ), .w_in_x({
        \w[0][3][35] , \w[0][3][34] }), .w_in_y({\w[0][3][33] , \w[0][3][32] }), .w_in_data({\w[0][3][31] , \w[0][3][30] , \w[0][3][29] , \w[0][3][28] , 
        \w[0][3][27] , \w[0][3][26] , \w[0][3][25] , \w[0][3][24] , 
        \w[0][3][23] , \w[0][3][22] , \w[0][3][21] , \w[0][3][20] , 
        \w[0][3][19] , \w[0][3][18] , \w[0][3][17] , \w[0][3][16] , 
        \w[0][3][15] , \w[0][3][14] , \w[0][3][13] , \w[0][3][12] , 
        \w[0][3][11] , \w[0][3][10] , \w[0][3][9] , \w[0][3][8] , \w[0][3][7] , 
        \w[0][3][6] , \w[0][3][5] , \w[0][3][4] , \w[0][3][3] , \w[0][3][2] , 
        \w[0][3][1] , \w[0][3][0] }), .i_v(\i[0][3][36] ), .i_x({\i[0][3][35] , 
        \i[0][3][34] }), .i_y({\i[0][3][33] , \i[0][3][32] }), .i_data({
        \i[0][3][31] , \i[0][3][30] , \i[0][3][29] , \i[0][3][28] , 
        \i[0][3][27] , \i[0][3][26] , \i[0][3][25] , \i[0][3][24] , 
        \i[0][3][23] , \i[0][3][22] , \i[0][3][21] , \i[0][3][20] , 
        \i[0][3][19] , \i[0][3][18] , \i[0][3][17] , \i[0][3][16] , 
        \i[0][3][15] , \i[0][3][14] , \i[0][3][13] , \i[0][3][12] , 
        \i[0][3][11] , \i[0][3][10] , \i[0][3][9] , \i[0][3][8] , \i[0][3][7] , 
        \i[0][3][6] , \i[0][3][5] , \i[0][3][4] , \i[0][3][3] , \i[0][3][2] , 
        \i[0][3][1] , \i[0][3][0] }), .i_ack(\i_ack[0][3] ), .o_v(\o_v[0][3] ), 
        .s_out_v(\s[0][3][36] ), .s_out_x({\s[0][3][35] , \s[0][3][34] }), 
        .s_out_y({\s[0][3][33] , \s[0][3][32] }), .s_out_data({\s[0][3][31] , 
        \s[0][3][30] , \s[0][3][29] , \s[0][3][28] , \s[0][3][27] , 
        \s[0][3][26] , \s[0][3][25] , \s[0][3][24] , \s[0][3][23] , 
        \s[0][3][22] , \s[0][3][21] , \s[0][3][20] , \s[0][3][19] , 
        \s[0][3][18] , \s[0][3][17] , \s[0][3][16] , \s[0][3][15] , 
        \s[0][3][14] , \s[0][3][13] , \s[0][3][12] , \s[0][3][11] , 
        \s[0][3][10] , \s[0][3][9] , \s[0][3][8] , \s[0][3][7] , \s[0][3][6] , 
        \s[0][3][5] , \s[0][3][4] , \s[0][3][3] , \s[0][3][2] , \s[0][3][1] , 
        \s[0][3][0] }), .e_out_v(\e[0][3][36] ), .e_out_x({\e[0][3][35] , 
        \e[0][3][34] }), .e_out_y({\e[0][3][33] , \e[0][3][32] }), 
        .e_out_data({\e[0][3][31] , \e[0][3][30] , \e[0][3][29] , 
        \e[0][3][28] , \e[0][3][27] , \e[0][3][26] , \e[0][3][25] , 
        \e[0][3][24] , \e[0][3][23] , \e[0][3][22] , \e[0][3][21] , 
        \e[0][3][20] , \e[0][3][19] , \e[0][3][18] , \e[0][3][17] , 
        \e[0][3][16] , \e[0][3][15] , \e[0][3][14] , \e[0][3][13] , 
        \e[0][3][12] , \e[0][3][11] , \e[0][3][10] , \e[0][3][9] , 
        \e[0][3][8] , \e[0][3][7] , \e[0][3][6] , \e[0][3][5] , \e[0][3][4] , 
        \e[0][3][3] , \e[0][3][2] , \e[0][3][1] , \e[0][3][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X1_Y3_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[3].xs[1].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[1][3] ), .i_v(\i[1][3][36] ), 
        .i_x({\i[1][3][35] , \i[1][3][34] }), .i_y({\i[1][3][33] , 
        \i[1][3][32] }), .i_data({\i[1][3][31] , \i[1][3][30] , \i[1][3][29] , 
        \i[1][3][28] , \i[1][3][27] , \i[1][3][26] , \i[1][3][25] , 
        \i[1][3][24] , \i[1][3][23] , \i[1][3][22] , \i[1][3][21] , 
        \i[1][3][20] , \i[1][3][19] , \i[1][3][18] , \i[1][3][17] , 
        \i[1][3][16] , \i[1][3][15] , \i[1][3][14] , \i[1][3][13] , 
        \i[1][3][12] , \i[1][3][11] , \i[1][3][10] , \i[1][3][9] , 
        \i[1][3][8] , \i[1][3][7] , \i[1][3][6] , \i[1][3][5] , \i[1][3][4] , 
        \i[1][3][3] , \i[1][3][2] , \i[1][3][1] , \i[1][3][0] }), .o_v(
        \o_v[1][3] ), .o_x({\s[1][3][35] , \s[1][3][34] }), .o_y({
        \s[1][3][33] , \s[1][3][32] }), .o_data({\s[1][3][31] , \s[1][3][30] , 
        \s[1][3][29] , \s[1][3][28] , \s[1][3][27] , \s[1][3][26] , 
        \s[1][3][25] , \s[1][3][24] , \s[1][3][23] , \s[1][3][22] , 
        \s[1][3][21] , \s[1][3][20] , \s[1][3][19] , \s[1][3][18] , 
        \s[1][3][17] , \s[1][3][16] , \s[1][3][15] , \s[1][3][14] , 
        \s[1][3][13] , \s[1][3][12] , \s[1][3][11] , \s[1][3][10] , 
        \s[1][3][9] , \s[1][3][8] , \s[1][3][7] , \s[1][3][6] , \s[1][3][5] , 
        \s[1][3][4] , \s[1][3][3] , \s[1][3][2] , \s[1][3][1] , \s[1][3][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X1_Y3 \ys[3].xs[1].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[1][3][36] ), .n_in_x({\n[1][3][35] , 
        \n[1][3][34] }), .n_in_y({\n[1][3][33] , \n[1][3][32] }), .n_in_data({
        \n[1][3][31] , \n[1][3][30] , \n[1][3][29] , \n[1][3][28] , 
        \n[1][3][27] , \n[1][3][26] , \n[1][3][25] , \n[1][3][24] , 
        \n[1][3][23] , \n[1][3][22] , \n[1][3][21] , \n[1][3][20] , 
        \n[1][3][19] , \n[1][3][18] , \n[1][3][17] , \n[1][3][16] , 
        \n[1][3][15] , \n[1][3][14] , \n[1][3][13] , \n[1][3][12] , 
        \n[1][3][11] , \n[1][3][10] , \n[1][3][9] , \n[1][3][8] , \n[1][3][7] , 
        \n[1][3][6] , \n[1][3][5] , \n[1][3][4] , \n[1][3][3] , \n[1][3][2] , 
        \n[1][3][1] , \n[1][3][0] }), .w_in_v(\w[1][3][36] ), .w_in_x({
        \w[1][3][35] , \w[1][3][34] }), .w_in_y({\w[1][3][33] , \w[1][3][32] }), .w_in_data({\w[1][3][31] , \w[1][3][30] , \w[1][3][29] , \w[1][3][28] , 
        \w[1][3][27] , \w[1][3][26] , \w[1][3][25] , \w[1][3][24] , 
        \w[1][3][23] , \w[1][3][22] , \w[1][3][21] , \w[1][3][20] , 
        \w[1][3][19] , \w[1][3][18] , \w[1][3][17] , \w[1][3][16] , 
        \w[1][3][15] , \w[1][3][14] , \w[1][3][13] , \w[1][3][12] , 
        \w[1][3][11] , \w[1][3][10] , \w[1][3][9] , \w[1][3][8] , \w[1][3][7] , 
        \w[1][3][6] , \w[1][3][5] , \w[1][3][4] , \w[1][3][3] , \w[1][3][2] , 
        \w[1][3][1] , \w[1][3][0] }), .i_v(\i[1][3][36] ), .i_x({\i[1][3][35] , 
        \i[1][3][34] }), .i_y({\i[1][3][33] , \i[1][3][32] }), .i_data({
        \i[1][3][31] , \i[1][3][30] , \i[1][3][29] , \i[1][3][28] , 
        \i[1][3][27] , \i[1][3][26] , \i[1][3][25] , \i[1][3][24] , 
        \i[1][3][23] , \i[1][3][22] , \i[1][3][21] , \i[1][3][20] , 
        \i[1][3][19] , \i[1][3][18] , \i[1][3][17] , \i[1][3][16] , 
        \i[1][3][15] , \i[1][3][14] , \i[1][3][13] , \i[1][3][12] , 
        \i[1][3][11] , \i[1][3][10] , \i[1][3][9] , \i[1][3][8] , \i[1][3][7] , 
        \i[1][3][6] , \i[1][3][5] , \i[1][3][4] , \i[1][3][3] , \i[1][3][2] , 
        \i[1][3][1] , \i[1][3][0] }), .i_ack(\i_ack[1][3] ), .o_v(\o_v[1][3] ), 
        .s_out_v(\s[1][3][36] ), .s_out_x({\s[1][3][35] , \s[1][3][34] }), 
        .s_out_y({\s[1][3][33] , \s[1][3][32] }), .s_out_data({\s[1][3][31] , 
        \s[1][3][30] , \s[1][3][29] , \s[1][3][28] , \s[1][3][27] , 
        \s[1][3][26] , \s[1][3][25] , \s[1][3][24] , \s[1][3][23] , 
        \s[1][3][22] , \s[1][3][21] , \s[1][3][20] , \s[1][3][19] , 
        \s[1][3][18] , \s[1][3][17] , \s[1][3][16] , \s[1][3][15] , 
        \s[1][3][14] , \s[1][3][13] , \s[1][3][12] , \s[1][3][11] , 
        \s[1][3][10] , \s[1][3][9] , \s[1][3][8] , \s[1][3][7] , \s[1][3][6] , 
        \s[1][3][5] , \s[1][3][4] , \s[1][3][3] , \s[1][3][2] , \s[1][3][1] , 
        \s[1][3][0] }), .e_out_v(\e[1][3][36] ), .e_out_x({\e[1][3][35] , 
        \e[1][3][34] }), .e_out_y({\e[1][3][33] , \e[1][3][32] }), 
        .e_out_data({\e[1][3][31] , \e[1][3][30] , \e[1][3][29] , 
        \e[1][3][28] , \e[1][3][27] , \e[1][3][26] , \e[1][3][25] , 
        \e[1][3][24] , \e[1][3][23] , \e[1][3][22] , \e[1][3][21] , 
        \e[1][3][20] , \e[1][3][19] , \e[1][3][18] , \e[1][3][17] , 
        \e[1][3][16] , \e[1][3][15] , \e[1][3][14] , \e[1][3][13] , 
        \e[1][3][12] , \e[1][3][11] , \e[1][3][10] , \e[1][3][9] , 
        \e[1][3][8] , \e[1][3][7] , \e[1][3][6] , \e[1][3][5] , \e[1][3][4] , 
        \e[1][3][3] , \e[1][3][2] , \e[1][3][1] , \e[1][3][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X2_Y3_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[3].xs[2].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[2][3] ), .i_v(\i[2][3][36] ), 
        .i_x({\i[2][3][35] , \i[2][3][34] }), .i_y({\i[2][3][33] , 
        \i[2][3][32] }), .i_data({\i[2][3][31] , \i[2][3][30] , \i[2][3][29] , 
        \i[2][3][28] , \i[2][3][27] , \i[2][3][26] , \i[2][3][25] , 
        \i[2][3][24] , \i[2][3][23] , \i[2][3][22] , \i[2][3][21] , 
        \i[2][3][20] , \i[2][3][19] , \i[2][3][18] , \i[2][3][17] , 
        \i[2][3][16] , \i[2][3][15] , \i[2][3][14] , \i[2][3][13] , 
        \i[2][3][12] , \i[2][3][11] , \i[2][3][10] , \i[2][3][9] , 
        \i[2][3][8] , \i[2][3][7] , \i[2][3][6] , \i[2][3][5] , \i[2][3][4] , 
        \i[2][3][3] , \i[2][3][2] , \i[2][3][1] , \i[2][3][0] }), .o_v(
        \o_v[2][3] ), .o_x({\s[2][3][35] , \s[2][3][34] }), .o_y({
        \s[2][3][33] , \s[2][3][32] }), .o_data({\s[2][3][31] , \s[2][3][30] , 
        \s[2][3][29] , \s[2][3][28] , \s[2][3][27] , \s[2][3][26] , 
        \s[2][3][25] , \s[2][3][24] , \s[2][3][23] , \s[2][3][22] , 
        \s[2][3][21] , \s[2][3][20] , \s[2][3][19] , \s[2][3][18] , 
        \s[2][3][17] , \s[2][3][16] , \s[2][3][15] , \s[2][3][14] , 
        \s[2][3][13] , \s[2][3][12] , \s[2][3][11] , \s[2][3][10] , 
        \s[2][3][9] , \s[2][3][8] , \s[2][3][7] , \s[2][3][6] , \s[2][3][5] , 
        \s[2][3][4] , \s[2][3][3] , \s[2][3][2] , \s[2][3][1] , \s[2][3][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X2_Y3 \ys[3].xs[2].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[2][3][36] ), .n_in_x({\n[2][3][35] , 
        \n[2][3][34] }), .n_in_y({\n[2][3][33] , \n[2][3][32] }), .n_in_data({
        \n[2][3][31] , \n[2][3][30] , \n[2][3][29] , \n[2][3][28] , 
        \n[2][3][27] , \n[2][3][26] , \n[2][3][25] , \n[2][3][24] , 
        \n[2][3][23] , \n[2][3][22] , \n[2][3][21] , \n[2][3][20] , 
        \n[2][3][19] , \n[2][3][18] , \n[2][3][17] , \n[2][3][16] , 
        \n[2][3][15] , \n[2][3][14] , \n[2][3][13] , \n[2][3][12] , 
        \n[2][3][11] , \n[2][3][10] , \n[2][3][9] , \n[2][3][8] , \n[2][3][7] , 
        \n[2][3][6] , \n[2][3][5] , \n[2][3][4] , \n[2][3][3] , \n[2][3][2] , 
        \n[2][3][1] , \n[2][3][0] }), .w_in_v(\w[2][3][36] ), .w_in_x({
        \w[2][3][35] , \w[2][3][34] }), .w_in_y({\w[2][3][33] , \w[2][3][32] }), .w_in_data({\w[2][3][31] , \w[2][3][30] , \w[2][3][29] , \w[2][3][28] , 
        \w[2][3][27] , \w[2][3][26] , \w[2][3][25] , \w[2][3][24] , 
        \w[2][3][23] , \w[2][3][22] , \w[2][3][21] , \w[2][3][20] , 
        \w[2][3][19] , \w[2][3][18] , \w[2][3][17] , \w[2][3][16] , 
        \w[2][3][15] , \w[2][3][14] , \w[2][3][13] , \w[2][3][12] , 
        \w[2][3][11] , \w[2][3][10] , \w[2][3][9] , \w[2][3][8] , \w[2][3][7] , 
        \w[2][3][6] , \w[2][3][5] , \w[2][3][4] , \w[2][3][3] , \w[2][3][2] , 
        \w[2][3][1] , \w[2][3][0] }), .i_v(\i[2][3][36] ), .i_x({\i[2][3][35] , 
        \i[2][3][34] }), .i_y({\i[2][3][33] , \i[2][3][32] }), .i_data({
        \i[2][3][31] , \i[2][3][30] , \i[2][3][29] , \i[2][3][28] , 
        \i[2][3][27] , \i[2][3][26] , \i[2][3][25] , \i[2][3][24] , 
        \i[2][3][23] , \i[2][3][22] , \i[2][3][21] , \i[2][3][20] , 
        \i[2][3][19] , \i[2][3][18] , \i[2][3][17] , \i[2][3][16] , 
        \i[2][3][15] , \i[2][3][14] , \i[2][3][13] , \i[2][3][12] , 
        \i[2][3][11] , \i[2][3][10] , \i[2][3][9] , \i[2][3][8] , \i[2][3][7] , 
        \i[2][3][6] , \i[2][3][5] , \i[2][3][4] , \i[2][3][3] , \i[2][3][2] , 
        \i[2][3][1] , \i[2][3][0] }), .i_ack(\i_ack[2][3] ), .o_v(\o_v[2][3] ), 
        .s_out_v(\s[2][3][36] ), .s_out_x({\s[2][3][35] , \s[2][3][34] }), 
        .s_out_y({\s[2][3][33] , \s[2][3][32] }), .s_out_data({\s[2][3][31] , 
        \s[2][3][30] , \s[2][3][29] , \s[2][3][28] , \s[2][3][27] , 
        \s[2][3][26] , \s[2][3][25] , \s[2][3][24] , \s[2][3][23] , 
        \s[2][3][22] , \s[2][3][21] , \s[2][3][20] , \s[2][3][19] , 
        \s[2][3][18] , \s[2][3][17] , \s[2][3][16] , \s[2][3][15] , 
        \s[2][3][14] , \s[2][3][13] , \s[2][3][12] , \s[2][3][11] , 
        \s[2][3][10] , \s[2][3][9] , \s[2][3][8] , \s[2][3][7] , \s[2][3][6] , 
        \s[2][3][5] , \s[2][3][4] , \s[2][3][3] , \s[2][3][2] , \s[2][3][1] , 
        \s[2][3][0] }), .e_out_v(\e[2][3][36] ), .e_out_x({\e[2][3][35] , 
        \e[2][3][34] }), .e_out_y({\e[2][3][33] , \e[2][3][32] }), 
        .e_out_data({\e[2][3][31] , \e[2][3][30] , \e[2][3][29] , 
        \e[2][3][28] , \e[2][3][27] , \e[2][3][26] , \e[2][3][25] , 
        \e[2][3][24] , \e[2][3][23] , \e[2][3][22] , \e[2][3][21] , 
        \e[2][3][20] , \e[2][3][19] , \e[2][3][18] , \e[2][3][17] , 
        \e[2][3][16] , \e[2][3][15] , \e[2][3][14] , \e[2][3][13] , 
        \e[2][3][12] , \e[2][3][11] , \e[2][3][10] , \e[2][3][9] , 
        \e[2][3][8] , \e[2][3][7] , \e[2][3][6] , \e[2][3][5] , \e[2][3][4] , 
        \e[2][3][3] , \e[2][3][2] , \e[2][3][1] , \e[2][3][0] }) );
  client_SIGMA3_RATE20_VC_W3_X_W2_Y_W2_X3_Y3_D_W32_N_PACKETS128_X_MAX4_Y_MAX4 \ys[3].xs[3].client_xy  ( 
        .clk(clk), .rst(rst), .i_ack(\i_ack[3][3] ), .i_v(\i[3][3][36] ), 
        .i_x({\i[3][3][35] , \i[3][3][34] }), .i_y({\i[3][3][33] , 
        \i[3][3][32] }), .i_data({\i[3][3][31] , \i[3][3][30] , \i[3][3][29] , 
        \i[3][3][28] , \i[3][3][27] , \i[3][3][26] , \i[3][3][25] , 
        \i[3][3][24] , \i[3][3][23] , \i[3][3][22] , \i[3][3][21] , 
        \i[3][3][20] , \i[3][3][19] , \i[3][3][18] , \i[3][3][17] , 
        \i[3][3][16] , \i[3][3][15] , \i[3][3][14] , \i[3][3][13] , 
        \i[3][3][12] , \i[3][3][11] , \i[3][3][10] , \i[3][3][9] , 
        \i[3][3][8] , \i[3][3][7] , \i[3][3][6] , \i[3][3][5] , \i[3][3][4] , 
        \i[3][3][3] , \i[3][3][2] , \i[3][3][1] , \i[3][3][0] }), .o_v(
        \o_v[3][3] ), .o_x({\s[3][3][35] , \s[3][3][34] }), .o_y({
        \s[3][3][33] , \s[3][3][32] }), .o_data({\s[3][3][31] , \s[3][3][30] , 
        \s[3][3][29] , \s[3][3][28] , \s[3][3][27] , \s[3][3][26] , 
        \s[3][3][25] , \s[3][3][24] , \s[3][3][23] , \s[3][3][22] , 
        \s[3][3][21] , \s[3][3][20] , \s[3][3][19] , \s[3][3][18] , 
        \s[3][3][17] , \s[3][3][16] , \s[3][3][15] , \s[3][3][14] , 
        \s[3][3][13] , \s[3][3][12] , \s[3][3][11] , \s[3][3][10] , 
        \s[3][3][9] , \s[3][3][8] , \s[3][3][7] , \s[3][3][6] , \s[3][3][5] , 
        \s[3][3][4] , \s[3][3][3] , \s[3][3][2] , \s[3][3][1] , \s[3][3][0] })
         );
  torus_switch_X_W2_Y_W2_D_W32_X3_Y3 \ys[3].xs[3].torus_switch_xy  ( .clk(clk), 
        .rst(rst), .n_in_v(\n[3][3][36] ), .n_in_x({\n[3][3][35] , 
        \n[3][3][34] }), .n_in_y({\n[3][3][33] , \n[3][3][32] }), .n_in_data({
        \n[3][3][31] , \n[3][3][30] , \n[3][3][29] , \n[3][3][28] , 
        \n[3][3][27] , \n[3][3][26] , \n[3][3][25] , \n[3][3][24] , 
        \n[3][3][23] , \n[3][3][22] , \n[3][3][21] , \n[3][3][20] , 
        \n[3][3][19] , \n[3][3][18] , \n[3][3][17] , \n[3][3][16] , 
        \n[3][3][15] , \n[3][3][14] , \n[3][3][13] , \n[3][3][12] , 
        \n[3][3][11] , \n[3][3][10] , \n[3][3][9] , \n[3][3][8] , \n[3][3][7] , 
        \n[3][3][6] , \n[3][3][5] , \n[3][3][4] , \n[3][3][3] , \n[3][3][2] , 
        \n[3][3][1] , \n[3][3][0] }), .w_in_v(\w[3][3][36] ), .w_in_x({
        \w[3][3][35] , \w[3][3][34] }), .w_in_y({\w[3][3][33] , \w[3][3][32] }), .w_in_data({\w[3][3][31] , \w[3][3][30] , \w[3][3][29] , \w[3][3][28] , 
        \w[3][3][27] , \w[3][3][26] , \w[3][3][25] , \w[3][3][24] , 
        \w[3][3][23] , \w[3][3][22] , \w[3][3][21] , \w[3][3][20] , 
        \w[3][3][19] , \w[3][3][18] , \w[3][3][17] , \w[3][3][16] , 
        \w[3][3][15] , \w[3][3][14] , \w[3][3][13] , \w[3][3][12] , 
        \w[3][3][11] , \w[3][3][10] , \w[3][3][9] , \w[3][3][8] , \w[3][3][7] , 
        \w[3][3][6] , \w[3][3][5] , \w[3][3][4] , \w[3][3][3] , \w[3][3][2] , 
        \w[3][3][1] , \w[3][3][0] }), .i_v(\i[3][3][36] ), .i_x({\i[3][3][35] , 
        \i[3][3][34] }), .i_y({\i[3][3][33] , \i[3][3][32] }), .i_data({
        \i[3][3][31] , \i[3][3][30] , \i[3][3][29] , \i[3][3][28] , 
        \i[3][3][27] , \i[3][3][26] , \i[3][3][25] , \i[3][3][24] , 
        \i[3][3][23] , \i[3][3][22] , \i[3][3][21] , \i[3][3][20] , 
        \i[3][3][19] , \i[3][3][18] , \i[3][3][17] , \i[3][3][16] , 
        \i[3][3][15] , \i[3][3][14] , \i[3][3][13] , \i[3][3][12] , 
        \i[3][3][11] , \i[3][3][10] , \i[3][3][9] , \i[3][3][8] , \i[3][3][7] , 
        \i[3][3][6] , \i[3][3][5] , \i[3][3][4] , \i[3][3][3] , \i[3][3][2] , 
        \i[3][3][1] , \i[3][3][0] }), .i_ack(\i_ack[3][3] ), .o_v(\o_v[3][3] ), 
        .s_out_v(\s[3][3][36] ), .s_out_x({\s[3][3][35] , \s[3][3][34] }), 
        .s_out_y({\s[3][3][33] , \s[3][3][32] }), .s_out_data({\s[3][3][31] , 
        \s[3][3][30] , \s[3][3][29] , \s[3][3][28] , \s[3][3][27] , 
        \s[3][3][26] , \s[3][3][25] , \s[3][3][24] , \s[3][3][23] , 
        \s[3][3][22] , \s[3][3][21] , \s[3][3][20] , \s[3][3][19] , 
        \s[3][3][18] , \s[3][3][17] , \s[3][3][16] , \s[3][3][15] , 
        \s[3][3][14] , \s[3][3][13] , \s[3][3][12] , \s[3][3][11] , 
        \s[3][3][10] , \s[3][3][9] , \s[3][3][8] , \s[3][3][7] , \s[3][3][6] , 
        \s[3][3][5] , \s[3][3][4] , \s[3][3][3] , \s[3][3][2] , \s[3][3][1] , 
        \s[3][3][0] }), .e_out_v(\e[3][3][36] ), .e_out_x({\e[3][3][35] , 
        \e[3][3][34] }), .e_out_y({\e[3][3][33] , \e[3][3][32] }), 
        .e_out_data({\e[3][3][31] , \e[3][3][30] , \e[3][3][29] , 
        \e[3][3][28] , \e[3][3][27] , \e[3][3][26] , \e[3][3][25] , 
        \e[3][3][24] , \e[3][3][23] , \e[3][3][22] , \e[3][3][21] , 
        \e[3][3][20] , \e[3][3][19] , \e[3][3][18] , \e[3][3][17] , 
        \e[3][3][16] , \e[3][3][15] , \e[3][3][14] , \e[3][3][13] , 
        \e[3][3][12] , \e[3][3][11] , \e[3][3][10] , \e[3][3][9] , 
        \e[3][3][8] , \e[3][3][7] , \e[3][3][6] , \e[3][3][5] , \e[3][3][4] , 
        \e[3][3][3] , \e[3][3][2] , \e[3][3][1] , \e[3][3][0] }) );
  TIEL U12 ( .ZN(done) );
endmodule

